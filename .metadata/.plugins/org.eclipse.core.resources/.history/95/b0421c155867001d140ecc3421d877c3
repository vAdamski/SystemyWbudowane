// Functions for easy use of 4-digit 7-segment display on Kamami KAMeLeon STM32L496 board.
// jk 11'2017
// The initialization code was generated in STM32CubeMX.

#include "kamami_l496_7seg.h"
#include "stm32l4xx_hal.h"

#define DIG1_Pin GPIO_PIN_2
#define DIG1_GPIO_Port GPIOB
#define SEG_A_Pin GPIO_PIN_0
#define SEG_A_GPIO_Port GPIOG
#define SEG_B_Pin GPIO_PIN_1
#define SEG_B_GPIO_Port GPIOG
#define SEG_C_Pin GPIO_PIN_2
#define SEG_C_GPIO_Port GPIOG
#define SEG_D_Pin GPIO_PIN_3
#define SEG_D_GPIO_Port GPIOG
#define SEG_E_Pin GPIO_PIN_4
#define SEG_E_GPIO_Port GPIOG
#define SEG_F_Pin GPIO_PIN_5
#define SEG_F_GPIO_Port GPIOG
#define SEG_G_Pin GPIO_PIN_6
#define SEG_G_GPIO_Port GPIOG
#define SEG_DP_Pin GPIO_PIN_9
#define SEG_DP_GPIO_Port GPIOG
#define DIG2_Pin GPIO_PIN_3
#define DIG2_GPIO_Port GPIOB
#define DIG3_Pin GPIO_PIN_4
#define DIG3_GPIO_Port GPIOB
#define DIG4_Pin GPIO_PIN_5
#define DIG4_GPIO_Port GPIOB

#define SEG_MSK (0xffu | SEG_DP_Pin)
#define DIG_MSK (0xfu << 2)

#define	NDIGITS	4
uint16_t display[NDIGITS];

const uint8_t segments[] = {
	SEG_A_Pin | SEG_B_Pin | SEG_C_Pin | SEG_D_Pin | SEG_E_Pin | SEG_F_Pin,	// 0
	SEG_B_Pin | SEG_C_Pin,	// 1
	SEG_A_Pin | SEG_B_Pin | SEG_D_Pin | SEG_E_Pin | SEG_G_Pin,	// 2
	SEG_A_Pin | SEG_B_Pin | SEG_C_Pin | SEG_D_Pin | SEG_G_Pin,	// 3
	SEG_B_Pin | SEG_C_Pin | SEG_F_Pin | SEG_G_Pin,	// 4
	SEG_A_Pin | SEG_C_Pin | SEG_D_Pin | SEG_F_Pin | SEG_G_Pin,	// 5
	SEG_A_Pin | SEG_C_Pin | SEG_D_Pin | SEG_E_Pin | SEG_F_Pin | SEG_G_Pin,	// 6
	SEG_A_Pin | SEG_B_Pin | SEG_C_Pin,	// 7
	SEG_A_Pin | SEG_B_Pin | SEG_C_Pin | SEG_D_Pin | SEG_E_Pin | SEG_F_Pin | SEG_G_Pin,	// 8
	SEG_A_Pin | SEG_B_Pin | SEG_C_Pin | SEG_D_Pin | SEG_F_Pin | SEG_G_Pin	// 9
};

const uint8_t digits[] = {DIG4_Pin, DIG3_Pin, DIG2_Pin, DIG1_Pin};

TIM_HandleTypeDef htim2;

static void MX_TIM2_Init(void);
	
void dis7seg_init(void)
{
  // initialize GPIO
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin 
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin DIG3_Pin DIG4_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin 
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin 
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
  
  // initialize TIM2  
  __HAL_RCC_TIM2_CLK_ENABLE();
  MX_TIM2_Init();
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
}

uint8_t dis7seg_displayHHMM(uint16_t HH, uint16_t MM)
{
	//Display HH
	// 1 number
	display[0] = segments[HH - (HH/10) * 10];
	// 2 number
	display[1] = segments[HH / 10];

	return 0;
}

uint8_t dis7seg_display(uint16_t value)
{
	if(value > 9999)
		return 1;
	display[0] = segments[value % 10];
	value /= 10;
	display[1] = value ? segments[value % 10] : 0;
	value /= 10;
	display[2] = value ? segments[value % 10] : 0;
	value /= 10;
	display[3] = value ? segments[value % 10] : 0;	
	return 0;
}

uint8_t dis7seg_display_fixed_point(uint16_t value, uint8_t fraction_digits)
{
	if(value > 9999 || fraction_digits > 3)
		return 1;

	display[0] = segments[value % 10];
	value /= 10;
	display[1] = value ? segments[value % 10] : (fraction_digits >= 1 ? segments[0] : 0);
	value /= 10;
	display[2] = value ? segments[value % 10] : (fraction_digits >= 2 ? segments[0] : 0);
	value /= 10;
	display[3] = value ? segments[value % 10] : (fraction_digits >= 3 ? segments[0] : 0);
	display[fraction_digits] |= SEG_DP_Pin;
	return 0;
}

static inline void dis7seg_mpx(void)
{
	static uint8_t dig = 0;
	
	HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG_MSK, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_MSK, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, display[dig], GPIO_PIN_SET);
	HAL_GPIO_WritePin(DIG1_GPIO_Port, digits[dig], GPIO_PIN_SET);		
	dig = (dig + 1) & 3;
}

void TIM2_IRQHandler(void)
{
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
	dis7seg_mpx();
}

/* TIM2 init function */
static void MX_TIM2_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = HAL_RCC_GetHCLKFreq() / 400 / NDIGITS / 2 - 1;;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

