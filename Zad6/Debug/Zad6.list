
Zad6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d30  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003f4c  08003f4c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f4c  08003f4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000010  08003f64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003f64  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e740  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cc  00000000  00000000  0002e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00030850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00031740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285f3  00000000  00000000  00032538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8c0  00000000  00000000  0005ab2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f96a3  00000000  00000000  0006a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163a8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  00163ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003ec4 	.word	0x08003ec4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003ec4 	.word	0x08003ec4

080001ec <mems_init>:
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);
static void LM75_Error_Handler(char * file, int line);

uint8_t mems_init(uint8_t acc_datarate, uint8_t acc_fullscale)
{  
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b0ac      	sub	sp, #176	; 0xb0
 80001f0:	af04      	add	r7, sp, #16
 80001f2:	4603      	mov	r3, r0
 80001f4:	460a      	mov	r2, r1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71bb      	strb	r3, [r7, #6]
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80001fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000200:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000202:	2300      	movs	r3, #0
 8000204:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4618      	mov	r0, r3
 800020c:	f002 fd56 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <mems_init+0x2e>
  {
	  Error_Handler();
 8000216:	f000 fced 	bl	8000bf4 <Error_Handler>
  }
  
  MX_GPIO_Init();
 800021a:	f000 f925 	bl	8000468 <MX_GPIO_Init>
  MX_I2C3_Init();
 800021e:	f000 f8e3 	bl	80003e8 <MX_I2C3_Init>
  
  uint8_t acc_axis = 7; // all axis 
 8000222:	2307      	movs	r3, #7
 8000224:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint8_t r[4];
  
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, MEMS_ACC_ID_REG, 1, r, 1, 1000) != HAL_OK)
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	9302      	str	r3, [sp, #8]
 800022e:	2301      	movs	r3, #1
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	f107 030c 	add.w	r3, r7, #12
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	220f      	movs	r2, #15
 800023c:	213a      	movs	r1, #58	; 0x3a
 800023e:	4835      	ldr	r0, [pc, #212]	; (8000314 <mems_init+0x128>)
 8000240:	f001 fa6a 	bl	8001718 <HAL_I2C_Mem_Read>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d003      	beq.n	8000252 <mems_init+0x66>
	  LM75_Error_Handler(__FILE__, __LINE__);	
 800024a:	2146      	movs	r1, #70	; 0x46
 800024c:	4832      	ldr	r0, [pc, #200]	; (8000318 <mems_init+0x12c>)
 800024e:	f000 f93d 	bl	80004cc <LM75_Error_Handler>
  if(r[0] != MEMS_ACC_ID)
 8000252:	7b3b      	ldrb	r3, [r7, #12]
 8000254:	2b41      	cmp	r3, #65	; 0x41
 8000256:	d001      	beq.n	800025c <mems_init+0x70>
	  return 1;  
 8000258:	2301      	movs	r3, #1
 800025a:	e056      	b.n	800030a <mems_init+0x11e>
    
  if(acc_axis == MEMS_ACC_AXIS_XYZ)
 800025c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000260:	2b08      	cmp	r3, #8
 8000262:	d102      	bne.n	800026a <mems_init+0x7e>
	  acc_axis = MEMS_ACC_AXIS_X | MEMS_ACC_AXIS_Y | MEMS_ACC_AXIS_Z; // each axis is enabled individually
 8000264:	2307      	movs	r3, #7
 8000266:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(acc_datarate == 0 || acc_datarate >= 7 || acc_axis > 7 || (acc_fullscale & 0xfc) != 0 || acc_fullscale == 1)
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00e      	beq.n	800028e <mems_init+0xa2>
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2b06      	cmp	r3, #6
 8000274:	d80b      	bhi.n	800028e <mems_init+0xa2>
 8000276:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800027a:	2b07      	cmp	r3, #7
 800027c:	d807      	bhi.n	800028e <mems_init+0xa2>
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <mems_init+0xa2>
 8000288:	79bb      	ldrb	r3, [r7, #6]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d101      	bne.n	8000292 <mems_init+0xa6>
	  return 1;
 800028e:	2301      	movs	r3, #1
 8000290:	e03b      	b.n	800030a <mems_init+0x11e>
  
  r[0] = (acc_datarate << 4) | acc_axis;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	011b      	lsls	r3, r3, #4
 8000296:	b25a      	sxtb	r2, r3
 8000298:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800029c:	4313      	orrs	r3, r2
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	733b      	strb	r3, [r7, #12]
  if(HAL_I2C_Mem_Write(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80002a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2301      	movs	r3, #1
 80002b6:	2220      	movs	r2, #32
 80002b8:	213a      	movs	r1, #58	; 0x3a
 80002ba:	4816      	ldr	r0, [pc, #88]	; (8000314 <mems_init+0x128>)
 80002bc:	f001 f918 	bl	80014f0 <HAL_I2C_Mem_Write>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d003      	beq.n	80002ce <mems_init+0xe2>
	  MEMS_ACC_CTRL1_REG, 1, r, 1, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);
 80002c6:	2152      	movs	r1, #82	; 0x52
 80002c8:	4813      	ldr	r0, [pc, #76]	; (8000318 <mems_init+0x12c>)
 80002ca:	f000 f8ff 	bl	80004cc <LM75_Error_Handler>
  
  r[0] = (acc_fullscale << 4) | 4; // set fullscale, turn address autoincrement on
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	733b      	strb	r3, [r7, #12]
  if(HAL_I2C_Mem_Write(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2301      	movs	r3, #1
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	2223      	movs	r2, #35	; 0x23
 80002f2:	213a      	movs	r1, #58	; 0x3a
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <mems_init+0x128>)
 80002f6:	f001 f8fb 	bl	80014f0 <HAL_I2C_Mem_Write>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d003      	beq.n	8000308 <mems_init+0x11c>
	  MEMS_ACC_CTRL4_REG, 1, r, 1, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);
 8000300:	2157      	movs	r1, #87	; 0x57
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <mems_init+0x12c>)
 8000304:	f000 f8e2 	bl	80004cc <LM75_Error_Handler>
  
  return 0;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	37a0      	adds	r7, #160	; 0xa0
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000002c 	.word	0x2000002c
 8000318:	08003edc 	.word	0x08003edc

0800031c <mems_acc_read_x>:
	  MEMS_ACC_X_REG | I2C_MRW, 1, (uint8_t*)res, 6, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
}

int16_t mems_acc_read_x(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af04      	add	r7, sp, #16
  int16_t res;
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	9302      	str	r3, [sp, #8]
 8000328:	2302      	movs	r3, #2
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	1dbb      	adds	r3, r7, #6
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2301      	movs	r3, #1
 8000332:	22a8      	movs	r2, #168	; 0xa8
 8000334:	213a      	movs	r1, #58	; 0x3a
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <mems_acc_read_x+0x3c>)
 8000338:	f001 f9ee 	bl	8001718 <HAL_I2C_Mem_Read>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d003      	beq.n	800034a <mems_acc_read_x+0x2e>
	  MEMS_ACC_X_REG | I2C_MRW, 1, (uint8_t*)&res, 2, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 8000342:	2168      	movs	r1, #104	; 0x68
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <mems_acc_read_x+0x40>)
 8000346:	f000 f8c1 	bl	80004cc <LM75_Error_Handler>
  return res;
 800034a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000002c 	.word	0x2000002c
 800035c:	08003edc 	.word	0x08003edc

08000360 <mems_acc_read_y>:

int16_t mems_acc_read_y(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af04      	add	r7, sp, #16
  int16_t res;
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 8000366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2302      	movs	r3, #2
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2301      	movs	r3, #1
 8000376:	22aa      	movs	r2, #170	; 0xaa
 8000378:	213a      	movs	r1, #58	; 0x3a
 800037a:	4808      	ldr	r0, [pc, #32]	; (800039c <mems_acc_read_y+0x3c>)
 800037c:	f001 f9cc 	bl	8001718 <HAL_I2C_Mem_Read>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <mems_acc_read_y+0x2e>
	  MEMS_ACC_Y_REG | I2C_MRW, 1, (uint8_t*)&res, 2, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 8000386:	2171      	movs	r1, #113	; 0x71
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <mems_acc_read_y+0x40>)
 800038a:	f000 f89f 	bl	80004cc <LM75_Error_Handler>
  return res;
 800038e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000002c 	.word	0x2000002c
 80003a0:	08003edc 	.word	0x08003edc

080003a4 <mems_acc_read_z>:

int16_t mems_acc_read_z(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af04      	add	r7, sp, #16
  int16_t res;
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80003aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ae:	9302      	str	r3, [sp, #8]
 80003b0:	2302      	movs	r3, #2
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	1dbb      	adds	r3, r7, #6
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2301      	movs	r3, #1
 80003ba:	22ac      	movs	r2, #172	; 0xac
 80003bc:	213a      	movs	r1, #58	; 0x3a
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <mems_acc_read_z+0x3c>)
 80003c0:	f001 f9aa 	bl	8001718 <HAL_I2C_Mem_Read>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d003      	beq.n	80003d2 <mems_acc_read_z+0x2e>
	  MEMS_ACC_Z_REG | I2C_MRW, 1, (uint8_t*)&res, 2, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 80003ca:	217a      	movs	r1, #122	; 0x7a
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <mems_acc_read_z+0x40>)
 80003ce:	f000 f87d 	bl	80004cc <LM75_Error_Handler>
  return res;
 80003d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	08003edc 	.word	0x08003edc

080003e8 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_I2C3_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <MX_I2C3_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_I2C3_Init+0x74>)
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <MX_I2C3_Init+0x7c>)
 80003f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_I2C3_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_I2C3_Init+0x74>)
 8000400:	2201      	movs	r2, #1
 8000402:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_I2C3_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_I2C3_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_I2C3_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_I2C3_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_I2C3_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000422:	480e      	ldr	r0, [pc, #56]	; (800045c <MX_I2C3_Init+0x74>)
 8000424:	f000 ffd4 	bl	80013d0 <HAL_I2C_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_I2C3_Init+0x4a>
  {
	  Error_Handler();
 800042e:	f000 fbe1 	bl	8000bf4 <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000432:	2100      	movs	r1, #0
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <MX_I2C3_Init+0x74>)
 8000436:	f001 fd2f 	bl	8001e98 <HAL_I2CEx_ConfigAnalogFilter>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_I2C3_Init+0x5c>
  {
	  Error_Handler();
 8000440:	f000 fbd8 	bl	8000bf4 <Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000444:	2100      	movs	r1, #0
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_I2C3_Init+0x74>)
 8000448:	f001 fd71 	bl	8001f2e <HAL_I2CEx_ConfigDigitalFilter>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C3_Init+0x6e>
  {
	  Error_Handler();
 8000452:	f000 fbcf 	bl	8000bf4 <Error_Handler>
  }

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000002c 	.word	0x2000002c
 8000460:	40005c00 	.word	0x40005c00
 8000464:	10909cec 	.word	0x10909cec

08000468 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_GPIO_Init+0x5c>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000486:	f001 fe03 	bl	8002090 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin : MEMS_RDY_MAG_Pin */
  GPIO_InitStruct.Pin = MEMS_RDY_MAG_Pin;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MEMS_RDY_MAG_GPIO_Port, &GPIO_InitStruct);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	480a      	ldr	r0, [pc, #40]	; (80004c8 <MX_GPIO_Init+0x60>)
 800049e:	f000 fded 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT_AXL_Pin MEMS_INT_MAG_Pin */
  GPIO_InitStruct.Pin = MEMS_INT_AXL_Pin|MEMS_INT_MAG_Pin;
 80004a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_GPIO_Init+0x60>)
 80004b8:	f000 fde0 	bl	800107c <HAL_GPIO_Init>

}
 80004bc:	bf00      	nop
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48001800 	.word	0x48001800

080004cc <LM75_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void LM75_Error_Handler(char * file, int line)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80004d6:	e7fe      	b.n	80004d6 <LM75_Error_Handler+0xa>

080004d8 <HAL_I2C_MspInit>:
  }
  /* USER CODE END Error_Handler_Debug */ 
}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a11      	ldr	r2, [pc, #68]	; (800052c <HAL_I2C_MspInit+0x54>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d11c      	bne.n	8000524 <HAL_I2C_MspInit+0x4c>
  
    /**I2C3 GPIO Configuration    
    PG7     ------> I2C3_SCL
    PG8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = MEMS_I2C3_SCL_Pin|MEMS_I2C3_SDA_Pin;
 80004ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80004ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f0:	2312      	movs	r3, #18
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80004fc:	2304      	movs	r3, #4
 80004fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4619      	mov	r1, r3
 8000506:	480a      	ldr	r0, [pc, #40]	; (8000530 <HAL_I2C_MspInit+0x58>)
 8000508:	f000 fdb8 	bl	800107c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_I2C_MspInit+0x5c>)
 800050e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_I2C_MspInit+0x5c>)
 8000512:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000516:	6593      	str	r3, [r2, #88]	; 0x58
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_I2C_MspInit+0x5c>)
 800051a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40005c00 	.word	0x40005c00
 8000530:	48001800 	.word	0x48001800
 8000534:	40021000 	.word	0x40021000

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fc16 	bl	8000d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f82d 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000546:	f000 f87d 	bl	8000644 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Joy_Init();
 800054a:	f000 f8c5 	bl	80006d8 <Joy_Init>
  Dis7Seg_Init();
 800054e:	f000 f8ef 	bl	8000730 <Dis7Seg_Init>
  (void)mems_init(MEMS_ACC_DATARATE_10HZ, MEMS_ACC_FULLSCALE_2G);
 8000552:	2100      	movs	r1, #0
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff fe49 	bl	80001ec <mems_init>

  __HAL_RCC_TIM2_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0x60>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <main+0x60>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x60>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <main+0x60>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <main+0x60>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <main+0x60>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  MX_TIM2_Init();
 800058a:	f000 f85b 	bl	8000644 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <main+0x64>)
 8000590:	f003 f889 	bl	80036a6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x5c>
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	20000080 	.word	0x20000080

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	; 0x58
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2244      	movs	r2, #68	; 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fc80 	bl	8003eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c6:	f001 fd0d 	bl	8001fe4 <HAL_PWREx_ControlVoltageScaling>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d0:	f000 fb10 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e8:	2301      	movs	r3, #1
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005f0:	2314      	movs	r3, #20
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fd53 	bl	80020b0 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000610:	f000 faf0 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f959 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000638:	f000 fadc 	bl	8000bf4 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	; 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_TIM2_Init+0x90>)
 8000664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000668:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_TIM2_Init+0x90>)
 800066c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_TIM2_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_TIM2_Init+0x90>)
 800067a:	2201      	movs	r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_TIM2_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
//  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_TIM2_Init+0x90>)
 8000686:	f002 ffe3 	bl	8003650 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
 8000690:	f000 fab0 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_TIM2_Init+0x90>)
 80006a2:	f003 f923 	bl	80038ec <HAL_TIM_ConfigClockSource>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80006ac:	f000 faa2 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_TIM2_Init+0x90>)
 80006be:	f003 fb6d 	bl	8003d9c <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80006c8:	f000 fa94 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000080 	.word	0x20000080

080006d8 <Joy_Init>:

/* USER CODE BEGIN 4 */
static void Joy_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef joyInitStruct = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <Joy_Init+0x50>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <Joy_Init+0x50>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <Joy_Init+0x50>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0310 	and.w	r3, r3, #16
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

	joyInitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
	joyInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
	joyInitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
	joyInitStruct.Pin = JOY_UP_PIN |
 8000710:	f248 030f 	movw	r3, #32783	; 0x800f
 8000714:	607b      	str	r3, [r7, #4]
					 	JOY_DOWN_PIN |
						JOY_LEFT_PIN |
						JOY_RIGHT_PIN |
						JOY_CENTER_PIN;

	HAL_GPIO_Init(GPIOE, &joyInitStruct);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <Joy_Init+0x54>)
 800071c:	f000 fcae 	bl	800107c <HAL_GPIO_Init>
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48001000 	.word	0x48001000

08000730 <Dis7Seg_Init>:

void Dis7Seg_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef initStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <Dis7Seg_Init+0x80>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <Dis7Seg_Init+0x80>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <Dis7Seg_Init+0x80>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <Dis7Seg_Init+0x80>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <Dis7Seg_Init+0x80>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <Dis7Seg_Init+0x80>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 8000776:	f001 fc8b 	bl	8002090 <HAL_PWREx_EnableVddIO2>

	initStruct.Pin = DIG1_PIN | DIG2_PIN | DIG3_PIN | DIG4_PIN;
 800077a:	233c      	movs	r3, #60	; 0x3c
 800077c:	60fb      	str	r3, [r7, #12]
	initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
	initStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
	initStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIG_PORT, &initStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <Dis7Seg_Init+0x84>)
 8000792:	f000 fc73 	bl	800107c <HAL_GPIO_Init>

	initStruct.Pin = SEG_A_PIN | SEG_B_PIN | SEG_C_PIN |
 8000796:	f240 237f 	movw	r3, #639	; 0x27f
 800079a:	60fb      	str	r3, [r7, #12]
				   	 SEG_D_PIN | SEG_E_PIN | SEG_F_PIN |
					 SEG_G_PIN | SEG_DP_PIN;
	HAL_GPIO_Init(SEG_PORT, &initStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <Dis7Seg_Init+0x88>)
 80007a4:	f000 fc6a 	bl	800107c <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400
 80007b8:	48001800 	.word	0x48001800

080007bc <Dis7seg_display>:

void Dis7seg_display(uint8_t dotSecondPlace)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	static uint8_t dig = 0;

	HAL_GPIO_WritePin(DIG_PORT, DIG_MASK, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	213c      	movs	r1, #60	; 0x3c
 80007ca:	4822      	ldr	r0, [pc, #136]	; (8000854 <Dis7seg_display+0x98>)
 80007cc:	f000 fde8 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_MASK, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f240 217f 	movw	r1, #639	; 0x27f
 80007d6:	4820      	ldr	r0, [pc, #128]	; (8000858 <Dis7seg_display+0x9c>)
 80007d8:	f000 fde2 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, display[dig], GPIO_PIN_SET);
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <Dis7seg_display+0xa0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <Dis7seg_display+0xa4>)
 80007e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <Dis7seg_display+0x9c>)
 80007ee:	f000 fdd7 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG_PORT, digit[dig], GPIO_PIN_SET);
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <Dis7seg_display+0xa0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <Dis7seg_display+0xa8>)
 80007fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <Dis7seg_display+0x98>)
 8000804:	f000 fdcc 	bl	80013a0 <HAL_GPIO_WritePin>

	if (dotSecondPlace && dig == 1)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <Dis7seg_display+0x68>
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <Dis7seg_display+0xa0>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d106      	bne.n	8000824 <Dis7seg_display+0x68>
	{
		HAL_GPIO_WritePin(SEG_PORT, SEG_DP_PIN, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	480e      	ldr	r0, [pc, #56]	; (8000858 <Dis7seg_display+0x9c>)
 800081e:	f000 fdbf 	bl	80013a0 <HAL_GPIO_WritePin>
 8000822:	e009      	b.n	8000838 <Dis7seg_display+0x7c>
	}
	else if (dig == 2)
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <Dis7seg_display+0xa0>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d105      	bne.n	8000838 <Dis7seg_display+0x7c>
	{
		HAL_GPIO_WritePin(SEG_PORT, SEG_DP_PIN, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <Dis7seg_display+0x9c>)
 8000834:	f000 fdb4 	bl	80013a0 <HAL_GPIO_WritePin>
	}

	dig = (dig + 1) & 3;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <Dis7seg_display+0xa0>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <Dis7seg_display+0xa0>)
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	48000400 	.word	0x48000400
 8000858:	48001800 	.word	0x48001800
 800085c:	200000c4 	.word	0x200000c4
 8000860:	200000bc 	.word	0x200000bc
 8000864:	08003f04 	.word	0x08003f04

08000868 <Dis7Seg_SetAxisValue>:

void Dis7Seg_SetAxisValue(const selectedAxisType * const selectedAxis, uint8_t * dotSecondPlace)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
	float axisValue = 0;
 8000872:	f04f 0300 	mov.w	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

	switch (*selectedAxis) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d002      	beq.n	8000886 <Dis7Seg_SetAxisValue+0x1e>
 8000880:	2b0b      	cmp	r3, #11
 8000882:	d00a      	beq.n	800089a <Dis7Seg_SetAxisValue+0x32>
 8000884:	e013      	b.n	80008ae <Dis7Seg_SetAxisValue+0x46>
		case X:
			axisValue = mems_acc_read_x();
 8000886:	f7ff fd49 	bl	800031c <mems_acc_read_x>
 800088a:	4603      	mov	r3, r0
 800088c:	ee07 3a90 	vmov	s15, r3
 8000890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000894:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8000898:	e013      	b.n	80008c2 <Dis7Seg_SetAxisValue+0x5a>
		case Y:
			axisValue = mems_acc_read_y();
 800089a:	f7ff fd61 	bl	8000360 <mems_acc_read_y>
 800089e:	4603      	mov	r3, r0
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80008ac:	e009      	b.n	80008c2 <Dis7Seg_SetAxisValue+0x5a>
		case Z:
		default:
			axisValue = mems_acc_read_z();
 80008ae:	f7ff fd79 	bl	80003a4 <mems_acc_read_z>
 80008b2:	4603      	mov	r3, r0
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008bc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80008c0:	bf00      	nop
	}

	axisValue *= 2.0F / MEMS_ACC_MAXVAL;
 80008c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80008c6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8000ad8 <Dis7Seg_SetAxisValue+0x270>
 80008ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ce:	edc7 7a05 	vstr	s15, [r7, #20]

	if (axisValue < 0)
 80008d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80008d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008de:	d505      	bpl.n	80008ec <Dis7Seg_SetAxisValue+0x84>
	{
		axisValue *= -1.0F;
 80008e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008e4:	eef1 7a67 	vneg.f32	s15, s15
 80008e8:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (axisValue / 10.0F < 1.0F)
 80008ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80008f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80008f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	d57b      	bpl.n	80009fe <Dis7Seg_SetAxisValue+0x196>
	{
		display[2] = segments[(uint8_t)(axisValue / 1.0F)];
 8000906:	edd7 7a05 	vldr	s15, [r7, #20]
 800090a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000912:	793b      	ldrb	r3, [r7, #4]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	4b70      	ldr	r3, [pc, #448]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 800091a:	5c9b      	ldrb	r3, [r3, r2]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b70      	ldr	r3, [pc, #448]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 8000920:	809a      	strh	r2, [r3, #4]
		axisValue -= (uint8_t)(axisValue / 1.0F);
 8000922:	edd7 7a05 	vldr	s15, [r7, #20]
 8000926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092a:	edc7 7a01 	vstr	s15, [r7, #4]
 800092e:	793b      	ldrb	r3, [r7, #4]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800093a:	ed97 7a05 	vldr	s14, [r7, #20]
 800093e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000942:	edc7 7a05 	vstr	s15, [r7, #20]
		display[1] = segments[(uint8_t)(axisValue / 0.1F)];
 8000946:	ed97 7a05 	vldr	s14, [r7, #20]
 800094a:	eddf 6a66 	vldr	s13, [pc, #408]	; 8000ae4 <Dis7Seg_SetAxisValue+0x27c>
 800094e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000956:	edc7 7a01 	vstr	s15, [r7, #4]
 800095a:	793b      	ldrb	r3, [r7, #4]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	4b5e      	ldr	r3, [pc, #376]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 8000962:	5c9b      	ldrb	r3, [r3, r2]
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 8000968:	805a      	strh	r2, [r3, #2]
		axisValue -= ((uint8_t)(axisValue / 0.1F) * 0.1F);
 800096a:	ed97 7a05 	vldr	s14, [r7, #20]
 800096e:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8000ae4 <Dis7Seg_SetAxisValue+0x27c>
 8000972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097a:	edc7 7a01 	vstr	s15, [r7, #4]
 800097e:	793b      	ldrb	r3, [r7, #4]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	ee07 3a90 	vmov	s15, r3
 8000986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000ae4 <Dis7Seg_SetAxisValue+0x27c>
 800098e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000992:	ed97 7a05 	vldr	s14, [r7, #20]
 8000996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800099a:	edc7 7a05 	vstr	s15, [r7, #20]
		display[0] = segments[(uint8_t)(axisValue / 0.01F)];
 800099e:	ed97 7a05 	vldr	s14, [r7, #20]
 80009a2:	eddf 6a51 	vldr	s13, [pc, #324]	; 8000ae8 <Dis7Seg_SetAxisValue+0x280>
 80009a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80009b2:	793b      	ldrb	r3, [r7, #4]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 80009ba:	5c9b      	ldrb	r3, [r3, r2]
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 80009c0:	801a      	strh	r2, [r3, #0]
		axisValue -= ((uint8_t)(axisValue / 0.01F) * 0.01F);
 80009c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80009c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000ae8 <Dis7Seg_SetAxisValue+0x280>
 80009ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80009d6:	793b      	ldrb	r3, [r7, #4]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000ae8 <Dis7Seg_SetAxisValue+0x280>
 80009e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80009ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f2:	edc7 7a05 	vstr	s15, [r7, #20]
		*dotSecondPlace = TRUE;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e060      	b.n	8000ac0 <Dis7Seg_SetAxisValue+0x258>
	}
	else
	{
		display[2] = segments[(uint8_t)(axisValue / 10.0F)];
 80009fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a02:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a0e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a12:	793b      	ldrb	r3, [r7, #4]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 8000a1a:	5c9b      	ldrb	r3, [r3, r2]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 8000a20:	809a      	strh	r2, [r3, #4]
		axisValue -= ((uint8_t)(axisValue / 10.0F * 10.0F));
 8000a22:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a26:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a3e:	793b      	ldrb	r3, [r7, #4]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a52:	edc7 7a05 	vstr	s15, [r7, #20]
		display[1] = segments[(uint8_t)(axisValue / 1.0F)];
 8000a56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a62:	793b      	ldrb	r3, [r7, #4]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 8000a6a:	5c9b      	ldrb	r3, [r3, r2]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 8000a70:	805a      	strh	r2, [r3, #2]
		axisValue -= (uint8_t)(axisValue / 1.0F);
 8000a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a7e:	793b      	ldrb	r3, [r7, #4]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a92:	edc7 7a05 	vstr	s15, [r7, #20]
		display[0] = segments[(uint8_t)(axisValue / 0.1F)];
 8000a96:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a9a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000ae4 <Dis7Seg_SetAxisValue+0x27c>
 8000a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aaa:	793b      	ldrb	r3, [r7, #4]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 8000ab2:	5c9b      	ldrb	r3, [r3, r2]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 8000ab8:	801a      	strh	r2, [r3, #0]
		*dotSecondPlace = FALSE;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}

	display[3] = segments[*selectedAxis];
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <Dis7Seg_SetAxisValue+0x274>)
 8000ac8:	5c9b      	ldrb	r3, [r3, r2]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <Dis7Seg_SetAxisValue+0x278>)
 8000ace:	80da      	strh	r2, [r3, #6]
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	38800100 	.word	0x38800100
 8000adc:	08003ef4 	.word	0x08003ef4
 8000ae0:	200000bc 	.word	0x200000bc
 8000ae4:	3dcccccd 	.word	0x3dcccccd
 8000ae8:	3c23d70a 	.word	0x3c23d70a

08000aec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	static selectedAxisType selectedAxis = Z;
	uint8_t * dotSecondPlace = FALSE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]

	Dis7Seg_SetAxisValue(&selectedAxis, dotSecondPlace);
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	481a      	ldr	r0, [pc, #104]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000afc:	f7ff feb4 	bl	8000868 <Dis7Seg_SetAxisValue>

	Dis7seg_display(*dotSecondPlace);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe59 	bl	80007bc <Dis7seg_display>

	if (DetectFallingEdge(JOY_PORT, JOY_UP_PIN))
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	4816      	ldr	r0, [pc, #88]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b0e:	f000 f82d 	bl	8000b6c <DetectFallingEdge>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00c      	beq.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		if (++selectedAxis > Z)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d902      	bls.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			selectedAxis = X;
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b2e:	220a      	movs	r2, #10
 8000b30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (DetectFallingEdge(JOY_PORT, JOY_DOWN_PIN))
 8000b32:	2104      	movs	r1, #4
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b36:	f000 f819 	bl	8000b6c <DetectFallingEdge>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00c      	beq.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		if (--selectedAxis < X)
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d802      	bhi.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			selectedAxis = Z;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000
 8000b68:	48001000 	.word	0x48001000

08000b6c <DetectFallingEdge>:

uint8_t DetectFallingEdge(GPIO_TypeDef * port, uint16_t pin)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
	static GPIO_TypeDef * prevPort;
	static uint16_t prevPin;
	static uint8_t buttonPressed = 0U;
	uint8_t buttonStatus = (~port->IDR & pin ? 1 : 0);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	73bb      	strb	r3, [r7, #14]
	uint8_t retVal_u8 = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]

	if (buttonStatus)
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d009      	beq.n	8000bac <DetectFallingEdge+0x40>
	{
		buttonPressed = TRUE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <DetectFallingEdge+0x7c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
		prevPort = port;
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <DetectFallingEdge+0x80>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6013      	str	r3, [r2, #0]
		prevPin = pin;
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <DetectFallingEdge+0x84>)
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	8013      	strh	r3, [r2, #0]
 8000baa:	e016      	b.n	8000bda <DetectFallingEdge+0x6e>
	}
	else if (!buttonStatus && buttonPressed && prevPort == port && prevPin == pin)
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d113      	bne.n	8000bda <DetectFallingEdge+0x6e>
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <DetectFallingEdge+0x7c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00f      	beq.n	8000bda <DetectFallingEdge+0x6e>
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <DetectFallingEdge+0x80>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d10a      	bne.n	8000bda <DetectFallingEdge+0x6e>
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <DetectFallingEdge+0x84>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	887a      	ldrh	r2, [r7, #2]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d105      	bne.n	8000bda <DetectFallingEdge+0x6e>
	{
		buttonPressed = FALSE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <DetectFallingEdge+0x7c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		retVal_u8++;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
	}

	return retVal_u8;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200000c5 	.word	0x200000c5
 8000bec:	200000c8 	.word	0x200000c8
 8000bf0:	200000cc 	.word	0x200000cc

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d113      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201c      	movs	r0, #28
 8000c78:	f000 f9c9 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c7c:	201c      	movs	r0, #28
 8000c7e:	f000 f9e2 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f89c 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM2_IRQHandler+0x10>)
 8000cea:	f002 fcf7 	bl	80036dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  
  /* USER CODE END TIM2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000080 	.word	0x20000080

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f003 f88f 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4e:	f7ff fbf3 	bl	8000538 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d60:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 8000d64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d68:	200000d4 	.word	0x200000d4

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>

08000d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f93d 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f80e 	bl	8000da0 <HAL_InitTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	e001      	b.n	8000d94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d90:	f7ff ff36 	bl	8000c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d023      	beq.n	8000dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_InitTick+0x70>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f949 	bl	8001062 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10f      	bne.n	8000df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d809      	bhi.n	8000df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f913 	bl	800100e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_InitTick+0x74>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e007      	b.n	8000e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e004      	b.n	8000e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e001      	b.n	8000e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	200000d0 	.word	0x200000d0

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200000d0 	.word	0x200000d0

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff29 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff3e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e166      	b.n	800135a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8158 	beq.w	8001354 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <HAL_GPIO_Init+0x40>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b03      	cmp	r3, #3
 8001128:	d017      	beq.n	800115a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d123      	bne.n	80011ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	6939      	ldr	r1, [r7, #16]
 80011aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0203 	and.w	r2, r3, #3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80b2 	beq.w	8001354 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	4b61      	ldr	r3, [pc, #388]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	4a60      	ldr	r2, [pc, #384]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6613      	str	r3, [r2, #96]	; 0x60
 80011fc:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001208:	4a5c      	ldr	r2, [pc, #368]	; (800137c <HAL_GPIO_Init+0x300>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001232:	d02b      	beq.n	800128c <HAL_GPIO_Init+0x210>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d025      	beq.n	8001288 <HAL_GPIO_Init+0x20c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d01f      	beq.n	8001284 <HAL_GPIO_Init+0x208>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_GPIO_Init+0x204>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x310>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x200>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x314>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1fc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1f8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x31c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1f4>
 800126c:	2307      	movs	r3, #7
 800126e:	e00e      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001270:	2308      	movs	r3, #8
 8001272:	e00c      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001274:	2306      	movs	r3, #6
 8001276:	e00a      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001278:	2305      	movs	r3, #5
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0x212>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x212>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x212>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129e:	4937      	ldr	r1, [pc, #220]	; (800137c <HAL_GPIO_Init+0x300>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_GPIO_Init+0x320>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d0:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_GPIO_Init+0x320>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_GPIO_Init+0x320>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_GPIO_Init+0x320>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_GPIO_Init+0x320>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_GPIO_Init+0x320>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_GPIO_Init+0x320>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_GPIO_Init+0x320>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae91 	bne.w	800108c <HAL_GPIO_Init+0x10>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48001000 	.word	0x48001000
 8001390:	48001400 	.word	0x48001400
 8001394:	48001800 	.word	0x48001800
 8001398:	48001c00 	.word	0x48001c00
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e081      	b.n	80014e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff f86e 	bl	80004d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001420:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001430:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e006      	b.n	8001458 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001456:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d104      	bne.n	800146a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69d9      	ldr	r1, [r3, #28]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	460b      	mov	r3, r1
 8001504:	813b      	strh	r3, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b20      	cmp	r3, #32
 8001514:	f040 80f9 	bne.w	800170a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_I2C_Mem_Write+0x34>
 800151e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0ed      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_I2C_Mem_Write+0x4e>
 800153a:	2302      	movs	r3, #2
 800153c:	e0e6      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001546:	f7ff fc7b 	bl	8000e40 <HAL_GetTick>
 800154a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2319      	movs	r3, #25
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fac3 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0d1      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2221      	movs	r2, #33	; 0x21
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001590:	88f8      	ldrh	r0, [r7, #6]
 8001592:	893a      	ldrh	r2, [r7, #8]
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4603      	mov	r3, r0
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f9d3 	bl	800194c <I2C_RequestMemoryWrite>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0a9      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2bff      	cmp	r3, #255	; 0xff
 80015c0:	d90e      	bls.n	80015e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	22ff      	movs	r2, #255	; 0xff
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fc2b 	bl	8001e34 <I2C_TransferConfig>
 80015de:	e00f      	b.n	8001600 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	8979      	ldrh	r1, [r7, #10]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fc1a 	bl	8001e34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 faad 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e07b      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d034      	beq.n	80016b8 <HAL_I2C_Mem_Write+0x1c8>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001652:	2b00      	cmp	r3, #0
 8001654:	d130      	bne.n	80016b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	2200      	movs	r2, #0
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fa3f 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e04d      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29b      	uxth	r3, r3
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d90e      	bls.n	8001698 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	22ff      	movs	r2, #255	; 0xff
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	b2da      	uxtb	r2, r3
 8001686:	8979      	ldrh	r1, [r7, #10]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fbcf 	bl	8001e34 <I2C_TransferConfig>
 8001696:	e00f      	b.n	80016b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fbbe 	bl	8001e34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d19e      	bne.n	8001600 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa8c 	bl	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e01a      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2220      	movs	r2, #32
 80016dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_I2C_Mem_Write+0x224>)
 80016ea:	400b      	ands	r3, r1
 80016ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	fe00e800 	.word	0xfe00e800

08001718 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b20      	cmp	r3, #32
 800173c:	f040 80fd 	bne.w	800193a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_I2C_Mem_Read+0x34>
 8001746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001752:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0f1      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_I2C_Mem_Read+0x4e>
 8001762:	2302      	movs	r3, #2
 8001764:	e0ea      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800176e:	f7ff fb67 	bl	8000e40 <HAL_GetTick>
 8001772:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2319      	movs	r3, #25
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f9af 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0d5      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2222      	movs	r2, #34	; 0x22
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017b8:	88f8      	ldrh	r0, [r7, #6]
 80017ba:	893a      	ldrh	r2, [r7, #8]
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4603      	mov	r3, r0
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f913 	bl	80019f4 <I2C_RequestMemoryRead>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0ad      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d90e      	bls.n	8001808 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	22ff      	movs	r2, #255	; 0xff
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	8979      	ldrh	r1, [r7, #10]
 80017f8:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_I2C_Mem_Read+0x22c>)
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fb17 	bl	8001e34 <I2C_TransferConfig>
 8001806:	e00f      	b.n	8001828 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	b2da      	uxtb	r2, r3
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_I2C_Mem_Read+0x22c>)
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fb06 	bl	8001e34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f956 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07c      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d034      	beq.n	80018e8 <HAL_I2C_Mem_Read+0x1d0>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	2b00      	cmp	r3, #0
 8001884:	d130      	bne.n	80018e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	2200      	movs	r2, #0
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f927 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e04d      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d90e      	bls.n	80018c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	8979      	ldrh	r1, [r7, #10]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fab7 	bl	8001e34 <I2C_TransferConfig>
 80018c6:	e00f      	b.n	80018e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 faa6 	bl	8001e34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d19a      	bne.n	8001828 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f974 	bl	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e01a      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2220      	movs	r2, #32
 800190c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_I2C_Mem_Read+0x230>)
 800191a:	400b      	ands	r3, r1
 800191c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800193a:	2302      	movs	r3, #2
  }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	80002400 	.word	0x80002400
 8001948:	fe00e800 	.word	0xfe00e800

0800194c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	817b      	strh	r3, [r7, #10]
 800195e:	460b      	mov	r3, r1
 8001960:	813b      	strh	r3, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	8979      	ldrh	r1, [r7, #10]
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <I2C_RequestMemoryWrite+0xa4>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fa5d 	bl	8001e34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	69b9      	ldr	r1, [r7, #24]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f8f0 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e02c      	b.n	80019e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001994:	893b      	ldrh	r3, [r7, #8]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
 800199e:	e015      	b.n	80019cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f8d6 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e012      	b.n	80019e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019c2:	893b      	ldrh	r3, [r7, #8]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 f884 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	80002000 	.word	0x80002000

080019f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	817b      	strh	r3, [r7, #10]
 8001a06:	460b      	mov	r3, r1
 8001a08:	813b      	strh	r3, [r7, #8]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	8979      	ldrh	r1, [r7, #10]
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <I2C_RequestMemoryRead+0xa4>)
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fa0a 	bl	8001e34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f89d 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e02c      	b.n	8001a8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3a:	893b      	ldrh	r3, [r7, #8]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
 8001a44:	e015      	b.n	8001a72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a46:	893b      	ldrh	r3, [r7, #8]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f883 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e012      	b.n	8001a8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a68:	893b      	ldrh	r3, [r7, #8]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f831 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	80002000 	.word	0x80002000

08001a9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d103      	bne.n	8001aba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d007      	beq.n	8001ad8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	619a      	str	r2, [r3, #24]
  }
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	e022      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d01e      	beq.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afe:	f7ff f99f 	bl	8000e40 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d302      	bcc.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d113      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f043 0220 	orr.w	r2, r3, #32
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e00f      	b.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d0cd      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b70:	e02c      	b.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f870 	bl	8001c5c <I2C_IsErrorOccurred>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e02a      	b.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d01e      	beq.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff f957 	bl	8000e40 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d113      	bne.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e007      	b.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d1cb      	bne.n	8001b72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf0:	e028      	b.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f830 	bl	8001c5c <I2C_IsErrorOccurred>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e026      	b.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff f91b 	bl	8000e40 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d113      	bne.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e007      	b.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d1cf      	bne.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d075      	beq.n	8001d74 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c90:	e056      	b.n	8001d40 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d052      	beq.n	8001d40 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c9a:	f7ff f8d1 	bl	8000e40 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d302      	bcc.n	8001cb0 <I2C_IsErrorOccurred+0x54>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d147      	bne.n	8001d40 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd2:	d12e      	bne.n	8001d32 <I2C_IsErrorOccurred+0xd6>
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cda:	d02a      	beq.n	8001d32 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001cdc:	7cfb      	ldrb	r3, [r7, #19]
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d027      	beq.n	8001d32 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cf2:	f7ff f8a5 	bl	8000e40 <HAL_GetTick>
 8001cf6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf8:	e01b      	b.n	8001d32 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cfa:	f7ff f8a1 	bl	8000e40 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b19      	cmp	r3, #25
 8001d06:	d914      	bls.n	8001d32 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d1dc      	bne.n	8001cfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d003      	beq.n	8001d56 <I2C_IsErrorOccurred+0xfa>
 8001d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d09d      	beq.n	8001c92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01c      	beq.n	8001e24 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff fe56 	bl	8001a9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <I2C_IsErrorOccurred+0x1d4>)
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	4613      	mov	r3, r2
 8001e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	0d5b      	lsrs	r3, r3, #21
 8001e6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <I2C_TransferConfig+0x60>)
 8001e74:	430b      	orrs	r3, r1
 8001e76:	43db      	mvns	r3, r3
 8001e78:	ea02 0103 	and.w	r1, r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	03ff63ff 	.word	0x03ff63ff

08001e98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d138      	bne.n	8001f20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e032      	b.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d139      	bne.n	8001fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e033      	b.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2224      	movs	r2, #36	; 0x24
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff2:	d130      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002000:	d038      	beq.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2232      	movs	r2, #50	; 0x32
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0c9b      	lsrs	r3, r3, #18
 8002024:	3301      	adds	r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002028:	e002      	b.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3b01      	subs	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203c:	d102      	bne.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f2      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d110      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e00f      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d007      	beq.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206c:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40007000 	.word	0x40007000
 8002088:	20000004 	.word	0x20000004
 800208c:	431bde83 	.word	0x431bde83

08002090 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6053      	str	r3, [r2, #4]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	f000 bc08 	b.w	80028d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c4:	4b96      	ldr	r3, [pc, #600]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ce:	4b94      	ldr	r3, [pc, #592]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80e4 	beq.w	80022ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_RCC_OscConfig+0x4c>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	f040 808b 	bne.w	800220a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	f040 8087 	bne.w	800220a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fc:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x64>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e3df      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_RCC_OscConfig+0x7e>
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212c:	e005      	b.n	800213a <HAL_RCC_OscConfig+0x8a>
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213a:	4293      	cmp	r3, r2
 800213c:	d223      	bcs.n	8002186 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fd5a 	bl	8002bfc <RCC_SetFlashLatencyFromMSIRange>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e3c0      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a72      	ldr	r2, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	496d      	ldr	r1, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	4968      	ldr	r1, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	e025      	b.n	80021d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002186:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4960      	ldr	r1, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	495b      	ldr	r1, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fd1a 	bl	8002bfc <RCC_SetFlashLatencyFromMSIRange>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e380      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d2:	f000 fc87 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	4950      	ldr	r1, [pc, #320]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <HAL_RCC_OscConfig+0x278>)
 80021f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_OscConfig+0x27c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fdd2 	bl	8000da0 <HAL_InitTick>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d052      	beq.n	80022ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	e364      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d032      	beq.n	8002278 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a42      	ldr	r2, [pc, #264]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221e:	f7fe fe0f 	bl	8000e40 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7fe fe0b 	bl	8000e40 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e34d      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002238:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a35      	ldr	r2, [pc, #212]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4930      	ldr	r1, [pc, #192]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	492b      	ldr	r1, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
 8002276:	e01a      	b.n	80022ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002284:	f7fe fddc 	bl	8000e40 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228c:	f7fe fdd8 	bl	8000e40 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e31a      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1dc>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d073      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d005      	beq.n	80022cc <HAL_RCC_OscConfig+0x21c>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d10e      	bne.n	80022e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d063      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d15f      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e2f7      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x24c>
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e025      	b.n	8002348 <HAL_RCC_OscConfig+0x298>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d114      	bne.n	8002330 <HAL_RCC_OscConfig+0x280>
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a02      	ldr	r2, [pc, #8]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e013      	b.n	8002348 <HAL_RCC_OscConfig+0x298>
 8002320:	40021000 	.word	0x40021000
 8002324:	08003f0c 	.word	0x08003f0c
 8002328:	20000004 	.word	0x20000004
 800232c:	20000008 	.word	0x20000008
 8002330:	4ba0      	ldr	r3, [pc, #640]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a9f      	ldr	r2, [pc, #636]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b9d      	ldr	r3, [pc, #628]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a9c      	ldr	r2, [pc, #624]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fd76 	bl	8000e40 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fd72 	bl	8000e40 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2b4      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x2a8>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fd62 	bl	8000e40 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd5e 	bl	8000e40 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e2a0      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d0>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d060      	beq.n	8002470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x310>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d119      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d116      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	4b7c      	ldr	r3, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x328>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e27d      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	4973      	ldr	r1, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	e040      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d023      	beq.n	800243e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f6:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fd1d 	bl	8000e40 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7fe fd19 	bl	8000e40 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e25b      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	495f      	ldr	r1, [pc, #380]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e018      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fcf9 	bl	8000e40 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fcf5 	bl	8000e40 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e237      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002484:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fcd4 	bl	8000e40 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fcd0 	bl	8000e40 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e212      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x3ec>
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c4:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fcb7 	bl	8000e40 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7fe fcb3 	bl	8000e40 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1f5      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d118      	bne.n	800256e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002548:	f7fe fc7a 	bl	8000e40 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002550:	f7fe fc76 	bl	8000e40 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1b8      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x4d8>
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002586:	e029      	b.n	80025dc <HAL_RCC_OscConfig+0x52c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d115      	bne.n	80025bc <HAL_RCC_OscConfig+0x50c>
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x52c>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	4b9d      	ldr	r3, [pc, #628]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a9c      	ldr	r2, [pc, #624]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a98      	ldr	r2, [pc, #608]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d016      	beq.n	8002612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fc2c 	bl	8000e40 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7fe fc28 	bl	8000e40 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e168      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b8c      	ldr	r3, [pc, #560]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ed      	beq.n	80025ec <HAL_RCC_OscConfig+0x53c>
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fc15 	bl	8000e40 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fc11 	bl	8000e40 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e151      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002630:	4b80      	ldr	r3, [pc, #512]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ed      	bne.n	800261a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002664:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266a:	4a72      	ldr	r2, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fbe4 	bl	8000e40 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7fe fbe0 	bl	8000e40 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e122      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	4b69      	ldr	r3, [pc, #420]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x5cc>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a4:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fbc7 	bl	8000e40 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b6:	f7fe fbc3 	bl	8000e40 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e105      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80f9 	beq.w	80028d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f040 80cf 	bne.w	8002888 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ea:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d12c      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	3b01      	subs	r3, #1
 800270a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d123      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d11b      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d113      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d109      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d071      	beq.n	800283c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d068      	beq.n	8002830 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0ac      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002786:	f7fe fb5b 	bl	8000e40 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fb57 	bl	8000e40 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e099      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x788>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027bc:	3a01      	subs	r2, #1
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027c6:	0212      	lsls	r2, r2, #8
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027ce:	0852      	lsrs	r2, r2, #1
 80027d0:	3a01      	subs	r2, #1
 80027d2:	0552      	lsls	r2, r2, #21
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027da:	0852      	lsrs	r2, r2, #1
 80027dc:	3a01      	subs	r2, #1
 80027de:	0652      	lsls	r2, r2, #25
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027e6:	06d2      	lsls	r2, r2, #27
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4912      	ldr	r1, [pc, #72]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002808:	f7fe fb1a 	bl	8000e40 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fb16 	bl	8000e40 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e058      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282e:	e050      	b.n	80028d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e04f      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
 8002834:	40021000 	.word	0x40021000
 8002838:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d144      	bne.n	80028d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002860:	f7fe faee 	bl	8000e40 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe faea 	bl	8000e40 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e02c      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x7b8>
 8002886:	e024      	b.n	80028d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d01f      	beq.n	80028ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 8002894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fad1 	bl	8000e40 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe facd 	bl	8000e40 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4905      	ldr	r1, [pc, #20]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x830>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
 80028cc:	e001      	b.n	80028d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	feeefffc 	.word	0xfeeefffc

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0e7      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4970      	ldr	r1, [pc, #448]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b6e      	ldr	r3, [pc, #440]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cf      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d010      	beq.n	8002956 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002940:	429a      	cmp	r2, r3
 8002942:	d908      	bls.n	8002956 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4960      	ldr	r1, [pc, #384]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04c      	beq.n	80029fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d121      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0a6      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e09a      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299a:	4b4e      	ldr	r3, [pc, #312]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e08e      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e086      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4943      	ldr	r1, [pc, #268]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fa38 	bl	8000e40 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fa34 	bl	8000e40 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e06e      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d208      	bcs.n	8002a2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	492b      	ldr	r1, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d210      	bcs.n	8002a5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 0207 	bic.w	r2, r3, #7
 8002a40:	4923      	ldr	r1, [pc, #140]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a98:	f000 f824 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	490b      	ldr	r1, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1f8>)
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1fc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe f96f 	bl	8000da0 <HAL_InitTick>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08003f0c 	.word	0x08003f0c
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	20000008 	.word	0x20000008

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d11e      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e005      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b40:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e004      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d134      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d003      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0xac>
 8002b88:	e005      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b8c:	617b      	str	r3, [r7, #20]
      break;
 8002b8e:	e005      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b92:	617b      	str	r3, [r7, #20]
      break;
 8002b94:	e002      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	617b      	str	r3, [r7, #20]
      break;
 8002b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	0e5b      	lsrs	r3, r3, #25
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08003f1c 	.word	0x08003f1c
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	007a1200 	.word	0x007a1200

08002bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c14:	f7ff f9d8 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002c18:	6178      	str	r0, [r7, #20]
 8002c1a:	e014      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6593      	str	r3, [r2, #88]	; 0x58
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff f9c8 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c4c:	d10b      	bne.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d919      	bls.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2ba0      	cmp	r3, #160	; 0xa0
 8002c58:	d902      	bls.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e013      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e010      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d902      	bls.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e00a      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d102      	bne.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c78:	2302      	movs	r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e004      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b70      	cmp	r3, #112	; 0x70
 8002c82:	d101      	bne.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c84:	2301      	movs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 0207 	bic.w	r2, r3, #7
 8002c90:	4909      	ldr	r1, [pc, #36]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d041      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ce0:	d02a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ce6:	d824      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cec:	d008      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf2:	d81e      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfc:	d010      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d00:	4b86      	ldr	r3, [pc, #536]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a85      	ldr	r2, [pc, #532]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 facd 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3320      	adds	r3, #32
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fbb6 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	74fb      	strb	r3, [r7, #19]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d40:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4e:	4973      	ldr	r1, [pc, #460]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d041      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d70:	d02a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d76:	d824      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d82:	d81e      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d90:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a61      	ldr	r2, [pc, #388]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d9c:	e015      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fa85 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dae:	e00c      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3320      	adds	r3, #32
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fb6e 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dc0:	e003      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd0:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dde:	494f      	ldr	r1, [pc, #316]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002de6:	e001      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a0 	beq.w	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	4a40      	ldr	r2, [pc, #256]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e20:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe f800 	bl	8000e40 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e42:	e009      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fd fffc 	bl	8000e40 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d902      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	74fb      	strb	r3, [r7, #19]
        break;
 8002e56:	e005      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d15c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01f      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d019      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fd ffbb 	bl	8000e40 <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd ffb7 	bl	8000e40 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d902      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ec      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f28:	7c7b      	ldrb	r3, [r7, #17]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4ba6      	ldr	r3, [pc, #664]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	4aa5      	ldr	r2, [pc, #660]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f46:	4ba0      	ldr	r3, [pc, #640]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f023 0203 	bic.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	499c      	ldr	r1, [pc, #624]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f68:	4b97      	ldr	r3, [pc, #604]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 020c 	bic.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	4994      	ldr	r1, [pc, #592]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f8a:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	498b      	ldr	r1, [pc, #556]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fac:	4b86      	ldr	r3, [pc, #536]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4983      	ldr	r1, [pc, #524]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fce:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fdc:	497a      	ldr	r1, [pc, #488]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff0:	4b75      	ldr	r3, [pc, #468]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	4972      	ldr	r1, [pc, #456]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	4969      	ldr	r1, [pc, #420]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003042:	4961      	ldr	r1, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003056:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003064:	4958      	ldr	r1, [pc, #352]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003078:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	4950      	ldr	r1, [pc, #320]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309a:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	4947      	ldr	r1, [pc, #284]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	493f      	ldr	r1, [pc, #252]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d028      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4936      	ldr	r1, [pc, #216]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fc:	d106      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fe:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003108:	60d3      	str	r3, [r2, #12]
 800310a:	e011      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003114:	d10c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f8c9 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d028      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	491f      	ldr	r1, [pc, #124]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d106      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
 8003168:	e011      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003172:	d10c      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2101      	movs	r1, #1
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f89a 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a8:	4907      	ldr	r1, [pc, #28]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b8:	d108      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ba:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4a02      	ldr	r2, [pc, #8]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c4:	60d3      	str	r3, [r2, #12]
 80031c6:	e013      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80031c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f869 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fc:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320a:	4929      	ldr	r1, [pc, #164]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321a:	d10d      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f846 	bl	80032b4 <RCCEx_PLLSAI1_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d014      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
 8003236:	e011      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d10c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3320      	adds	r3, #32
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f925 	bl	8003498 <RCCEx_PLLSAI2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003278:	490d      	ldr	r1, [pc, #52]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329c:	4904      	ldr	r1, [pc, #16]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000

080032b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032c2:	4b74      	ldr	r3, [pc, #464]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d018      	beq.n	8003300 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ce:	4b71      	ldr	r3, [pc, #452]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10d      	bne.n	80032fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
       ||
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032e6:	4b6b      	ldr	r3, [pc, #428]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
       ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d047      	beq.n	800338a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e044      	b.n	800338a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d018      	beq.n	800333a <RCCEx_PLLSAI1_Config+0x86>
 8003308:	2b03      	cmp	r3, #3
 800330a:	d825      	bhi.n	8003358 <RCCEx_PLLSAI1_Config+0xa4>
 800330c:	2b01      	cmp	r3, #1
 800330e:	d002      	beq.n	8003316 <RCCEx_PLLSAI1_Config+0x62>
 8003310:	2b02      	cmp	r3, #2
 8003312:	d009      	beq.n	8003328 <RCCEx_PLLSAI1_Config+0x74>
 8003314:	e020      	b.n	8003358 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003316:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11d      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003326:	e01a      	b.n	800335e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003328:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d116      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003338:	e013      	b.n	8003362 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800333a:	4b56      	ldr	r3, [pc, #344]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003346:	4b53      	ldr	r3, [pc, #332]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003356:	e006      	b.n	8003366 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e004      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003366:	bf00      	nop
    }

    if(status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800336e:	4b49      	ldr	r3, [pc, #292]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	430b      	orrs	r3, r1
 8003384:	4943      	ldr	r1, [pc, #268]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d17c      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003390:	4b40      	ldr	r3, [pc, #256]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3f      	ldr	r2, [pc, #252]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fd fd50 	bl	8000e40 <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033a2:	e009      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a4:	f7fd fd4c 	bl	8000e40 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	73fb      	strb	r3, [r7, #15]
        break;
 80033b6:	e005      	b.n	80033c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ef      	bne.n	80033a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d15f      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d110      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80033d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6892      	ldr	r2, [r2, #8]
 80033e0:	0211      	lsls	r1, r2, #8
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	492a      	ldr	r1, [pc, #168]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	610b      	str	r3, [r1, #16]
 80033f0:	e027      	b.n	8003442 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d112      	bne.n	800341e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003400:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	0211      	lsls	r1, r2, #8
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6912      	ldr	r2, [r2, #16]
 800340e:	0852      	lsrs	r2, r2, #1
 8003410:	3a01      	subs	r2, #1
 8003412:	0552      	lsls	r2, r2, #21
 8003414:	430a      	orrs	r2, r1
 8003416:	491f      	ldr	r1, [pc, #124]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	610b      	str	r3, [r1, #16]
 800341c:	e011      	b.n	8003442 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003426:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6892      	ldr	r2, [r2, #8]
 800342e:	0211      	lsls	r1, r2, #8
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6952      	ldr	r2, [r2, #20]
 8003434:	0852      	lsrs	r2, r2, #1
 8003436:	3a01      	subs	r2, #1
 8003438:	0652      	lsls	r2, r2, #25
 800343a:	430a      	orrs	r2, r1
 800343c:	4915      	ldr	r1, [pc, #84]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343e:	4313      	orrs	r3, r2
 8003440:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fd fcf7 	bl	8000e40 <HAL_GetTick>
 8003452:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003454:	e009      	b.n	800346a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003456:	f7fd fcf3 	bl	8000e40 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	73fb      	strb	r3, [r7, #15]
          break;
 8003468:	e005      	b.n	8003476 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ef      	beq.n	8003456 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000

08003498 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a6:	4b69      	ldr	r3, [pc, #420]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034b2:	4b66      	ldr	r3, [pc, #408]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10d      	bne.n	80034de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
       ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ca:	4b60      	ldr	r3, [pc, #384]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
       ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d047      	beq.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e044      	b.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d018      	beq.n	800351e <RCCEx_PLLSAI2_Config+0x86>
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d825      	bhi.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d002      	beq.n	80034fa <RCCEx_PLLSAI2_Config+0x62>
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d009      	beq.n	800350c <RCCEx_PLLSAI2_Config+0x74>
 80034f8:	e020      	b.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fa:	4b54      	ldr	r3, [pc, #336]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11d      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e01a      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d116      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351c:	e013      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351e:	4b4b      	ldr	r3, [pc, #300]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352a:	4b48      	ldr	r3, [pc, #288]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353a:	e006      	b.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e004      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e002      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800354a:	bf00      	nop
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	430b      	orrs	r3, r1
 8003568:	4938      	ldr	r1, [pc, #224]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d166      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003574:	4b35      	ldr	r3, [pc, #212]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a34      	ldr	r2, [pc, #208]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f7fd fc5e 	bl	8000e40 <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003586:	e009      	b.n	800359c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003588:	f7fd fc5a 	bl	8000e40 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	73fb      	strb	r3, [r7, #15]
        break;
 800359a:	e005      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ef      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d149      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d110      	bne.n	80035d6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	0211      	lsls	r1, r2, #8
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	06d2      	lsls	r2, r2, #27
 80035cc:	430a      	orrs	r2, r1
 80035ce:	491f      	ldr	r1, [pc, #124]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	614b      	str	r3, [r1, #20]
 80035d4:	e011      	b.n	80035fa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6892      	ldr	r2, [r2, #8]
 80035e6:	0211      	lsls	r1, r2, #8
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6912      	ldr	r2, [r2, #16]
 80035ec:	0852      	lsrs	r2, r2, #1
 80035ee:	3a01      	subs	r2, #1
 80035f0:	0652      	lsls	r2, r2, #25
 80035f2:	430a      	orrs	r2, r1
 80035f4:	4915      	ldr	r1, [pc, #84]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fd fc1b 	bl	8000e40 <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360c:	e009      	b.n	8003622 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800360e:	f7fd fc17 	bl	8000e40 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d902      	bls.n	8003622 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	73fb      	strb	r3, [r7, #15]
          break;
 8003620:	e005      	b.n	800362e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ef      	beq.n	800360e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <RCCEx_PLLSAI2_Config+0x1b4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000

08003650 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e01d      	b.n	800369e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fae6 	bl	8000c48 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fa46 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d122      	bne.n	8003738 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d11b      	bne.n	8003738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0202 	mvn.w	r2, #2
 8003708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f9e0 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9d2 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f9e3 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0204 	mvn.w	r2, #4
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9b6 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9a8 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f9b9 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b08      	cmp	r3, #8
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0208 	mvn.w	r2, #8
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f98c 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f97e 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f98f 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2208      	movs	r2, #8
 800380a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f962 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f954 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f965 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10e      	bne.n	8003860 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0201 	mvn.w	r2, #1
 8003858:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd f946 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d10e      	bne.n	800388c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d107      	bne.n	800388c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003884:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fae6 	bl	8003e58 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f92a 	bl	8003b0c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0220 	mvn.w	r2, #32
 80038dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fab0 	bl	8003e44 <HAL_TIMEx_CommutCallback>
    }
  }
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_TIM_ConfigClockSource+0x1c>
 8003904:	2302      	movs	r3, #2
 8003906:	e0df      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x1dc>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800392a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d057      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x10a>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	f200 80b3 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d028      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xba>
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	f200 80ac 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 800395c:	2b70      	cmp	r3, #112	; 0x70
 800395e:	d02d      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0xd0>
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	f200 80a7 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 8003966:	2b60      	cmp	r3, #96	; 0x60
 8003968:	d068      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0x150>
 800396a:	2b60      	cmp	r3, #96	; 0x60
 800396c:	f200 80a2 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 8003970:	2b50      	cmp	r3, #80	; 0x50
 8003972:	d053      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0x130>
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	f200 809d 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d06e      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x170>
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	f200 8098 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	f000 808e 	beq.w	8003aa6 <HAL_TIM_ConfigClockSource+0x1ba>
 800398a:	2b30      	cmp	r3, #48	; 0x30
 800398c:	f200 8092 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 8003990:	2b20      	cmp	r3, #32
 8003992:	f000 8081 	beq.w	8003a98 <HAL_TIM_ConfigClockSource+0x1ac>
 8003996:	2b20      	cmp	r3, #32
 8003998:	f200 808c 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d06d      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0x190>
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d072      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80039a4:	e086      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	f023 0307 	bic.w	r3, r3, #7
 80039b8:	6093      	str	r3, [r2, #8]
    break;
 80039ba:	e07c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f000 f9c3 	bl	8003d56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	609a      	str	r2, [r3, #8]
    break;
 80039f4:	e05f      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f000 f9a6 	bl	8003d56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a18:	609a      	str	r2, [r3, #8]
    break;
 8003a1a:	e04c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f000 f90d 	bl	8003c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2150      	movs	r1, #80	; 0x50
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f96e 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003a3a:	e03c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f000 f930 	bl	8003cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2160      	movs	r1, #96	; 0x60
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f95e 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003a5a:	e02c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f000 f8ed 	bl	8003c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f94e 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003a7a:	e01c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f947 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003a88:	e015      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2110      	movs	r1, #16
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f940 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003a96:	e00e      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f939 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003aa4:	e007      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2130      	movs	r1, #48	; 0x30
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f932 	bl	8003d16 <TIM_ITRx_SetConfig>
    break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1ca>
    break;
 8003ab4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3c      	ldr	r2, [pc, #240]	; (8003c28 <TIM_Base_SetConfig+0x108>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <TIM_Base_SetConfig+0x44>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d00f      	beq.n	8003b64 <TIM_Base_SetConfig+0x44>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <TIM_Base_SetConfig+0x10c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_Base_SetConfig+0x44>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <TIM_Base_SetConfig+0x110>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_Base_SetConfig+0x44>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a37      	ldr	r2, [pc, #220]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_Base_SetConfig+0x44>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d108      	bne.n	8003b76 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <TIM_Base_SetConfig+0x108>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01f      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d01b      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <TIM_Base_SetConfig+0x10c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d017      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <TIM_Base_SetConfig+0x110>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00f      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a25      	ldr	r2, [pc, #148]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a24      	ldr	r2, [pc, #144]	; (8003c3c <TIM_Base_SetConfig+0x11c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <TIM_Base_SetConfig+0x120>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0x9e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <TIM_Base_SetConfig+0x124>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a0f      	ldr	r2, [pc, #60]	; (8003c28 <TIM_Base_SetConfig+0x108>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00f      	beq.n	8003c0e <TIM_Base_SetConfig+0xee>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00b      	beq.n	8003c0e <TIM_Base_SetConfig+0xee>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <TIM_Base_SetConfig+0x11c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <TIM_Base_SetConfig+0xee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <TIM_Base_SetConfig+0x120>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_Base_SetConfig+0xee>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <TIM_Base_SetConfig+0x124>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d103      	bne.n	8003c16 <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	615a      	str	r2, [r3, #20]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0201 	bic.w	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f023 030a 	bic.w	r3, r3, #10
 8003c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b087      	sub	sp, #28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0210 	bic.w	r2, r3, #16
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	f043 0307 	orr.w	r3, r3, #7
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	609a      	str	r2, [r3, #8]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	609a      	str	r2, [r3, #8]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e03d      	b.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003de6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40013400 	.word	0x40013400

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ea4 <__libc_init_array+0x38>)
 8003e70:	4c0d      	ldr	r4, [pc, #52]	; (8003ea8 <__libc_init_array+0x3c>)
 8003e72:	1b64      	subs	r4, r4, r5
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	2600      	movs	r6, #0
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	4d0b      	ldr	r5, [pc, #44]	; (8003eac <__libc_init_array+0x40>)
 8003e7e:	4c0c      	ldr	r4, [pc, #48]	; (8003eb0 <__libc_init_array+0x44>)
 8003e80:	f000 f820 	bl	8003ec4 <_init>
 8003e84:	1b64      	subs	r4, r4, r5
 8003e86:	10a4      	asrs	r4, r4, #2
 8003e88:	2600      	movs	r6, #0
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08003f4c 	.word	0x08003f4c
 8003ea8:	08003f4c 	.word	0x08003f4c
 8003eac:	08003f4c 	.word	0x08003f4c
 8003eb0:	08003f50 	.word	0x08003f50

08003eb4 <memset>:
 8003eb4:	4402      	add	r2, r0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d100      	bne.n	8003ebe <memset+0xa>
 8003ebc:	4770      	bx	lr
 8003ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec2:	e7f9      	b.n	8003eb8 <memset+0x4>

08003ec4 <_init>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr

08003ed0 <_fini>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr
