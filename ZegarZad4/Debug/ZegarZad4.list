
ZegarZad4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080027a4  080027a4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a4  080027a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080027ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000018  080027c4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080027c4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9dc  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d0  00000000  00000000  0002aa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d8f  00000000  00000000  0002d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6fb  00000000  00000000  0005555f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9179  00000000  00000000  00060c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  00159e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002738 	.word	0x08002738

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08002738 	.word	0x08002738

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f000 fc0c 	bl	8000a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f829 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f8c3 	bl	8000384 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001fe:	f000 f86b 	bl	80002d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Joy_Init();
 8000202:	f000 f8d7 	bl	80003b4 <Joy_Init>
  Dis7Seg_Init();
 8000206:	f000 f901 	bl	800040c <Dis7Seg_Init>

  __HAL_RCC_TIM2_CLK_ENABLE();
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <main+0x58>)
 800020c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800020e:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <main+0x58>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6593      	str	r3, [r2, #88]	; 0x58
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <main+0x58>)
 8000218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x58>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <main+0x58>)
 8000228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800022e:	4b05      	ldr	r3, [pc, #20]	; (8000244 <main+0x58>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <main+0x5c>)
 800023c:	f001 fdf6 	bl	8001e2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x54>
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	20000034 	.word	0x20000034

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b096      	sub	sp, #88	; 0x58
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0314 	add.w	r3, r7, #20
 8000256:	2244      	movs	r2, #68	; 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fa64 	bl	8002728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800026e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000272:	f000 ff0b 	bl	800108c <HAL_PWREx_ControlVoltageScaling>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800027c:	f000 fb0a 	bl	8000894 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000280:	2310      	movs	r3, #16
 8000282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800028c:	2360      	movs	r3, #96	; 0x60
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000290:	2300      	movs	r3, #0
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	4618      	mov	r0, r3
 800029a:	f000 ff5d 	bl	8001158 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002a4:	f000 faf6 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fb63 	bl	800198c <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002cc:	f000 fae2 	bl	8000894 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3758      	adds	r7, #88	; 0x58
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f6:	4b21      	ldr	r3, [pc, #132]	; (800037c <MX_TIM2_Init+0xa4>)
 80002f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetHCLKFreq() / 400 / 4 /2-1;
 80002fe:	f001 fcd1 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8000302:	4603      	mov	r3, r0
 8000304:	4a1e      	ldr	r2, [pc, #120]	; (8000380 <MX_TIM2_Init+0xa8>)
 8000306:	fba2 2303 	umull	r2, r3, r2, r3
 800030a:	0a9b      	lsrs	r3, r3, #10
 800030c:	3b01      	subs	r3, #1
 800030e:	4a1b      	ldr	r2, [pc, #108]	; (800037c <MX_TIM2_Init+0xa4>)
 8000310:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <MX_TIM2_Init+0xa4>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PERIOD;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_TIM2_Init+0xa4>)
 800031a:	2201      	movs	r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_TIM2_Init+0xa4>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_TIM2_Init+0xa4>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032a:	4814      	ldr	r0, [pc, #80]	; (800037c <MX_TIM2_Init+0xa4>)
 800032c:	f001 fd26 	bl	8001d7c <HAL_TIM_Base_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000336:	f000 faad 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <MX_TIM2_Init+0xa4>)
 8000348:	f001 feff 	bl	800214a <HAL_TIM_ConfigClockSource>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000352:	f000 fa9f 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <MX_TIM2_Init+0xa4>)
 8000364:	f002 f916 	bl	8002594 <HAL_TIMEx_MasterConfigSynchronization>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800036e:	f000 fa91 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	3720      	adds	r7, #32
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000034 	.word	0x20000034
 8000380:	51eb851f 	.word	0x51eb851f

08000384 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_GPIO_Init+0x2c>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <MX_GPIO_Init+0x2c>)
 8000390:	f043 0308 	orr.w	r3, r3, #8
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_GPIO_Init+0x2c>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0308 	and.w	r3, r3, #8
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <Joy_Init>:

/* USER CODE BEGIN 4 */
static void Joy_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef joyInitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <Joy_Init+0x50>)
 80003ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <Joy_Init+0x50>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <Joy_Init+0x50>)
 80003d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

	joyInitStruct.Mode = GPIO_MODE_INPUT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
	joyInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
	joyInitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
	joyInitStruct.Pin = JOY_UP_PIN |
 80003ec:	f248 030f 	movw	r3, #32783	; 0x800f
 80003f0:	607b      	str	r3, [r7, #4]
					 	JOY_DOWN_PIN |
						JOY_LEFT_PIN |
						JOY_RIGHT_PIN |
						JOY_CENTER_PIN;

	HAL_GPIO_Init(GPIOE, &joyInitStruct);
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <Joy_Init+0x54>)
 80003f8:	f000 fc90 	bl	8000d1c <HAL_GPIO_Init>
}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000
 8000408:	48001000 	.word	0x48001000

0800040c <Dis7Seg_Init>:

void Dis7Seg_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef initStruct = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <Dis7Seg_Init+0x80>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a19      	ldr	r2, [pc, #100]	; (800048c <Dis7Seg_Init+0x80>)
 8000428:	f043 0302 	orr.w	r3, r3, #2
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <Dis7Seg_Init+0x80>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0302 	and.w	r3, r3, #2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <Dis7Seg_Init+0x80>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <Dis7Seg_Init+0x80>)
 8000440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <Dis7Seg_Init+0x80>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 8000452:	f000 fe71 	bl	8001138 <HAL_PWREx_EnableVddIO2>

	initStruct.Pin = DIG1_PIN | DIG2_PIN | DIG3_PIN | DIG4_PIN;
 8000456:	233c      	movs	r3, #60	; 0x3c
 8000458:	60fb      	str	r3, [r7, #12]
	initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	613b      	str	r3, [r7, #16]
	initStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
	initStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIG_PORT, &initStruct);
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4619      	mov	r1, r3
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <Dis7Seg_Init+0x84>)
 800046e:	f000 fc55 	bl	8000d1c <HAL_GPIO_Init>

	initStruct.Pin = SEG_A_PIN | SEG_B_PIN | SEG_C_PIN |
 8000472:	f240 237f 	movw	r3, #639	; 0x27f
 8000476:	60fb      	str	r3, [r7, #12]
				   	 SEG_D_PIN | SEG_E_PIN | SEG_F_PIN |
					 SEG_G_PIN | SEG_DP_PIN;
	HAL_GPIO_Init(SEG_PORT, &initStruct);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4619      	mov	r1, r3
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <Dis7Seg_Init+0x88>)
 8000480:	f000 fc4c 	bl	8000d1c <HAL_GPIO_Init>
}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000
 8000490:	48000400 	.word	0x48000400
 8000494:	48001800 	.word	0x48001800

08000498 <Dis7seg_display>:

void Dis7seg_display(const Time_t * time_p)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	static uint8_t dig = 0;

	HAL_GPIO_WritePin(DIG_PORT, DIG_MASK, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	213c      	movs	r1, #60	; 0x3c
 80004a4:	4820      	ldr	r0, [pc, #128]	; (8000528 <Dis7seg_display+0x90>)
 80004a6:	f000 fdcb 	bl	8001040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_MASK, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f240 217f 	movw	r1, #639	; 0x27f
 80004b0:	481e      	ldr	r0, [pc, #120]	; (800052c <Dis7seg_display+0x94>)
 80004b2:	f000 fdc5 	bl	8001040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, display[dig], GPIO_PIN_SET);
 80004b6:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <Dis7seg_display+0x98>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <Dis7seg_display+0x9c>)
 80004be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	4819      	ldr	r0, [pc, #100]	; (800052c <Dis7seg_display+0x94>)
 80004c8:	f000 fdba 	bl	8001040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG_PORT, digit[dig], GPIO_PIN_SET);
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <Dis7seg_display+0x98>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b19      	ldr	r3, [pc, #100]	; (8000538 <Dis7seg_display+0xa0>)
 80004d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004d8:	2201      	movs	r2, #1
 80004da:	4619      	mov	r1, r3
 80004dc:	4812      	ldr	r0, [pc, #72]	; (8000528 <Dis7seg_display+0x90>)
 80004de:	f000 fdaf 	bl	8001040 <HAL_GPIO_WritePin>

	if ((dig == 0U && time_p->isDotActive) || dig == 2U)
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <Dis7seg_display+0x98>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d106      	bne.n	80004f8 <Dis7seg_display+0x60>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	7a1b      	ldrb	r3, [r3, #8]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <Dis7seg_display+0x68>
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <Dis7seg_display+0x98>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d105      	bne.n	800050c <Dis7seg_display+0x74>
	{
		HAL_GPIO_WritePin(SEG_PORT, SEG_DP_PIN, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <Dis7seg_display+0x94>)
 8000508:	f000 fd9a 	bl	8001040 <HAL_GPIO_WritePin>
	}



	dig = (dig + 1) & 3;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <Dis7seg_display+0x98>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <Dis7seg_display+0x98>)
 800051c:	701a      	strb	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	48000400 	.word	0x48000400
 800052c:	48001800 	.word	0x48001800
 8000530:	20000088 	.word	0x20000088
 8000534:	20000080 	.word	0x20000080
 8000538:	0800275c 	.word	0x0800275c

0800053c <Dis7Seg_Set_MM_SS>:

void Dis7Seg_Set_MM_SS(const Time_t * const time_p)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	display[0] = segments[time_p->seconds_u16 % 10];
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	885a      	ldrh	r2, [r3, #2]
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <Dis7Seg_Set_MM_SS+0x90>)
 800054a:	fba3 1302 	umull	r1, r3, r3, r2
 800054e:	08d9      	lsrs	r1, r3, #3
 8000550:	460b      	mov	r3, r1
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	440b      	add	r3, r1
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	461a      	mov	r2, r3
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <Dis7Seg_Set_MM_SS+0x94>)
 8000560:	5c9b      	ldrb	r3, [r3, r2]
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <Dis7Seg_Set_MM_SS+0x98>)
 8000566:	801a      	strh	r2, [r3, #0]
	display[1] = segments[time_p->seconds_u16 / 10];
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	885b      	ldrh	r3, [r3, #2]
 800056c:	4a17      	ldr	r2, [pc, #92]	; (80005cc <Dis7Seg_Set_MM_SS+0x90>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	08db      	lsrs	r3, r3, #3
 8000574:	b29b      	uxth	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <Dis7Seg_Set_MM_SS+0x94>)
 800057a:	5c9b      	ldrb	r3, [r3, r2]
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <Dis7Seg_Set_MM_SS+0x98>)
 8000580:	805a      	strh	r2, [r3, #2]
	display[2] = segments[time_p->minutes_u16 % 10];
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	889a      	ldrh	r2, [r3, #4]
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <Dis7Seg_Set_MM_SS+0x90>)
 8000588:	fba3 1302 	umull	r1, r3, r3, r2
 800058c:	08d9      	lsrs	r1, r3, #3
 800058e:	460b      	mov	r3, r1
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	440b      	add	r3, r1
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	b29b      	uxth	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <Dis7Seg_Set_MM_SS+0x94>)
 800059e:	5c9b      	ldrb	r3, [r3, r2]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <Dis7Seg_Set_MM_SS+0x98>)
 80005a4:	809a      	strh	r2, [r3, #4]
	display[3] = segments[time_p->minutes_u16 / 10];
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	889b      	ldrh	r3, [r3, #4]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <Dis7Seg_Set_MM_SS+0x90>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <Dis7Seg_Set_MM_SS+0x94>)
 80005b8:	5c9b      	ldrb	r3, [r3, r2]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <Dis7Seg_Set_MM_SS+0x98>)
 80005be:	80da      	strh	r2, [r3, #6]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	cccccccd 	.word	0xcccccccd
 80005d0:	08002750 	.word	0x08002750
 80005d4:	20000080 	.word	0x20000080

080005d8 <Dis7Seg_Set_HH_MM>:

void Dis7Seg_Set_HH_MM(const Time_t * const time_p)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	display[0] = segments[time_p->minutes_u16 % 10];
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	889a      	ldrh	r2, [r3, #4]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <Dis7Seg_Set_HH_MM+0x90>)
 80005e6:	fba3 1302 	umull	r1, r3, r3, r2
 80005ea:	08d9      	lsrs	r1, r3, #3
 80005ec:	460b      	mov	r3, r1
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <Dis7Seg_Set_HH_MM+0x94>)
 80005fc:	5c9b      	ldrb	r3, [r3, r2]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <Dis7Seg_Set_HH_MM+0x98>)
 8000602:	801a      	strh	r2, [r3, #0]
	display[1] = segments[time_p->minutes_u16 / 10];
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	889b      	ldrh	r3, [r3, #4]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <Dis7Seg_Set_HH_MM+0x90>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b29b      	uxth	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <Dis7Seg_Set_HH_MM+0x94>)
 8000616:	5c9b      	ldrb	r3, [r3, r2]
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <Dis7Seg_Set_HH_MM+0x98>)
 800061c:	805a      	strh	r2, [r3, #2]
	display[2] = segments[time_p->hours_u16 % 10];
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	88da      	ldrh	r2, [r3, #6]
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <Dis7Seg_Set_HH_MM+0x90>)
 8000624:	fba3 1302 	umull	r1, r3, r3, r2
 8000628:	08d9      	lsrs	r1, r3, #3
 800062a:	460b      	mov	r3, r1
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <Dis7Seg_Set_HH_MM+0x94>)
 800063a:	5c9b      	ldrb	r3, [r3, r2]
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <Dis7Seg_Set_HH_MM+0x98>)
 8000640:	809a      	strh	r2, [r3, #4]
	display[3] = segments[time_p->hours_u16 / 10];
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	88db      	ldrh	r3, [r3, #6]
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <Dis7Seg_Set_HH_MM+0x90>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	b29b      	uxth	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <Dis7Seg_Set_HH_MM+0x94>)
 8000654:	5c9b      	ldrb	r3, [r3, r2]
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <Dis7Seg_Set_HH_MM+0x98>)
 800065a:	80da      	strh	r2, [r3, #6]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	cccccccd 	.word	0xcccccccd
 800066c:	08002750 	.word	0x08002750
 8000670:	20000080 	.word	0x20000080

08000674 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	static Time_t time = {0U, S, M, H, TRUE, FALSE};

	incrementTime(&time, htim);
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	4819      	ldr	r0, [pc, #100]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000680:	f000 f834 	bl	80006ec <incrementTime>

	if (DetectFallingEdge(JOY_PORT, JOY_CENTER_PIN))
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	4817      	ldr	r0, [pc, #92]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800068a:	f000 f8b3 	bl	80007f4 <DetectFallingEdge>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00d      	beq.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		time.mode_HH_MM++;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000696:	7a1b      	ldrb	r3, [r3, #8]
 8000698:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2d9      	uxtb	r1, r3
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006a8:	7a13      	ldrb	r3, [r2, #8]
 80006aa:	f361 0341 	bfi	r3, r1, #1, #1
 80006ae:	7213      	strb	r3, [r2, #8]
	}

	if (time.mode_HH_MM)
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006b2:	7a1b      	ldrb	r3, [r3, #8]
 80006b4:	f003 0302 	and.w	r3, r3, #2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		Dis7Seg_Set_HH_MM(&time);
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006c0:	f7ff ff8a 	bl	80005d8 <Dis7Seg_Set_HH_MM>
 80006c4:	e007      	b.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x62>
	}
	else
	{
		time.isDotActive = 0;
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006c8:	7a13      	ldrb	r3, [r2, #8]
 80006ca:	f36f 0300 	bfc	r3, #0, #1
 80006ce:	7213      	strb	r3, [r2, #8]
		Dis7Seg_Set_MM_SS(&time);
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006d2:	f7ff ff33 	bl	800053c <Dis7Seg_Set_MM_SS>
	}

	Dis7seg_display(&time);
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006d8:	f7ff fede 	bl	8000498 <Dis7seg_display>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	48001000 	.word	0x48001000

080006ec <incrementTime>:

void incrementTime(Time_t * const time_p, const TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	static uint32_t prevTick = 0;
	static uint16_t prevCycleSeconds = 0U;
	static uint16_t ms500 = 0;

	time_p->miliseconds_u16 += HAL_GetTick() - prevTick;
 80006f6:	f000 f9f3 	bl	8000ae0 <HAL_GetTick>
 80006fa:	4602      	mov	r2, r0
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <incrementTime+0xfc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1ad1      	subs	r1, r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	881a      	ldrh	r2, [r3, #0]
 8000706:	b28b      	uxth	r3, r1
 8000708:	4413      	add	r3, r2
 800070a:	b29a      	uxth	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	801a      	strh	r2, [r3, #0]
	prevTick = HAL_GetTick();
 8000710:	f000 f9e6 	bl	8000ae0 <HAL_GetTick>
 8000714:	4603      	mov	r3, r0
 8000716:	4a34      	ldr	r2, [pc, #208]	; (80007e8 <incrementTime+0xfc>)
 8000718:	6013      	str	r3, [r2, #0]

	if (ms500 == 500)
 800071a:	4b34      	ldr	r3, [pc, #208]	; (80007ec <incrementTime+0x100>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000722:	d11b      	bne.n	800075c <incrementTime+0x70>
	{
		if(time_p->mode_HH_MM){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7a1b      	ldrb	r3, [r3, #8]
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d011      	beq.n	8000756 <incrementTime+0x6a>
			time_p->isDotActive++;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a1b      	ldrb	r3, [r3, #8]
 8000736:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	3301      	adds	r3, #1
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2d9      	uxtb	r1, r3
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7a13      	ldrb	r3, [r2, #8]
 8000748:	f361 0300 	bfi	r3, r1, #0, #1
 800074c:	7213      	strb	r3, [r2, #8]
			prevCycleSeconds = time_p->seconds_u16;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	885a      	ldrh	r2, [r3, #2]
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <incrementTime+0x104>)
 8000754:	801a      	strh	r2, [r3, #0]
		}
		ms500 = 0;
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <incrementTime+0x100>)
 8000758:	2200      	movs	r2, #0
 800075a:	801a      	strh	r2, [r3, #0]
	}

	if (time_p->miliseconds_u16 >= 1000U)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000764:	d30c      	bcc.n	8000780 <incrementTime+0x94>
	{
		time_p->miliseconds_u16 -=1000U;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	801a      	strh	r2, [r3, #0]
		time_p->seconds_u16++;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	3301      	adds	r3, #1
 800077a:	b29a      	uxth	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	805a      	strh	r2, [r3, #2]
	}

	if (time_p->seconds_u16 >= 60U)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	885b      	ldrh	r3, [r3, #2]
 8000784:	2b3b      	cmp	r3, #59	; 0x3b
 8000786:	d90b      	bls.n	80007a0 <incrementTime+0xb4>
	{
		time_p->seconds_u16 -= 60U;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	885b      	ldrh	r3, [r3, #2]
 800078c:	3b3c      	subs	r3, #60	; 0x3c
 800078e:	b29a      	uxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	805a      	strh	r2, [r3, #2]
		time_p->minutes_u16++;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	889b      	ldrh	r3, [r3, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	b29a      	uxth	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	809a      	strh	r2, [r3, #4]
	}

	if (time_p->minutes_u16 >= 60U)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2b3b      	cmp	r3, #59	; 0x3b
 80007a6:	d90b      	bls.n	80007c0 <incrementTime+0xd4>
	{
		time_p->minutes_u16 -= 60U;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	889b      	ldrh	r3, [r3, #4]
 80007ac:	3b3c      	subs	r3, #60	; 0x3c
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	809a      	strh	r2, [r3, #4]
		time_p->hours_u16++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	88db      	ldrh	r3, [r3, #6]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	80da      	strh	r2, [r3, #6]
	}

	if (time_p->hours_u16 >= 24U)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	88db      	ldrh	r3, [r3, #6]
 80007c4:	2b17      	cmp	r3, #23
 80007c6:	d905      	bls.n	80007d4 <incrementTime+0xe8>
	{
		time_p->hours_u16 -= 24U;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	88db      	ldrh	r3, [r3, #6]
 80007cc:	3b18      	subs	r3, #24
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	80da      	strh	r2, [r3, #6]
	}
	ms500++;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <incrementTime+0x100>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <incrementTime+0x100>)
 80007de:	801a      	strh	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	20000090 	.word	0x20000090
 80007f0:	20000092 	.word	0x20000092

080007f4 <DetectFallingEdge>:

uint8_t DetectFallingEdge(GPIO_TypeDef * port, uint16_t pin)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
	static GPIO_TypeDef * prevPort;
	static uint16_t prevPin;
	static uint8_t buttonPressed = 0U;
	uint8_t retVal_u8 = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]

	if (prevPort != port || prevPin != pin)
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <DetectFallingEdge+0x94>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d104      	bne.n	8000818 <DetectFallingEdge+0x24>
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <DetectFallingEdge+0x98>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	887a      	ldrh	r2, [r7, #2]
 8000814:	429a      	cmp	r2, r3
 8000816:	d003      	beq.n	8000820 <DetectFallingEdge+0x2c>
	{
		buttonPressed = 0U;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <DetectFallingEdge+0x9c>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e025      	b.n	800086c <DetectFallingEdge+0x78>
	}
	else if ((~port->IDR & pin ? 1 : 0) && !buttonPressed)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	43da      	mvns	r2, r3
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	4013      	ands	r3, r2
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00a      	beq.n	8000844 <DetectFallingEdge+0x50>
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <DetectFallingEdge+0x9c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d106      	bne.n	8000844 <DetectFallingEdge+0x50>
	{
		buttonPressed++;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <DetectFallingEdge+0x9c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <DetectFallingEdge+0x9c>)
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e013      	b.n	800086c <DetectFallingEdge+0x78>
	}
	else if (!(~port->IDR & pin ? 1 : 0) && buttonPressed)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	43da      	mvns	r2, r3
 800084a:	887b      	ldrh	r3, [r7, #2]
 800084c:	4013      	ands	r3, r2
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10c      	bne.n	800086c <DetectFallingEdge+0x78>
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <DetectFallingEdge+0x9c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <DetectFallingEdge+0x78>
	{
		buttonPressed--;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <DetectFallingEdge+0x9c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3b01      	subs	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <DetectFallingEdge+0x9c>)
 8000864:	701a      	strb	r2, [r3, #0]
		retVal_u8++;
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	3301      	adds	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
	}

	prevPort = port;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <DetectFallingEdge+0x94>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
	prevPin = pin;
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <DetectFallingEdge+0x98>)
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	8013      	strh	r3, [r2, #0]
	return retVal_u8;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000094 	.word	0x20000094
 800088c:	20000098 	.word	0x20000098
 8000890:	2000009a 	.word	0x2000009a

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f8:	d113      	bne.n	8000922 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_TIM_Base_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_TIM_Base_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_TIM_Base_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	201c      	movs	r0, #28
 8000918:	f000 f9c9 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800091c:	201c      	movs	r0, #28
 800091e:	f000 f9e2 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f89c 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM2_IRQHandler+0x10>)
 800098a:	f001 fabf 	bl	8001f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000034 	.word	0x20000034

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f001 fe79 	bl	80026e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ee:	f7ff fbfd 	bl	80001ec <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a00:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 8000a04:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a08:	200000a0 	.word	0x200000a0

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>

08000a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f93d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f80e 	bl	8000a40 <HAL_InitTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e001      	b.n	8000a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a30:	f7ff ff36 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d023      	beq.n	8000a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_InitTick+0x70>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f949 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10f      	bne.n	8000a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d809      	bhi.n	8000a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f913 	bl	8000cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_InitTick+0x74>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	e007      	b.n	8000aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e004      	b.n	8000aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e001      	b.n	8000aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000014 	.word	0x20000014
 8000ab0:	2000000c 	.word	0x2000000c
 8000ab4:	20000010 	.word	0x20000010

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000014 	.word	0x20000014
 8000adc:	2000009c 	.word	0x2000009c

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000009c 	.word	0x2000009c

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e166      	b.n	8000ffa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8158 	beq.w	8000ff4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d005      	beq.n	8000d5c <HAL_GPIO_Init+0x40>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d130      	bne.n	8000dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d92:	2201      	movs	r2, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 0201 	and.w	r2, r3, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d017      	beq.n	8000dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d123      	bne.n	8000e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	6939      	ldr	r1, [r7, #16]
 8000e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0203 	and.w	r2, r3, #3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80b2 	beq.w	8000ff4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e94:	4a60      	ldr	r2, [pc, #384]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea8:	4a5c      	ldr	r2, [pc, #368]	; (800101c <HAL_GPIO_Init+0x300>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ed2:	d02b      	beq.n	8000f2c <HAL_GPIO_Init+0x210>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a52      	ldr	r2, [pc, #328]	; (8001020 <HAL_GPIO_Init+0x304>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d025      	beq.n	8000f28 <HAL_GPIO_Init+0x20c>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d01f      	beq.n	8000f24 <HAL_GPIO_Init+0x208>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a50      	ldr	r2, [pc, #320]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d019      	beq.n	8000f20 <HAL_GPIO_Init+0x204>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x310>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x200>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x314>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1fc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x318>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x31c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1f4>
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	e00e      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f10:	2308      	movs	r3, #8
 8000f12:	e00c      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f14:	2306      	movs	r3, #6
 8000f16:	e00a      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f18:	2305      	movs	r3, #5
 8000f1a:	e008      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f3e:	4937      	ldr	r1, [pc, #220]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f70:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_GPIO_Init+0x320>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f ae91 	bne.w	8000d2c <HAL_GPIO_Init+0x10>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	48000400 	.word	0x48000400
 8001024:	48000800 	.word	0x48000800
 8001028:	48000c00 	.word	0x48000c00
 800102c:	48001000 	.word	0x48001000
 8001030:	48001400 	.word	0x48001400
 8001034:	48001800 	.word	0x48001800
 8001038:	48001c00 	.word	0x48001c00
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800105c:	e002      	b.n	8001064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HAL_PWREx_GetVoltageRange+0x18>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000

0800108c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800109a:	d130      	bne.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a8:	d038      	beq.n	800111c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b2:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2232      	movs	r2, #50	; 0x32
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d0:	e002      	b.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e4:	d102      	bne.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f2      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f8:	d110      	bne.n	800111c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e00f      	b.n	800111e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110a:	d007      	beq.n	800111c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40007000 	.word	0x40007000
 8001130:	2000000c 	.word	0x2000000c
 8001134:	431bde83 	.word	0x431bde83

08001138 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_PWREx_EnableVddIO2+0x1c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6053      	str	r3, [r2, #4]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f000 bc08 	b.w	800197c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116c:	4b96      	ldr	r3, [pc, #600]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001176:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80e4 	beq.w	8001356 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x4c>
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	f040 808b 	bne.w	80012b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f040 8087 	bne.w	80012b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a4:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_OscConfig+0x64>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e3df      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	4b81      	ldr	r3, [pc, #516]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <HAL_RCC_OscConfig+0x7e>
 80011cc:	4b7e      	ldr	r3, [pc, #504]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011d4:	e005      	b.n	80011e2 <HAL_RCC_OscConfig+0x8a>
 80011d6:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d223      	bcs.n	800122e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fd66 	bl	8001cbc <RCC_SetFlashLatencyFromMSIRange>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e3c0      	b.n	800197c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	496d      	ldr	r1, [pc, #436]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	4968      	ldr	r1, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e025      	b.n	800127a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122e:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a65      	ldr	r2, [pc, #404]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4960      	ldr	r1, [pc, #384]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	495b      	ldr	r1, [pc, #364]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fd26 	bl	8001cbc <RCC_SetFlashLatencyFromMSIRange>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e380      	b.n	800197c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800127a:	f000 fc87 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 800127e:	4602      	mov	r2, r0
 8001280:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	4950      	ldr	r1, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x274>)
 800128c:	5ccb      	ldrb	r3, [r1, r3]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_RCC_OscConfig+0x278>)
 8001298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129a:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fbce 	bl	8000a40 <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d052      	beq.n	8001354 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	e364      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d032      	beq.n	8001320 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fc0b 	bl	8000ae0 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc07 	bl	8000ae0 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e34d      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a35      	ldr	r2, [pc, #212]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4930      	ldr	r1, [pc, #192]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	492b      	ldr	r1, [pc, #172]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
 800131e:	e01a      	b.n	8001356 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132c:	f7ff fbd8 	bl	8000ae0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001334:	f7ff fbd4 	bl	8000ae0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e31a      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x1dc>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d073      	beq.n	800144a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x21c>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d10e      	bne.n	800138c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d063      	beq.n	8001448 <HAL_RCC_OscConfig+0x2f0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d15f      	bne.n	8001448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2f7      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x24c>
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e025      	b.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d114      	bne.n	80013d8 <HAL_RCC_OscConfig+0x280>
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e013      	b.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	08002764 	.word	0x08002764
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	20000010 	.word	0x20000010
 80013d8:	4ba0      	ldr	r3, [pc, #640]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a9f      	ldr	r2, [pc, #636]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b9d      	ldr	r3, [pc, #628]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a9c      	ldr	r2, [pc, #624]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb72 	bl	8000ae0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fb6e 	bl	8000ae0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e2b4      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001412:	4b92      	ldr	r3, [pc, #584]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x2a8>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fb5e 	bl	8000ae0 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fb5a 	bl	8000ae0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e2a0      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x2d0>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d060      	beq.n	8001518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x310>
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d119      	bne.n	8001496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d116      	bne.n	8001496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	4b7c      	ldr	r3, [pc, #496]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x328>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e27d      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	4973      	ldr	r1, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	e040      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d023      	beq.n	80014e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b6f      	ldr	r3, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb19 	bl	8000ae0 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb15 	bl	8000ae0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e25b      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	4b65      	ldr	r3, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	495f      	ldr	r1, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e018      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80014ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff faf5 	bl	8000ae0 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff faf1 	bl	8000ae0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e237      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d03c      	beq.n	800159e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01c      	beq.n	8001566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800152e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001532:	4a4a      	ldr	r2, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153c:	f7ff fad0 	bl	8000ae0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff facc 	bl	8000ae0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e212      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ef      	beq.n	8001544 <HAL_RCC_OscConfig+0x3ec>
 8001564:	e01b      	b.n	800159e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156c:	4a3b      	ldr	r2, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fab3 	bl	8000ae0 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff faaf 	bl	8000ae0 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1f5      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ef      	bne.n	800157e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80a6 	beq.w	80016f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10d      	bne.n	80015d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6593      	str	r3, [r2, #88]	; 0x58
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RCC_OscConfig+0x504>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d118      	bne.n	8001616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa76 	bl	8000ae0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff fa72 	bl	8000ae0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1b8      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x508>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d8>
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162e:	e029      	b.n	8001684 <HAL_RCC_OscConfig+0x52c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d115      	bne.n	8001664 <HAL_RCC_OscConfig+0x50c>
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <HAL_RCC_OscConfig+0x504>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	4a03      	ldr	r2, [pc, #12]	; (800165c <HAL_RCC_OscConfig+0x504>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x52c>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40007000 	.word	0x40007000
 8001664:	4b9d      	ldr	r3, [pc, #628]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a9c      	ldr	r2, [pc, #624]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	4b99      	ldr	r3, [pc, #612]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	4a98      	ldr	r2, [pc, #608]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d016      	beq.n	80016ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fa28 	bl	8000ae0 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fa24 	bl	8000ae0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e168      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016aa:	4b8c      	ldr	r3, [pc, #560]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ed      	beq.n	8001694 <HAL_RCC_OscConfig+0x53c>
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa11 	bl	8000ae0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fa0d 	bl	8000ae0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e151      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d8:	4b80      	ldr	r3, [pc, #512]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ed      	bne.n	80016c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	4a7a      	ldr	r2, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80016f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d03c      	beq.n	800177e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800170c:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800170e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001712:	4a72      	ldr	r2, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff f9e0 	bl	8000ae0 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001724:	f7ff f9dc 	bl	8000ae0 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e122      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001736:	4b69      	ldr	r3, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x5cc>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800174c:	4a63      	ldr	r2, [pc, #396]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff f9c3 	bl	8000ae0 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175e:	f7ff f9bf 	bl	8000ae0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e105      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001770:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80f9 	beq.w	800197a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	2b02      	cmp	r3, #2
 800178e:	f040 80cf 	bne.w	8001930 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001792:	4b52      	ldr	r3, [pc, #328]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0203 	and.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d12c      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	3b01      	subs	r3, #1
 80017b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d123      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d11b      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d113      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	3b01      	subs	r3, #1
 80017e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d109      	bne.n	8001800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d071      	beq.n	80018e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d068      	beq.n	80018d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d105      	bne.n	800181e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0ac      	b.n	800197c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800182c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800182e:	f7ff f957 	bl	8000ae0 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f953 	bl	8000ae0 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e099      	b.n	800197c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_RCC_OscConfig+0x788>)
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001864:	3a01      	subs	r2, #1
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	4311      	orrs	r1, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800186e:	0212      	lsls	r2, r2, #8
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001876:	0852      	lsrs	r2, r2, #1
 8001878:	3a01      	subs	r2, #1
 800187a:	0552      	lsls	r2, r2, #21
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001882:	0852      	lsrs	r2, r2, #1
 8001884:	3a01      	subs	r2, #1
 8001886:	0652      	lsls	r2, r2, #25
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800188e:	06d2      	lsls	r2, r2, #27
 8001890:	430a      	orrs	r2, r1
 8001892:	4912      	ldr	r1, [pc, #72]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 8001894:	4313      	orrs	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b0:	f7ff f916 	bl	8000ae0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f912 	bl	8000ae0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e058      	b.n	800197c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_RCC_OscConfig+0x784>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d6:	e050      	b.n	800197a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e04f      	b.n	800197c <HAL_RCC_OscConfig+0x824>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d144      	bne.n	800197a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001908:	f7ff f8ea 	bl	8000ae0 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f8e6 	bl	8000ae0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e02c      	b.n	800197c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x7b8>
 800192e:	e024      	b.n	800197a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d01f      	beq.n	8001976 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f8cd 	bl	8000ae0 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f8c9 	bl	8000ae0 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e00f      	b.n	800197c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4905      	ldr	r1, [pc, #20]	; (8001984 <HAL_RCC_OscConfig+0x82c>)
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_OscConfig+0x830>)
 8001970:	4013      	ands	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
 8001974:	e001      	b.n	800197a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	feeefffc 	.word	0xfeeefffc

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0e7      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d910      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0207 	bic.w	r2, r3, #7
 80019b6:	4970      	ldr	r1, [pc, #448]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b6e      	ldr	r3, [pc, #440]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cf      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d010      	beq.n	80019fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d908      	bls.n	80019fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4960      	ldr	r1, [pc, #384]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d04c      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b5a      	ldr	r3, [pc, #360]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0a6      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e09a      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a42:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e08e      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a52:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e086      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4943      	ldr	r1, [pc, #268]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a74:	f7ff f834 	bl	8000ae0 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f830 	bl	8000ae0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e06e      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d208      	bcs.n	8001ad2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	492b      	ldr	r1, [pc, #172]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d210      	bcs.n	8001b02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 0207 	bic.w	r2, r3, #7
 8001ae8:	4923      	ldr	r1, [pc, #140]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e036      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4918      	ldr	r1, [pc, #96]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4910      	ldr	r1, [pc, #64]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b40:	f000 f824 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	490b      	ldr	r1, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x1f4>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1fc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe ff6b 	bl	8000a40 <HAL_InitTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08002764 	.word	0x08002764
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	20000010 	.word	0x20000010

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d121      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d11e      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bc0:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e005      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	e004      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d134      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d003      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0xac>
 8001c30:	e005      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c34:	617b      	str	r3, [r7, #20]
      break;
 8001c36:	e005      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c3a:	617b      	str	r3, [r7, #20]
      break;
 8001c3c:	e002      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	617b      	str	r3, [r7, #20]
      break;
 8001c42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	3301      	adds	r3, #1
 8001c50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fb03 f202 	mul.w	r2, r3, r2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0e5b      	lsrs	r3, r3, #25
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	3301      	adds	r3, #1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c84:	69bb      	ldr	r3, [r7, #24]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08002774 	.word	0x08002774
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd4:	f7ff f9cc 	bl	8001070 <HAL_PWREx_GetVoltageRange>
 8001cd8:	6178      	str	r0, [r7, #20]
 8001cda:	e014      	b.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf4:	f7ff f9bc 	bl	8001070 <HAL_PWREx_GetVoltageRange>
 8001cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d10b      	bne.n	8001d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b80      	cmp	r3, #128	; 0x80
 8001d12:	d919      	bls.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2ba0      	cmp	r3, #160	; 0xa0
 8001d18:	d902      	bls.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	e013      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d20:	2301      	movs	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	e010      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b80      	cmp	r3, #128	; 0x80
 8001d2a:	d902      	bls.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e00a      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d102      	bne.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d38:	2302      	movs	r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e004      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b70      	cmp	r3, #112	; 0x70
 8001d42:	d101      	bne.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 0207 	bic.w	r2, r3, #7
 8001d50:	4909      	ldr	r1, [pc, #36]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e049      	b.n	8001e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fda0 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 fab6 	bl	800232c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d001      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e04f      	b.n	8001ee4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01d      	beq.n	8001ea2 <HAL_TIM_Base_Start_IT+0x76>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d018      	beq.n	8001ea2 <HAL_TIM_Base_Start_IT+0x76>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_TIM_Base_Start_IT+0x76>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_TIM_Base_Start_IT+0x76>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_TIM_Base_Start_IT+0x76>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_TIM_Base_Start_IT+0x76>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d115      	bne.n	8001ece <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d015      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0xb4>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d011      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	e008      	b.n	8001ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e000      	b.n	8001ee2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40000800 	.word	0x40000800
 8001efc:	40000c00 	.word	0x40000c00
 8001f00:	40013400 	.word	0x40013400
 8001f04:	40014000 	.word	0x40014000
 8001f08:	00010007 	.word	0x00010007

08001f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d122      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0202 	mvn.w	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f9ce 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f9c0 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f9d1 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0204 	mvn.w	r2, #4
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f9a4 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f996 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f9a7 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0208 	mvn.w	r2, #8
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f97a 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f96c 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f97d 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b10      	cmp	r3, #16
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0210 	mvn.w	r2, #16
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2208      	movs	r2, #8
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f950 	bl	80022f0 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f942 	bl	80022dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f953 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0201 	mvn.w	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe faf2 	bl	8000674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b80      	cmp	r3, #128	; 0x80
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fafe 	bl	80026b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ca:	d10e      	bne.n	80020ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b80      	cmp	r3, #128	; 0x80
 80020d8:	d107      	bne.n	80020ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 faf1 	bl	80026cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d10e      	bne.n	8002116 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d107      	bne.n	8002116 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800210e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f901 	bl	8002318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b20      	cmp	r3, #32
 8002122:	d10e      	bne.n	8002142 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b20      	cmp	r3, #32
 8002130:	d107      	bne.n	8002142 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0220 	mvn.w	r2, #32
 800213a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fab1 	bl	80026a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_TIM_ConfigClockSource+0x1c>
 8002162:	2302      	movs	r3, #2
 8002164:	e0b6      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x18a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002188:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002190:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a2:	d03e      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0xd8>
 80021a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a8:	f200 8087 	bhi.w	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	f000 8086 	beq.w	80022c0 <HAL_TIM_ConfigClockSource+0x176>
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b8:	d87f      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021ba:	2b70      	cmp	r3, #112	; 0x70
 80021bc:	d01a      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0xaa>
 80021be:	2b70      	cmp	r3, #112	; 0x70
 80021c0:	d87b      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021c2:	2b60      	cmp	r3, #96	; 0x60
 80021c4:	d050      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x11e>
 80021c6:	2b60      	cmp	r3, #96	; 0x60
 80021c8:	d877      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021ca:	2b50      	cmp	r3, #80	; 0x50
 80021cc:	d03c      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xfe>
 80021ce:	2b50      	cmp	r3, #80	; 0x50
 80021d0:	d873      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d058      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x13e>
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d86f      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021da:	2b30      	cmp	r3, #48	; 0x30
 80021dc:	d064      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x15e>
 80021de:	2b30      	cmp	r3, #48	; 0x30
 80021e0:	d86b      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d060      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x15e>
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d867      	bhi.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d05c      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x15e>
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d05a      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x15e>
 80021f2:	e062      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f000 f9a6 	bl	8002554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002216:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	609a      	str	r2, [r3, #8]
      break;
 8002220:	e04f      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f000 f98f 	bl	8002554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002244:	609a      	str	r2, [r3, #8]
      break;
 8002246:	e03c      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	461a      	mov	r2, r3
 8002256:	f000 f903 	bl	8002460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2150      	movs	r1, #80	; 0x50
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f95c 	bl	800251e <TIM_ITRx_SetConfig>
      break;
 8002266:	e02c      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	461a      	mov	r2, r3
 8002276:	f000 f922 	bl	80024be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2160      	movs	r1, #96	; 0x60
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f94c 	bl	800251e <TIM_ITRx_SetConfig>
      break;
 8002286:	e01c      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	f000 f8e3 	bl	8002460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f93c 	bl	800251e <TIM_ITRx_SetConfig>
      break;
 80022a6:	e00c      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f000 f933 	bl	800251e <TIM_ITRx_SetConfig>
      break;
 80022b8:	e003      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
      break;
 80022be:	e000      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80022c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d00f      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <TIM_Base_SetConfig+0x118>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00b      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3c      	ldr	r2, [pc, #240]	; (8002448 <TIM_Base_SetConfig+0x11c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d007      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3b      	ldr	r2, [pc, #236]	; (800244c <TIM_Base_SetConfig+0x120>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d003      	beq.n	800236c <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <TIM_Base_SetConfig+0x124>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d108      	bne.n	800237e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01f      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d01b      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <TIM_Base_SetConfig+0x118>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d017      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <TIM_Base_SetConfig+0x11c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <TIM_Base_SetConfig+0x120>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00f      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <TIM_Base_SetConfig+0x124>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <TIM_Base_SetConfig+0x128>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <TIM_Base_SetConfig+0x12c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x9a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <TIM_Base_SetConfig+0x130>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <TIM_Base_SetConfig+0x114>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00f      	beq.n	8002424 <TIM_Base_SetConfig+0xf8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <TIM_Base_SetConfig+0x124>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00b      	beq.n	8002424 <TIM_Base_SetConfig+0xf8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a11      	ldr	r2, [pc, #68]	; (8002454 <TIM_Base_SetConfig+0x128>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <TIM_Base_SetConfig+0xf8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <TIM_Base_SetConfig+0x12c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0xf8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0f      	ldr	r2, [pc, #60]	; (800245c <TIM_Base_SetConfig+0x130>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	615a      	str	r2, [r3, #20]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	40000c00 	.word	0x40000c00
 8002450:	40013400 	.word	0x40013400
 8002454:	40014000 	.word	0x40014000
 8002458:	40014400 	.word	0x40014400
 800245c:	40014800 	.word	0x40014800

08002460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f023 0201 	bic.w	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800248a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 030a 	bic.w	r3, r3, #10
 800249c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	621a      	str	r2, [r3, #32]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024be:	b480      	push	{r7}
 80024c0:	b087      	sub	sp, #28
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f023 0210 	bic.w	r2, r3, #16
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	031b      	lsls	r3, r3, #12
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	621a      	str	r2, [r3, #32]
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	f043 0307 	orr.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	021a      	lsls	r2, r3, #8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	431a      	orrs	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e068      	b.n	800267e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d108      	bne.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1e      	ldr	r2, [pc, #120]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d018      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a18      	ldr	r2, [pc, #96]	; (800269c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10c      	bne.n	800266c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4313      	orrs	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40013400 	.word	0x40013400
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000

080026a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <__libc_init_array>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	4d0d      	ldr	r5, [pc, #52]	; (8002718 <__libc_init_array+0x38>)
 80026e4:	4c0d      	ldr	r4, [pc, #52]	; (800271c <__libc_init_array+0x3c>)
 80026e6:	1b64      	subs	r4, r4, r5
 80026e8:	10a4      	asrs	r4, r4, #2
 80026ea:	2600      	movs	r6, #0
 80026ec:	42a6      	cmp	r6, r4
 80026ee:	d109      	bne.n	8002704 <__libc_init_array+0x24>
 80026f0:	4d0b      	ldr	r5, [pc, #44]	; (8002720 <__libc_init_array+0x40>)
 80026f2:	4c0c      	ldr	r4, [pc, #48]	; (8002724 <__libc_init_array+0x44>)
 80026f4:	f000 f820 	bl	8002738 <_init>
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	2600      	movs	r6, #0
 80026fe:	42a6      	cmp	r6, r4
 8002700:	d105      	bne.n	800270e <__libc_init_array+0x2e>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	f855 3b04 	ldr.w	r3, [r5], #4
 8002708:	4798      	blx	r3
 800270a:	3601      	adds	r6, #1
 800270c:	e7ee      	b.n	80026ec <__libc_init_array+0xc>
 800270e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002712:	4798      	blx	r3
 8002714:	3601      	adds	r6, #1
 8002716:	e7f2      	b.n	80026fe <__libc_init_array+0x1e>
 8002718:	080027a4 	.word	0x080027a4
 800271c:	080027a4 	.word	0x080027a4
 8002720:	080027a4 	.word	0x080027a4
 8002724:	080027a8 	.word	0x080027a8

08002728 <memset>:
 8002728:	4402      	add	r2, r0
 800272a:	4603      	mov	r3, r0
 800272c:	4293      	cmp	r3, r2
 800272e:	d100      	bne.n	8002732 <memset+0xa>
 8002730:	4770      	bx	lr
 8002732:	f803 1b01 	strb.w	r1, [r3], #1
 8002736:	e7f9      	b.n	800272c <memset+0x4>

08002738 <_init>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	bf00      	nop
 800273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273e:	bc08      	pop	{r3}
 8002740:	469e      	mov	lr, r3
 8002742:	4770      	bx	lr

08002744 <_fini>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	bf00      	nop
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr
