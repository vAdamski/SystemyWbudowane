
Zegar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001c94  08001c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cfc  08001cfc  00011cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08001d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001d0c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005657  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001308  00000000  00000000  00025693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  000269a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00026f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002954a  00000000  00000000  00027428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007905  00000000  00000000  00050972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd161  00000000  00000000  00058277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001553d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001418  00000000  00000000  00155428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001c7c 	.word	0x08001c7c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001c7c 	.word	0x08001c7c

080001ec <joy_init>:
#define JOY_UP_GPIO_Port GPIOE
#define JOY_OK_Pin GPIO_PIN_15
#define JOY_OK_GPIO_Port GPIOE

void joy_init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <joy_init+0x40>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <joy_init+0x40>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <joy_init+0x40>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	f003 0310 	and.w	r3, r3, #16
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_UP_Pin JOY_OK_Pin JOY_RIGHT_Pin 
                           JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_UP_Pin|JOY_OK_Pin|JOY_RIGHT_Pin 
 800020a:	f248 030f 	movw	r3, #32783	; 0x800f
 800020e:	607b      	str	r3, [r7, #4]
                          |JOY_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000210:	2300      	movs	r3, #0
 8000212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4619      	mov	r1, r3
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <joy_init+0x44>)
 800021e:	f000 fd0b 	bl	8000c38 <HAL_GPIO_Init>
}
 8000222:	bf00      	nop
 8000224:	3718      	adds	r7, #24
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	48001000 	.word	0x48001000

08000234 <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fbab 	bl	8000992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f804 	bl	8000248 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	
	// initialize KAMeLeon peripherals used in this project
	joy_init();
 8000240:	f7ff ffd4 	bl	80001ec <joy_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x10>
	...

08000248 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b096      	sub	sp, #88	; 0x58
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024e:	2310      	movs	r3, #16
 8000250:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800025a:	2360      	movs	r3, #96	; 0x60
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000262:	2301      	movs	r3, #1
 8000264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000266:	2301      	movs	r3, #1
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800026a:	2328      	movs	r3, #40	; 0x28
 800026c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fefc 	bl	800107c <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800028a:	218a      	movs	r1, #138	; 0x8a
 800028c:	481d      	ldr	r0, [pc, #116]	; (8000304 <SystemClock_Config+0xbc>)
 800028e:	f000 f83d 	bl	800030c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2303      	movs	r3, #3
 8000298:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	2104      	movs	r1, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fa8c 	bl	80017c8 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d003      	beq.n	80002be <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002b6:	2198      	movs	r1, #152	; 0x98
 80002b8:	4812      	ldr	r0, [pc, #72]	; (8000304 <SystemClock_Config+0xbc>)
 80002ba:	f000 f827 	bl	800030c <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002c2:	f000 fe75 	bl	8000fb0 <HAL_PWREx_ControlVoltageScaling>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d003      	beq.n	80002d4 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002cc:	219f      	movs	r1, #159	; 0x9f
 80002ce:	480d      	ldr	r0, [pc, #52]	; (8000304 <SystemClock_Config+0xbc>)
 80002d0:	f000 f81c 	bl	800030c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002d4:	f001 fc40 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <SystemClock_Config+0xc0>)
 80002dc:	fba2 2303 	umull	r2, r3, r2, r3
 80002e0:	099b      	lsrs	r3, r3, #6
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fc71 	bl	8000bca <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002e8:	2004      	movs	r0, #4
 80002ea:	f000 fc7b 	bl	8000be4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002f6:	f000 fc4c 	bl	8000b92 <HAL_NVIC_SetPriority>
}
 80002fa:	bf00      	nop
 80002fc:	3758      	adds	r7, #88	; 0x58
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	08001c94 	.word	0x08001c94
 8000308:	10624dd3 	.word	0x10624dd3

0800030c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000316:	e7fe      	b.n	8000316 <_Error_Handler+0xa>

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031e:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <HAL_MspInit+0x98>)
 8000320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000322:	4a23      	ldr	r2, [pc, #140]	; (80003b0 <HAL_MspInit+0x98>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6613      	str	r3, [r2, #96]	; 0x60
 800032a:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <HAL_MspInit+0x98>)
 800032c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <HAL_MspInit+0x98>)
 8000338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800033a:	4a1d      	ldr	r2, [pc, #116]	; (80003b0 <HAL_MspInit+0x98>)
 800033c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000340:	6593      	str	r3, [r2, #88]	; 0x58
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <HAL_MspInit+0x98>)
 8000344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800034e:	2003      	movs	r0, #3
 8000350:	f000 fc14 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	f06f 000b 	mvn.w	r0, #11
 800035c:	f000 fc19 	bl	8000b92 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	f06f 000a 	mvn.w	r0, #10
 8000368:	f000 fc13 	bl	8000b92 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	f06f 0009 	mvn.w	r0, #9
 8000374:	f000 fc0d 	bl	8000b92 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	2100      	movs	r1, #0
 800037c:	f06f 0004 	mvn.w	r0, #4
 8000380:	f000 fc07 	bl	8000b92 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2100      	movs	r1, #0
 8000388:	f06f 0003 	mvn.w	r0, #3
 800038c:	f000 fc01 	bl	8000b92 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	f06f 0001 	mvn.w	r0, #1
 8000398:	f000 fbfb 	bl	8000b92 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2100      	movs	r1, #0
 80003a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 fbf5 	bl	8000b92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000

080003b4 <dis7seg_init>:
/* USER CODE BEGIN 0 */



void dis7seg_init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	; 0x28
 80003b8:	af00      	add	r7, sp, #0
  // initialize GPIO
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ba:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <dis7seg_init+0xc4>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a2e      	ldr	r2, [pc, #184]	; (8000478 <dis7seg_init+0xc4>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <dis7seg_init+0xc4>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	613b      	str	r3, [r7, #16]
 80003d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b29      	ldr	r3, [pc, #164]	; (8000478 <dis7seg_init+0xc4>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a28      	ldr	r2, [pc, #160]	; (8000478 <dis7seg_init+0xc4>)
 80003d8:	f043 0302 	orr.w	r3, r3, #2
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b26      	ldr	r3, [pc, #152]	; (8000478 <dis7seg_init+0xc4>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0302 	and.w	r3, r3, #2
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <dis7seg_init+0xc4>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a22      	ldr	r2, [pc, #136]	; (8000478 <dis7seg_init+0xc4>)
 80003f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b20      	ldr	r3, [pc, #128]	; (8000478 <dis7seg_init+0xc4>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000402:	f000 fe2b 	bl	800105c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <dis7seg_init+0xc4>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <dis7seg_init+0xc4>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <dis7seg_init+0xc4>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	213c      	movs	r1, #60	; 0x3c
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <dis7seg_init+0xc8>)
 8000424:	f000 fd9e 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8000428:	2200      	movs	r2, #0
 800042a:	f240 217f 	movw	r1, #639	; 0x27f
 800042e:	4814      	ldr	r0, [pc, #80]	; (8000480 <dis7seg_init+0xcc>)
 8000430:	f000 fd98 	bl	8000f64 <HAL_GPIO_WritePin>
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin DIG3_Pin DIG4_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin;
 8000434:	233c      	movs	r3, #60	; 0x3c
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	4619      	mov	r1, r3
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <dis7seg_init+0xc8>)
 800044c:	f000 fbf4 	bl	8000c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8000450:	f240 237f 	movw	r3, #639	; 0x27f
 8000454:	617b      	str	r3, [r7, #20]
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2300      	movs	r3, #0
 8000460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <dis7seg_init+0xcc>)
 800046a:	f000 fbe5 	bl	8000c38 <HAL_GPIO_Init>
}
 800046e:	bf00      	nop
 8000470:	3728      	adds	r7, #40	; 0x28
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	48000400 	.word	0x48000400
 8000480:	48001800 	.word	0x48001800

08000484 <dis7seg_displayHHMM>:


uint8_t dis7seg_displayHHMM(uint16_t HH, uint16_t MM, uint16_t peak)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
 800048e:	460b      	mov	r3, r1
 8000490:	80bb      	strh	r3, [r7, #4]
 8000492:	4613      	mov	r3, r2
 8000494:	807b      	strh	r3, [r7, #2]
	//Display HH
	// 1 number
	display[2] = segments[HH - (HH/10) * 10];
 8000496:	88fa      	ldrh	r2, [r7, #6]
 8000498:	88fb      	ldrh	r3, [r7, #6]
 800049a:	4932      	ldr	r1, [pc, #200]	; (8000564 <dis7seg_displayHHMM+0xe0>)
 800049c:	fba1 1303 	umull	r1, r3, r1, r3
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	4619      	mov	r1, r3
 80004a6:	f06f 0309 	mvn.w	r3, #9
 80004aa:	fb01 f303 	mul.w	r3, r1, r3
 80004ae:	4413      	add	r3, r2
 80004b0:	4a2d      	ldr	r2, [pc, #180]	; (8000568 <dis7seg_displayHHMM+0xe4>)
 80004b2:	5cd3      	ldrb	r3, [r2, r3]
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	4b2d      	ldr	r3, [pc, #180]	; (800056c <dis7seg_displayHHMM+0xe8>)
 80004b8:	809a      	strh	r2, [r3, #4]
	// 2 number
	display[3] = segments[HH / 10];
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	4a29      	ldr	r2, [pc, #164]	; (8000564 <dis7seg_displayHHMM+0xe0>)
 80004be:	fba2 2303 	umull	r2, r3, r2, r3
 80004c2:	08db      	lsrs	r3, r3, #3
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <dis7seg_displayHHMM+0xe4>)
 80004ca:	5c9b      	ldrb	r3, [r3, r2]
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	4b27      	ldr	r3, [pc, #156]	; (800056c <dis7seg_displayHHMM+0xe8>)
 80004d0:	80da      	strh	r2, [r3, #6]

	display[2] |= SEG_DP_Pin;
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <dis7seg_displayHHMM+0xe8>)
 80004d4:	889b      	ldrh	r3, [r3, #4]
 80004d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004da:	b29a      	uxth	r2, r3
 80004dc:	4b23      	ldr	r3, [pc, #140]	; (800056c <dis7seg_displayHHMM+0xe8>)
 80004de:	809a      	strh	r2, [r3, #4]

	//Display MM
	// 1 number
	if (peak == 1)
 80004e0:	887b      	ldrh	r3, [r7, #2]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d115      	bne.n	8000512 <dis7seg_displayHHMM+0x8e>
	{
		display[0] = segments[MM - (MM/10) * 10] | SEG_DP_Pin;
 80004e6:	88ba      	ldrh	r2, [r7, #4]
 80004e8:	88bb      	ldrh	r3, [r7, #4]
 80004ea:	491e      	ldr	r1, [pc, #120]	; (8000564 <dis7seg_displayHHMM+0xe0>)
 80004ec:	fba1 1303 	umull	r1, r3, r1, r3
 80004f0:	08db      	lsrs	r3, r3, #3
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	f06f 0309 	mvn.w	r3, #9
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	4413      	add	r3, r2
 8000500:	4a19      	ldr	r2, [pc, #100]	; (8000568 <dis7seg_displayHHMM+0xe4>)
 8000502:	5cd3      	ldrb	r3, [r2, r3]
 8000504:	b21b      	sxth	r3, r3
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	b21b      	sxth	r3, r3
 800050c:	b29a      	uxth	r2, r3
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <dis7seg_displayHHMM+0xe8>)
 8000510:	801a      	strh	r2, [r3, #0]
	}
	if (peak == 0)
 8000512:	887b      	ldrh	r3, [r7, #2]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d111      	bne.n	800053c <dis7seg_displayHHMM+0xb8>
	{
		display[0] = segments[MM - (MM/10) * 10];
 8000518:	88ba      	ldrh	r2, [r7, #4]
 800051a:	88bb      	ldrh	r3, [r7, #4]
 800051c:	4911      	ldr	r1, [pc, #68]	; (8000564 <dis7seg_displayHHMM+0xe0>)
 800051e:	fba1 1303 	umull	r1, r3, r1, r3
 8000522:	08db      	lsrs	r3, r3, #3
 8000524:	b29b      	uxth	r3, r3
 8000526:	4619      	mov	r1, r3
 8000528:	f06f 0309 	mvn.w	r3, #9
 800052c:	fb01 f303 	mul.w	r3, r1, r3
 8000530:	4413      	add	r3, r2
 8000532:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <dis7seg_displayHHMM+0xe4>)
 8000534:	5cd3      	ldrb	r3, [r2, r3]
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <dis7seg_displayHHMM+0xe8>)
 800053a:	801a      	strh	r2, [r3, #0]
	}
	// 2 number
	display[1] = segments[MM / 10];
 800053c:	88bb      	ldrh	r3, [r7, #4]
 800053e:	4a09      	ldr	r2, [pc, #36]	; (8000564 <dis7seg_displayHHMM+0xe0>)
 8000540:	fba2 2303 	umull	r2, r3, r2, r3
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	b29b      	uxth	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <dis7seg_displayHHMM+0xe4>)
 800054c:	5c9b      	ldrb	r3, [r3, r2]
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <dis7seg_displayHHMM+0xe8>)
 8000552:	805a      	strh	r2, [r3, #2]

	return 0;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	cccccccd 	.word	0xcccccccd
 8000568:	08001ca8 	.word	0x08001ca8
 800056c:	20000028 	.word	0x20000028

08000570 <dis7seg_displayMMSS>:

uint8_t dis7seg_displayMMSS(uint16_t MM, uint16_t SS)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]
	//Display MM
	// 1 number
	display[2] = segments[MM - (MM/10) * 10]  | SEG_DP_Pin;
 8000580:	88fa      	ldrh	r2, [r7, #6]
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	4922      	ldr	r1, [pc, #136]	; (8000610 <dis7seg_displayMMSS+0xa0>)
 8000586:	fba1 1303 	umull	r1, r3, r1, r3
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	b29b      	uxth	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	f06f 0309 	mvn.w	r3, #9
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	4413      	add	r3, r2
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <dis7seg_displayMMSS+0xa4>)
 800059c:	5cd3      	ldrb	r3, [r2, r3]
 800059e:	b21b      	sxth	r3, r3
 80005a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <dis7seg_displayMMSS+0xa8>)
 80005aa:	809a      	strh	r2, [r3, #4]
	// 2 number
	display[3] = segments[MM / 10];
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <dis7seg_displayMMSS+0xa0>)
 80005b0:	fba2 2303 	umull	r2, r3, r2, r3
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <dis7seg_displayMMSS+0xa4>)
 80005bc:	5c9b      	ldrb	r3, [r3, r2]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <dis7seg_displayMMSS+0xa8>)
 80005c2:	80da      	strh	r2, [r3, #6]

	//Display SS
	// 1 number
	display[0] = segments[SS - (SS/10) * 10];
 80005c4:	88ba      	ldrh	r2, [r7, #4]
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	4911      	ldr	r1, [pc, #68]	; (8000610 <dis7seg_displayMMSS+0xa0>)
 80005ca:	fba1 1303 	umull	r1, r3, r1, r3
 80005ce:	08db      	lsrs	r3, r3, #3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	f06f 0309 	mvn.w	r3, #9
 80005d8:	fb01 f303 	mul.w	r3, r1, r3
 80005dc:	4413      	add	r3, r2
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <dis7seg_displayMMSS+0xa4>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <dis7seg_displayMMSS+0xa8>)
 80005e6:	801a      	strh	r2, [r3, #0]
	// 2 number
	display[1] = segments[SS / 10];
 80005e8:	88bb      	ldrh	r3, [r7, #4]
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <dis7seg_displayMMSS+0xa0>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <dis7seg_displayMMSS+0xa4>)
 80005f8:	5c9b      	ldrb	r3, [r3, r2]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <dis7seg_displayMMSS+0xa8>)
 80005fe:	805a      	strh	r2, [r3, #2]

	return 0;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	cccccccd 	.word	0xcccccccd
 8000614:	08001ca8 	.word	0x08001ca8
 8000618:	20000028 	.word	0x20000028

0800061c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000670:	f000 f9b8 	bl	80009e4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000674:	f000 fad2 	bl	8000c1c <HAL_SYSTICK_IRQHandler>
	dis7seg_init();
 8000678:	f7ff fe9c 	bl	80003b4 <dis7seg_init>
	static uint16_t peakSS = 0;
	static uint16_t x=0;
	static uint8_t dig = 0;
	static uint16_t podtrzymanie = 0;

	if(++interrupt == 1000)
 800067c:	4b86      	ldr	r3, [pc, #536]	; (8000898 <SysTick_Handler+0x22c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b84      	ldr	r3, [pc, #528]	; (8000898 <SysTick_Handler+0x22c>)
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	4b83      	ldr	r3, [pc, #524]	; (8000898 <SysTick_Handler+0x22c>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000690:	d168      	bne.n	8000764 <SysTick_Handler+0xf8>
	{
		interrupt = 0;
 8000692:	4b81      	ldr	r3, [pc, #516]	; (8000898 <SysTick_Handler+0x22c>)
 8000694:	2200      	movs	r2, #0
 8000696:	801a      	strh	r2, [r3, #0]
		if (JOY_OK_DOWN && mode == 1)
 8000698:	4b80      	ldr	r3, [pc, #512]	; (800089c <SysTick_Handler+0x230>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	43db      	mvns	r3, r3
 800069e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d007      	beq.n	80006b6 <SysTick_Handler+0x4a>
 80006a6:	4b7e      	ldr	r3, [pc, #504]	; (80008a0 <SysTick_Handler+0x234>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d103      	bne.n	80006b6 <SysTick_Handler+0x4a>
			{
				mode = 0;
 80006ae:	4b7c      	ldr	r3, [pc, #496]	; (80008a0 <SysTick_Handler+0x234>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	801a      	strh	r2, [r3, #0]
 80006b4:	e00d      	b.n	80006d2 <SysTick_Handler+0x66>
			}
			else if (JOY_OK_DOWN && mode == 0)
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <SysTick_Handler+0x230>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d006      	beq.n	80006d2 <SysTick_Handler+0x66>
 80006c4:	4b76      	ldr	r3, [pc, #472]	; (80008a0 <SysTick_Handler+0x234>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <SysTick_Handler+0x66>
			{
				mode = 1;
 80006cc:	4b74      	ldr	r3, [pc, #464]	; (80008a0 <SysTick_Handler+0x234>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	801a      	strh	r2, [r3, #0]
			}

		if (mode == 0)
 80006d2:	4b73      	ldr	r3, [pc, #460]	; (80008a0 <SysTick_Handler+0x234>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d107      	bne.n	80006ea <SysTick_Handler+0x7e>
		{
			dis7seg_displayMMSS(mm, ss);
 80006da:	4b72      	ldr	r3, [pc, #456]	; (80008a4 <SysTick_Handler+0x238>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	4a72      	ldr	r2, [pc, #456]	; (80008a8 <SysTick_Handler+0x23c>)
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff43 	bl	8000570 <dis7seg_displayMMSS>
		}
		if (mode == 1)
 80006ea:	4b6d      	ldr	r3, [pc, #436]	; (80008a0 <SysTick_Handler+0x234>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d108      	bne.n	8000704 <SysTick_Handler+0x98>
		{
			dis7seg_displayHHMM(hh, mm, peakSS);
 80006f2:	4b6e      	ldr	r3, [pc, #440]	; (80008ac <SysTick_Handler+0x240>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4a6b      	ldr	r2, [pc, #428]	; (80008a4 <SysTick_Handler+0x238>)
 80006f8:	8811      	ldrh	r1, [r2, #0]
 80006fa:	4a6d      	ldr	r2, [pc, #436]	; (80008b0 <SysTick_Handler+0x244>)
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fec0 	bl	8000484 <dis7seg_displayHHMM>
		}

		ss++;
 8000704:	4b68      	ldr	r3, [pc, #416]	; (80008a8 <SysTick_Handler+0x23c>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <SysTick_Handler+0x23c>)
 800070e:	801a      	strh	r2, [r3, #0]
		peakSS = ss % 2;
 8000710:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <SysTick_Handler+0x23c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	b29a      	uxth	r2, r3
 800071a:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <SysTick_Handler+0x244>)
 800071c:	801a      	strh	r2, [r3, #0]

		if (ss == 60)
 800071e:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <SysTick_Handler+0x23c>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	2b3c      	cmp	r3, #60	; 0x3c
 8000724:	d108      	bne.n	8000738 <SysTick_Handler+0xcc>
		{
			ss = 0;
 8000726:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <SysTick_Handler+0x23c>)
 8000728:	2200      	movs	r2, #0
 800072a:	801a      	strh	r2, [r3, #0]
			mm++;
 800072c:	4b5d      	ldr	r3, [pc, #372]	; (80008a4 <SysTick_Handler+0x238>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b5b      	ldr	r3, [pc, #364]	; (80008a4 <SysTick_Handler+0x238>)
 8000736:	801a      	strh	r2, [r3, #0]
		}
		if (mm == 60)
 8000738:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <SysTick_Handler+0x238>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b3c      	cmp	r3, #60	; 0x3c
 800073e:	d108      	bne.n	8000752 <SysTick_Handler+0xe6>
		{
			mm = 0;
 8000740:	4b58      	ldr	r3, [pc, #352]	; (80008a4 <SysTick_Handler+0x238>)
 8000742:	2200      	movs	r2, #0
 8000744:	801a      	strh	r2, [r3, #0]
			hh++;
 8000746:	4b59      	ldr	r3, [pc, #356]	; (80008ac <SysTick_Handler+0x240>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <SysTick_Handler+0x240>)
 8000750:	801a      	strh	r2, [r3, #0]
		}
		if (hh == 24)
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <SysTick_Handler+0x240>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	2b18      	cmp	r3, #24
 8000758:	f040 809b 	bne.w	8000892 <SysTick_Handler+0x226>
		{
			hh = 0;
 800075c:	4b53      	ldr	r3, [pc, #332]	; (80008ac <SysTick_Handler+0x240>)
 800075e:	2200      	movs	r2, #0
 8000760:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_MSK, GPIO_PIN_RESET);
			}
		}
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8000762:	e096      	b.n	8000892 <SysTick_Handler+0x226>
	else if(++x == 1)
 8000764:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <SysTick_Handler+0x248>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <SysTick_Handler+0x248>)
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <SysTick_Handler+0x248>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	f040 808c 	bne.w	8000892 <SysTick_Handler+0x226>
		if (freq == 1)
 800077a:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <SysTick_Handler+0x24c>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d12d      	bne.n	80007de <SysTick_Handler+0x172>
			x=0;
 8000782:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <SysTick_Handler+0x248>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG_MSK, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	213c      	movs	r1, #60	; 0x3c
 800078c:	484b      	ldr	r0, [pc, #300]	; (80008bc <SysTick_Handler+0x250>)
 800078e:	f000 fbe9 	bl	8000f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_MSK, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f240 21ff 	movw	r1, #767	; 0x2ff
 8000798:	4849      	ldr	r0, [pc, #292]	; (80008c0 <SysTick_Handler+0x254>)
 800079a:	f000 fbe3 	bl	8000f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_A_GPIO_Port, display[dig], GPIO_PIN_SET);
 800079e:	4b49      	ldr	r3, [pc, #292]	; (80008c4 <SysTick_Handler+0x258>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <SysTick_Handler+0x25c>)
 80007a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	4844      	ldr	r0, [pc, #272]	; (80008c0 <SysTick_Handler+0x254>)
 80007b0:	f000 fbd8 	bl	8000f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG1_GPIO_Port, digits[dig], GPIO_PIN_SET);
 80007b4:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <SysTick_Handler+0x258>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <SysTick_Handler+0x260>)
 80007bc:	5c9b      	ldrb	r3, [r3, r2]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	483d      	ldr	r0, [pc, #244]	; (80008bc <SysTick_Handler+0x250>)
 80007c6:	f000 fbcd 	bl	8000f64 <HAL_GPIO_WritePin>
			dig = (dig + 1) & 3;
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <SysTick_Handler+0x258>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <SysTick_Handler+0x258>)
 80007da:	701a      	strb	r2, [r3, #0]
}
 80007dc:	e059      	b.n	8000892 <SysTick_Handler+0x226>
			x = 0;
 80007de:	4b35      	ldr	r3, [pc, #212]	; (80008b4 <SysTick_Handler+0x248>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	801a      	strh	r2, [r3, #0]
			if (++podtrzymanie <= freq)
 80007e4:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <SysTick_Handler+0x264>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <SysTick_Handler+0x264>)
 80007ee:	801a      	strh	r2, [r3, #0]
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <SysTick_Handler+0x264>)
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <SysTick_Handler+0x24c>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d816      	bhi.n	800082a <SysTick_Handler+0x1be>
				HAL_GPIO_WritePin(SEG_A_GPIO_Port, display[dig], GPIO_PIN_SET);
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <SysTick_Handler+0x258>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <SysTick_Handler+0x25c>)
 8000804:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000808:	2201      	movs	r2, #1
 800080a:	4619      	mov	r1, r3
 800080c:	482c      	ldr	r0, [pc, #176]	; (80008c0 <SysTick_Handler+0x254>)
 800080e:	f000 fba9 	bl	8000f64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIG1_GPIO_Port, digits[dig], GPIO_PIN_SET);
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <SysTick_Handler+0x258>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <SysTick_Handler+0x260>)
 800081a:	5c9b      	ldrb	r3, [r3, r2]
 800081c:	b29b      	uxth	r3, r3
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	4826      	ldr	r0, [pc, #152]	; (80008bc <SysTick_Handler+0x250>)
 8000824:	f000 fb9e 	bl	8000f64 <HAL_GPIO_WritePin>
}
 8000828:	e033      	b.n	8000892 <SysTick_Handler+0x226>
			else if (freq < ++podtrzymanie <= freq*2)
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <SysTick_Handler+0x264>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <SysTick_Handler+0x264>)
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <SysTick_Handler+0x264>)
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <SysTick_Handler+0x24c>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	bf8c      	ite	hi
 8000842:	2301      	movhi	r3, #1
 8000844:	2300      	movls	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <SysTick_Handler+0x24c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	429a      	cmp	r2, r3
 8000852:	dc1e      	bgt.n	8000892 <SysTick_Handler+0x226>
				if (podtrzymanie == freq*2)
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <SysTick_Handler+0x264>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <SysTick_Handler+0x24c>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	429a      	cmp	r2, r3
 8000862:	d10b      	bne.n	800087c <SysTick_Handler+0x210>
					podtrzymanie = 0;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <SysTick_Handler+0x264>)
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
					dig = (dig + 1) & 3;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <SysTick_Handler+0x258>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 0303 	and.w	r3, r3, #3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <SysTick_Handler+0x258>)
 800087a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG_MSK, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	213c      	movs	r1, #60	; 0x3c
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <SysTick_Handler+0x250>)
 8000882:	f000 fb6f 	bl	8000f64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_MSK, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f240 21ff 	movw	r1, #767	; 0x2ff
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <SysTick_Handler+0x254>)
 800088e:	f000 fb69 	bl	8000f64 <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000030 	.word	0x20000030
 800089c:	48001000 	.word	0x48001000
 80008a0:	20000032 	.word	0x20000032
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000002 	.word	0x20000002
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20000034 	.word	0x20000034
 80008b4:	20000036 	.word	0x20000036
 80008b8:	20000006 	.word	0x20000006
 80008bc:	48000400 	.word	0x48000400
 80008c0:	48001800 	.word	0x48001800
 80008c4:	20000038 	.word	0x20000038
 80008c8:	20000028 	.word	0x20000028
 80008cc:	08001cb4 	.word	0x08001cb4
 80008d0:	2000003a 	.word	0x2000003a

080008d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <SystemInit+0x64>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <SystemInit+0x64>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <SystemInit+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <SystemInit+0x68>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <SystemInit+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <SystemInit+0x68>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <SystemInit+0x68>)
 8000900:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000904:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000908:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <SystemInit+0x68>)
 800090c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000910:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <SystemInit+0x68>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <SystemInit+0x68>)
 8000918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <SystemInit+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SystemInit+0x64>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	609a      	str	r2, [r3, #8]
#endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00
 800093c:	40021000 	.word	0x40021000

08000940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000944:	f7ff ffc6 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	; (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f001 f961 	bl	8001c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000972:	f7ff fc5f 	bl	8000234 <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000978:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000984:	08001d00 	.word	0x08001d00
  ldr r2, =_sbss
 8000988:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800098c:	20000040 	.word	0x20000040

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>

08000992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000996:	2003      	movs	r0, #3
 8000998:	f000 f8f0 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f805 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff fcb9 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	bd80      	pop	{r7, pc}

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_InitTick+0x30>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <HAL_InitTick+0x34>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	099b      	lsrs	r3, r3, #6
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f902 	bl	8000bca <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ce:	f000 f8e0 	bl	8000b92 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000008 	.word	0x20000008
 80009e0:	10624dd3 	.word	0x10624dd3

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick++;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_IncTick+0x18>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_IncTick+0x18>)
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	2000003c 	.word	0x2000003c

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000003c 	.word	0x2000003c

08000a18 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da0b      	bge.n	8000aa8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <NVIC_SetPriority+0x4c>)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	3b04      	subs	r3, #4
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa6:	e009      	b.n	8000abc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <NVIC_SetPriority+0x50>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff47 	bl	8000a18 <NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff5c 	bl	8000a60 <NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff8e 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffb0 	bl	8000b38 <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d106      	bne.n	8000c00 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bfe:	e005      	b.n	8000c0c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c06:	f023 0304 	bic.w	r3, r3, #4
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c20:	f000 f802 	bl	8000c28 <HAL_SYSTICK_Callback>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c4e:	e166      	b.n	8000f1e <HAL_GPIO_Init+0x2e6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8158 	beq.w	8000f18 <HAL_GPIO_Init+0x2e0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x40>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b12      	cmp	r3, #18
 8000c76:	d123      	bne.n	8000cc0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	691a      	ldr	r2, [r3, #16]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	6939      	ldr	r1, [r7, #16]
 8000cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0203 	and.w	r2, r3, #3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00b      	beq.n	8000d14 <HAL_GPIO_Init+0xdc>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	2b11      	cmp	r3, #17
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80b2 	beq.w	8000f18 <HAL_GPIO_Init+0x2e0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db8:	4a60      	ldr	r2, [pc, #384]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <HAL_GPIO_Init+0x304>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dcc:	4a5c      	ldr	r2, [pc, #368]	; (8000f40 <HAL_GPIO_Init+0x308>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df6:	d02b      	beq.n	8000e50 <HAL_GPIO_Init+0x218>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d025      	beq.n	8000e4c <HAL_GPIO_Init+0x214>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a51      	ldr	r2, [pc, #324]	; (8000f48 <HAL_GPIO_Init+0x310>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d01f      	beq.n	8000e48 <HAL_GPIO_Init+0x210>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a50      	ldr	r2, [pc, #320]	; (8000f4c <HAL_GPIO_Init+0x314>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d019      	beq.n	8000e44 <HAL_GPIO_Init+0x20c>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a4f      	ldr	r2, [pc, #316]	; (8000f50 <HAL_GPIO_Init+0x318>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d013      	beq.n	8000e40 <HAL_GPIO_Init+0x208>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <HAL_GPIO_Init+0x31c>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d00d      	beq.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4d      	ldr	r2, [pc, #308]	; (8000f58 <HAL_GPIO_Init+0x320>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d007      	beq.n	8000e38 <HAL_GPIO_Init+0x200>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a4c      	ldr	r2, [pc, #304]	; (8000f5c <HAL_GPIO_Init+0x324>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d101      	bne.n	8000e34 <HAL_GPIO_Init+0x1fc>
 8000e30:	2307      	movs	r3, #7
 8000e32:	e00e      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e34:	2308      	movs	r3, #8
 8000e36:	e00c      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e38:	2306      	movs	r3, #6
 8000e3a:	e00a      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	e008      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e40:	2304      	movs	r3, #4
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e50:	2300      	movs	r3, #0
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e62:	4937      	ldr	r1, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x308>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e94:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ebe:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee8:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f ae91 	bne.w	8000c50 <HAL_GPIO_Init+0x18>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	48001000 	.word	0x48001000
 8000f54:	48001400 	.word	0x48001400
 8000f58:	48001800 	.word	0x48001800
 8000f5c:	48001c00 	.word	0x48001c00
 8000f60:	40010400 	.word	0x40010400

08000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
 8000f70:	4613      	mov	r3, r2
 8000f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_PWREx_GetVoltageRange+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40007000 	.word	0x40007000

08000fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc2:	d12f      	bne.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd0:	d037      	beq.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe0:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	0c9b      	lsrs	r3, r3, #18
 8000fee:	2232      	movs	r2, #50	; 0x32
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000ff6:	e002      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x62>
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001010:	d0f2      	beq.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101e:	d110      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e00f      	b.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800102c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001030:	d007      	beq.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001040:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}  
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40007000 	.word	0x40007000
 8001054:	20000008 	.word	0x20000008
 8001058:	431bde83 	.word	0x431bde83

0800105c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply. 
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present. 
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	6053      	str	r3, [r2, #4]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40007000 	.word	0x40007000

0800107c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80d0 	beq.w	8001236 <HAL_RCC_OscConfig+0x1ba>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001096:	4b9b      	ldr	r3, [pc, #620]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d179      	bne.n	8001196 <HAL_RCC_OscConfig+0x11a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a2:	4b98      	ldr	r3, [pc, #608]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x3e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x3e>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e37f      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1a      	ldr	r2, [r3, #32]
 80010be:	4b91      	ldr	r3, [pc, #580]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_RCC_OscConfig+0x58>
 80010ca:	4b8e      	ldr	r3, [pc, #568]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d2:	e005      	b.n	80010e0 <HAL_RCC_OscConfig+0x64>
 80010d4:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d223      	bcs.n	800112c <HAL_RCC_OscConfig+0xb0>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fd41 	bl	8001b70 <RCC_SetFlashLatencyFromMSIRange>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e360      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f8:	4b82      	ldr	r3, [pc, #520]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a81      	ldr	r2, [pc, #516]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	497c      	ldr	r1, [pc, #496]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001116:	4b7b      	ldr	r3, [pc, #492]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	4977      	ldr	r1, [pc, #476]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
 800112a:	e022      	b.n	8001172 <HAL_RCC_OscConfig+0xf6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800112c:	4b75      	ldr	r3, [pc, #468]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a74      	ldr	r2, [pc, #464]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b72      	ldr	r3, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	496f      	ldr	r1, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114a:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	496a      	ldr	r1, [pc, #424]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fd04 	bl	8001b70 <RCC_SetFlashLatencyFromMSIRange>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e323      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001172:	f000 fc41 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8001176:	4602      	mov	r2, r0
 8001178:	4b62      	ldr	r3, [pc, #392]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	4961      	ldr	r1, [pc, #388]	; (8001308 <HAL_RCC_OscConfig+0x28c>)
 8001184:	5ccb      	ldrb	r3, [r1, r3]
 8001186:	fa22 f303 	lsr.w	r3, r2, r3
 800118a:	4a60      	ldr	r2, [pc, #384]	; (800130c <HAL_RCC_OscConfig+0x290>)
 800118c:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fc0c 	bl	80009ac <HAL_InitTick>
 8001194:	e04f      	b.n	8001236 <HAL_RCC_OscConfig+0x1ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d032      	beq.n	8001204 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800119e:	4b59      	ldr	r3, [pc, #356]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fc29 	bl	8000a00 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc25 	bl	8000a00 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e2fa      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80011c4:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x136>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d0:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4946      	ldr	r1, [pc, #280]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4941      	ldr	r1, [pc, #260]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
 8001202:	e018      	b.n	8001236 <HAL_RCC_OscConfig+0x1ba>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a3e      	ldr	r2, [pc, #248]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001210:	f7ff fbf6 	bl	8000a00 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001218:	f7ff fbf2 	bl	8000a00 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e2c7      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x19c>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d07b      	beq.n	800133a <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b08      	cmp	r3, #8
 800124c:	d00b      	beq.n	8001266 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d111      	bne.n	800127e <HAL_RCC_OscConfig+0x202>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b03      	cmp	r3, #3
 8001264:	d10b      	bne.n	800127e <HAL_RCC_OscConfig+0x202>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d062      	beq.n	8001338 <HAL_RCC_OscConfig+0x2bc>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d15e      	bne.n	8001338 <HAL_RCC_OscConfig+0x2bc>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e29d      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x21a>
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 800128e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e01d      	b.n	80012d2 <HAL_RCC_OscConfig+0x256>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x23e>
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e00b      	b.n	80012d2 <HAL_RCC_OscConfig+0x256>
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d01a      	beq.n	8001310 <HAL_RCC_OscConfig+0x294>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff fb91 	bl	8000a00 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff fb8d 	bl	8000a00 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e262      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_RCC_OscConfig+0x288>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x266>
 8001300:	e01b      	b.n	800133a <HAL_RCC_OscConfig+0x2be>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	08001cb8 	.word	0x08001cb8
 800130c:	20000008 	.word	0x20000008
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fb76 	bl	8000a00 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x2ae>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fb72 	bl	8000a00 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2ae>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e247      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800132a:	4ba4      	ldr	r3, [pc, #656]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x29c>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x2be>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d069      	beq.n	800141a <HAL_RCC_OscConfig+0x39e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001346:	4b9d      	ldr	r3, [pc, #628]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x2ee>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001352:	4b9a      	ldr	r3, [pc, #616]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x31c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800135e:	4b97      	ldr	r3, [pc, #604]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x31c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136a:	4b94      	ldr	r3, [pc, #592]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x306>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e21b      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b8e      	ldr	r3, [pc, #568]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	498a      	ldr	r1, [pc, #552]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001396:	e040      	b.n	800141a <HAL_RCC_OscConfig+0x39e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b86      	ldr	r3, [pc, #536]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a85      	ldr	r2, [pc, #532]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fb28 	bl	8000a00 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fb24 	bl	8000a00 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1f9      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013c6:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x338>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	061b      	lsls	r3, r3, #24
 80013e0:	4976      	ldr	r1, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
 80013e6:	e018      	b.n	800141a <HAL_RCC_OscConfig+0x39e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e8:	4b74      	ldr	r3, [pc, #464]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a73      	ldr	r2, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80013ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb04 	bl	8000a00 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fb00 	bl	8000a00 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e1d5      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800140e:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x424>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d01c      	beq.n	8001468 <HAL_RCC_OscConfig+0x3ec>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001434:	4a61      	ldr	r2, [pc, #388]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fadf 	bl	8000a00 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x3dc>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fadb 	bl	8000a00 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1b0      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0ef      	beq.n	8001446 <HAL_RCC_OscConfig+0x3ca>
 8001466:	e01b      	b.n	80014a0 <HAL_RCC_OscConfig+0x424>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001468:	4b54      	ldr	r3, [pc, #336]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146e:	4a53      	ldr	r2, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fac2 	bl	8000a00 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fabe 	bl	8000a00 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e193      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1ef      	bne.n	8001480 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a6 	beq.w	80015fa <HAL_RCC_OscConfig+0x57e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10d      	bne.n	80014da <HAL_RCC_OscConfig+0x45e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	4a3e      	ldr	r2, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x544>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x544>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <HAL_RCC_OscConfig+0x544>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fa85 	bl	8000a00 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x490>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fa81 	bl	8000a00 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e156      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <HAL_RCC_OscConfig+0x544>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x47e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <HAL_RCC_OscConfig+0x4b6>
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	4a25      	ldr	r2, [pc, #148]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001530:	e024      	b.n	800157c <HAL_RCC_OscConfig+0x500>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d110      	bne.n	800155c <HAL_RCC_OscConfig+0x4e0>
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800153c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155a:	e00f      	b.n	800157c <HAL_RCC_OscConfig+0x500>
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d016      	beq.n	80015b2 <HAL_RCC_OscConfig+0x536>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fa3c 	bl	8000a00 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_OscConfig+0x526>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff fa38 	bl	8000a00 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x526>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e10b      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_RCC_OscConfig+0x540>)
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ed      	beq.n	800158c <HAL_RCC_OscConfig+0x510>
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fa25 	bl	8000a00 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80015b8:	e00f      	b.n	80015da <HAL_RCC_OscConfig+0x55e>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fa1c 	bl	8000a00 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0ef      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ed      	bne.n	80015c4 <HAL_RCC_OscConfig+0x548>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x57e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b75      	ldr	r3, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a74      	ldr	r2, [pc, #464]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d03c      	beq.n	8001680 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01c      	beq.n	8001648 <HAL_RCC_OscConfig+0x5cc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001614:	4a6b      	ldr	r2, [pc, #428]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff f9ef 	bl	8000a00 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001626:	f7ff f9eb 	bl	8000a00 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0c0      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001638:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800163a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0ef      	beq.n	8001626 <HAL_RCC_OscConfig+0x5aa>
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800164a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800164e:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff f9d2 	bl	8000a00 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x5f6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001660:	f7ff f9ce 	bl	8000a00 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x5f6>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0a3      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ef      	bne.n	8001660 <HAL_RCC_OscConfig+0x5e4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8097 	beq.w	80017b8 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b0c      	cmp	r3, #12
 8001694:	f000 808e 	beq.w	80017b4 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	2b02      	cmp	r3, #2
 800169e:	d155      	bne.n	800174c <HAL_RCC_OscConfig+0x6d0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a47      	ldr	r2, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80016a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff f9a8 	bl	8000a00 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f9a4 	bl	8000a00 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e079      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x638>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	3b01      	subs	r3, #1
 80016d8:	011a      	lsls	r2, r3, #4
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	055b      	lsls	r3, r3, #21
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	065b      	lsls	r3, r3, #25
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001704:	06db      	lsls	r3, r3, #27
 8001706:	492f      	ldr	r1, [pc, #188]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff f96c 	bl	8000a00 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x6c2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f968 	bl	8000a00 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e03d      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x6b0>
 800174a:	e035      	b.n	80017b8 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x700>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x700>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 8001782:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff f938 	bl	8000a00 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f934 	bl	8000a00 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e009      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_RCC_OscConfig+0x748>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x718>
 80017b2:	e001      	b.n	80017b8 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d910      	bls.n	8001806 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 0207 	bic.w	r2, r3, #7
 80017ec:	497e      	ldr	r1, [pc, #504]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f4:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0ec      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001812:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4973      	ldr	r1, [pc, #460]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 808e 	beq.w	800194e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800183a:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d121      	bne.n	800188a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0ca      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001852:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d115      	bne.n	800188a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0be      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800186a:	4b60      	ldr	r3, [pc, #384]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0b2      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0aa      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4955      	ldr	r1, [pc, #340]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800189c:	f7ff f8b0 	bl	8000a00 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d112      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff f8a8 	bl	8000a00 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e08e      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80018c2:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d1ee      	bne.n	80018ac <HAL_RCC_ClockConfig+0xe4>
 80018ce:	e03e      	b.n	800194e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d112      	bne.n	80018fe <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018da:	f7ff f891 	bl	8000a00 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e077      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018f0:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_ClockConfig+0x112>
 80018fc:	e027      	b.n	800194e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d11d      	bne.n	8001942 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001906:	e00a      	b.n	800191e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff f87a 	bl	8000a00 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e060      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ee      	bne.n	8001908 <HAL_RCC_ClockConfig+0x140>
 800192a:	e010      	b.n	800194e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7ff f868 	bl	8000a00 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e04e      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b04      	cmp	r3, #4
 800194c:	d1ee      	bne.n	800192c <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d210      	bcs.n	800197e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 0207 	bic.w	r2, r3, #7
 8001964:	4920      	ldr	r1, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_ClockConfig+0x220>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e030      	b.n	80019e0 <HAL_RCC_ClockConfig+0x218>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	4915      	ldr	r1, [pc, #84]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019bc:	f000 f81c 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x224>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	4908      	ldr	r1, [pc, #32]	; (80019f0 <HAL_RCC_ClockConfig+0x228>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_RCC_ClockConfig+0x22c>)
 80019d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019d8:	2000      	movs	r0, #0
 80019da:	f7fe ffe7 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08001cb8 	.word	0x08001cb8
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	2302      	movs	r3, #2
 8001a10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d127      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d121      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e005      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a62:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x154>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d113      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001a7c:	e010      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e007      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a9e:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d146      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x142>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xda>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d00d      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0xf4>
 8001ad0:	e019      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x10e>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001adc:	68d2      	ldr	r2, [r2, #12]
 8001ade:	0a12      	lsrs	r2, r2, #8
 8001ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	613b      	str	r3, [r7, #16]
      break;
 8001aea:	e019      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x128>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001af6:	68d2      	ldr	r2, [r2, #12]
 8001af8:	0a12      	lsrs	r2, r2, #8
 8001afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	613b      	str	r3, [r7, #16]
      break;
 8001b04:	e00c      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x128>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	0a12      	lsrs	r2, r2, #8
 8001b14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	613b      	str	r3, [r7, #16]
      break;
 8001b1e:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0e5b      	lsrs	r3, r3, #25
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08001cc8 	.word	0x08001cc8
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff fa02 	bl	8000f94 <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
 8001b92:	e014      	b.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bac:	f7ff f9f2 	bl	8000f94 <HAL_PWREx_GetVoltageRange>
 8001bb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d10b      	bne.n	8001bde <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d919      	bls.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2ba0      	cmp	r3, #160	; 0xa0
 8001bd0:	d902      	bls.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e013      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	e010      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d902      	bls.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001be4:	2303      	movs	r3, #3
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	e00a      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d102      	bne.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e004      	b.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b70      	cmp	r3, #112	; 0x70
 8001bfa:	d101      	bne.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 0207 	bic.w	r2, r3, #7
 8001c08:	4909      	ldr	r1, [pc, #36]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40022000 	.word	0x40022000

08001c34 <__libc_init_array>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4d0d      	ldr	r5, [pc, #52]	; (8001c6c <__libc_init_array+0x38>)
 8001c38:	4c0d      	ldr	r4, [pc, #52]	; (8001c70 <__libc_init_array+0x3c>)
 8001c3a:	1b64      	subs	r4, r4, r5
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	2600      	movs	r6, #0
 8001c40:	42a6      	cmp	r6, r4
 8001c42:	d109      	bne.n	8001c58 <__libc_init_array+0x24>
 8001c44:	4d0b      	ldr	r5, [pc, #44]	; (8001c74 <__libc_init_array+0x40>)
 8001c46:	4c0c      	ldr	r4, [pc, #48]	; (8001c78 <__libc_init_array+0x44>)
 8001c48:	f000 f818 	bl	8001c7c <_init>
 8001c4c:	1b64      	subs	r4, r4, r5
 8001c4e:	10a4      	asrs	r4, r4, #2
 8001c50:	2600      	movs	r6, #0
 8001c52:	42a6      	cmp	r6, r4
 8001c54:	d105      	bne.n	8001c62 <__libc_init_array+0x2e>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5c:	4798      	blx	r3
 8001c5e:	3601      	adds	r6, #1
 8001c60:	e7ee      	b.n	8001c40 <__libc_init_array+0xc>
 8001c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c66:	4798      	blx	r3
 8001c68:	3601      	adds	r6, #1
 8001c6a:	e7f2      	b.n	8001c52 <__libc_init_array+0x1e>
 8001c6c:	08001cf8 	.word	0x08001cf8
 8001c70:	08001cf8 	.word	0x08001cf8
 8001c74:	08001cf8 	.word	0x08001cf8
 8001c78:	08001cfc 	.word	0x08001cfc

08001c7c <_init>:
 8001c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7e:	bf00      	nop
 8001c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c82:	bc08      	pop	{r3}
 8001c84:	469e      	mov	lr, r3
 8001c86:	4770      	bx	lr

08001c88 <_fini>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	bf00      	nop
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr
