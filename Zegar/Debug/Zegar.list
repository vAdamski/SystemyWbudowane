
Zegar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f5c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800218c  0800218c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800218c  0800218c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800218c  0800218c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000004  08002198  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002198  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009303  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172b  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b1e  00000000  00000000  0002be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba04  00000000  00000000  0005596e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe565  00000000  00000000  00061372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c0  00000000  00000000  0015f928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080020f0 	.word	0x080020f0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080020f0 	.word	0x080020f0

080001ec <dis7seg_init>:
TIM_HandleTypeDef htim2;

static void MX_TIM2_Init(void);
	
void dis7seg_init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
  // initialize GPIO
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f2:	4b3b      	ldr	r3, [pc, #236]	; (80002e0 <dis7seg_init+0xf4>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a3a      	ldr	r2, [pc, #232]	; (80002e0 <dis7seg_init+0xf4>)
 80001f8:	f043 0304 	orr.w	r3, r3, #4
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fe:	4b38      	ldr	r3, [pc, #224]	; (80002e0 <dis7seg_init+0xf4>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	f003 0304 	and.w	r3, r3, #4
 8000206:	613b      	str	r3, [r7, #16]
 8000208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <dis7seg_init+0xf4>)
 800020c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020e:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <dis7seg_init+0xf4>)
 8000210:	f043 0302 	orr.w	r3, r3, #2
 8000214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000216:	4b32      	ldr	r3, [pc, #200]	; (80002e0 <dis7seg_init+0xf4>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021a:	f003 0302 	and.w	r3, r3, #2
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000222:	4b2f      	ldr	r3, [pc, #188]	; (80002e0 <dis7seg_init+0xf4>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <dis7seg_init+0xf4>)
 8000228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800022e:	4b2c      	ldr	r3, [pc, #176]	; (80002e0 <dis7seg_init+0xf4>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000236:	60bb      	str	r3, [r7, #8]
 8000238:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800023a:	f000 fe75 	bl	8000f28 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <dis7seg_init+0xf4>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <dis7seg_init+0xf4>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <dis7seg_init+0xf4>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	f003 0301 	and.w	r3, r3, #1
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	213c      	movs	r1, #60	; 0x3c
 800025a:	4822      	ldr	r0, [pc, #136]	; (80002e4 <dis7seg_init+0xf8>)
 800025c:	f000 fde8 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin 
 8000260:	2200      	movs	r2, #0
 8000262:	f240 217f 	movw	r1, #639	; 0x27f
 8000266:	4820      	ldr	r0, [pc, #128]	; (80002e8 <dis7seg_init+0xfc>)
 8000268:	f000 fde2 	bl	8000e30 <HAL_GPIO_WritePin>
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin DIG3_Pin DIG4_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin;
 800026c:	233c      	movs	r3, #60	; 0x3c
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000270:	2301      	movs	r3, #1
 8000272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	4818      	ldr	r0, [pc, #96]	; (80002e4 <dis7seg_init+0xf8>)
 8000284:	f000 fc3e 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin 
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin 
 8000288:	f240 237f 	movw	r3, #639	; 0x27f
 800028c:	617b      	str	r3, [r7, #20]
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <dis7seg_init+0xfc>)
 80002a2:	f000 fc2f 	bl	8000b04 <HAL_GPIO_Init>
  
  // initialize TIM2  
  __HAL_RCC_TIM2_CLK_ENABLE();
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <dis7seg_init+0xf4>)
 80002a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <dis7seg_init+0xf4>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6593      	str	r3, [r2, #88]	; 0x58
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <dis7seg_init+0xf4>)
 80002b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
  MX_TIM2_Init();
 80002be:	f000 f8db 	bl	8000478 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80002c2:	480a      	ldr	r0, [pc, #40]	; (80002ec <dis7seg_init+0x100>)
 80002c4:	f001 fc51 	bl	8001b6a <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2100      	movs	r1, #0
 80002cc:	201c      	movs	r0, #28
 80002ce:	f000 fbb8 	bl	8000a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80002d2:	201c      	movs	r0, #28
 80002d4:	f000 fbd1 	bl	8000a7a <HAL_NVIC_EnableIRQ>
}
 80002d8:	bf00      	nop
 80002da:	3728      	adds	r7, #40	; 0x28
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000400 	.word	0x48000400
 80002e8:	48001800 	.word	0x48001800
 80002ec:	20000028 	.word	0x20000028

080002f0 <dis7seg_display>:

uint8_t dis7seg_display(uint16_t value)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
	if(value > 9999)
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000300:	4293      	cmp	r3, r2
 8000302:	d901      	bls.n	8000308 <dis7seg_display+0x18>
		return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e065      	b.n	80003d4 <dis7seg_display+0xe4>
	display[0] = segments[value % 10];
 8000308:	88fa      	ldrh	r2, [r7, #6]
 800030a:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <dis7seg_display+0xf0>)
 800030c:	fba3 1302 	umull	r1, r3, r3, r2
 8000310:	08d9      	lsrs	r1, r3, #3
 8000312:	460b      	mov	r3, r1
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	440b      	add	r3, r1
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	1ad3      	subs	r3, r2, r3
 800031c:	b29b      	uxth	r3, r3
 800031e:	461a      	mov	r2, r3
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <dis7seg_display+0xf4>)
 8000322:	5c9b      	ldrb	r3, [r3, r2]
 8000324:	b29a      	uxth	r2, r3
 8000326:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <dis7seg_display+0xf8>)
 8000328:	801a      	strh	r2, [r3, #0]
	value /= 10;
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	4a2c      	ldr	r2, [pc, #176]	; (80003e0 <dis7seg_display+0xf0>)
 800032e:	fba2 2303 	umull	r2, r3, r2, r3
 8000332:	08db      	lsrs	r3, r3, #3
 8000334:	80fb      	strh	r3, [r7, #6]
	display[1] = value ? segments[value % 10] : 0;
 8000336:	88fb      	ldrh	r3, [r7, #6]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d00f      	beq.n	800035c <dis7seg_display+0x6c>
 800033c:	88fa      	ldrh	r2, [r7, #6]
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <dis7seg_display+0xf0>)
 8000340:	fba3 1302 	umull	r1, r3, r3, r2
 8000344:	08d9      	lsrs	r1, r3, #3
 8000346:	460b      	mov	r3, r1
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	440b      	add	r3, r1
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	b29b      	uxth	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <dis7seg_display+0xf4>)
 8000356:	5c9b      	ldrb	r3, [r3, r2]
 8000358:	b29b      	uxth	r3, r3
 800035a:	e000      	b.n	800035e <dis7seg_display+0x6e>
 800035c:	2300      	movs	r3, #0
 800035e:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <dis7seg_display+0xf8>)
 8000360:	8053      	strh	r3, [r2, #2]
	value /= 10;
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <dis7seg_display+0xf0>)
 8000366:	fba2 2303 	umull	r2, r3, r2, r3
 800036a:	08db      	lsrs	r3, r3, #3
 800036c:	80fb      	strh	r3, [r7, #6]
	display[2] = value ? segments[value % 10] : 0;
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00f      	beq.n	8000394 <dis7seg_display+0xa4>
 8000374:	88fa      	ldrh	r2, [r7, #6]
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <dis7seg_display+0xf0>)
 8000378:	fba3 1302 	umull	r1, r3, r3, r2
 800037c:	08d9      	lsrs	r1, r3, #3
 800037e:	460b      	mov	r3, r1
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	440b      	add	r3, r1
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	b29b      	uxth	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <dis7seg_display+0xf4>)
 800038e:	5c9b      	ldrb	r3, [r3, r2]
 8000390:	b29b      	uxth	r3, r3
 8000392:	e000      	b.n	8000396 <dis7seg_display+0xa6>
 8000394:	2300      	movs	r3, #0
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <dis7seg_display+0xf8>)
 8000398:	8093      	strh	r3, [r2, #4]
	value /= 10;
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <dis7seg_display+0xf0>)
 800039e:	fba2 2303 	umull	r2, r3, r2, r3
 80003a2:	08db      	lsrs	r3, r3, #3
 80003a4:	80fb      	strh	r3, [r7, #6]
	display[3] = value ? segments[value % 10] : 0;	
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00f      	beq.n	80003cc <dis7seg_display+0xdc>
 80003ac:	88fa      	ldrh	r2, [r7, #6]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <dis7seg_display+0xf0>)
 80003b0:	fba3 1302 	umull	r1, r3, r3, r2
 80003b4:	08d9      	lsrs	r1, r3, #3
 80003b6:	460b      	mov	r3, r1
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	440b      	add	r3, r1
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <dis7seg_display+0xf4>)
 80003c6:	5c9b      	ldrb	r3, [r3, r2]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	e000      	b.n	80003ce <dis7seg_display+0xde>
 80003cc:	2300      	movs	r3, #0
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <dis7seg_display+0xf8>)
 80003d0:	80d3      	strh	r3, [r2, #6]
	return 0;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	cccccccd 	.word	0xcccccccd
 80003e4:	0800213c 	.word	0x0800213c
 80003e8:	20000020 	.word	0x20000020

080003ec <dis7seg_mpx>:
	display[fraction_digits] |= SEG_DP_Pin;
	return 0;
}

static inline void dis7seg_mpx(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	static uint8_t dig = 0;
	
	HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG_MSK, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	213c      	movs	r1, #60	; 0x3c
 80003f4:	4814      	ldr	r0, [pc, #80]	; (8000448 <dis7seg_mpx+0x5c>)
 80003f6:	f000 fd1b 	bl	8000e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_MSK, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f240 21ff 	movw	r1, #767	; 0x2ff
 8000400:	4812      	ldr	r0, [pc, #72]	; (800044c <dis7seg_mpx+0x60>)
 8000402:	f000 fd15 	bl	8000e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, display[dig], GPIO_PIN_SET);
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <dis7seg_mpx+0x64>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	461a      	mov	r2, r3
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <dis7seg_mpx+0x68>)
 800040e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000412:	2201      	movs	r2, #1
 8000414:	4619      	mov	r1, r3
 8000416:	480d      	ldr	r0, [pc, #52]	; (800044c <dis7seg_mpx+0x60>)
 8000418:	f000 fd0a 	bl	8000e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG1_GPIO_Port, digits[dig], GPIO_PIN_SET);		
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <dis7seg_mpx+0x64>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <dis7seg_mpx+0x6c>)
 8000424:	5c9b      	ldrb	r3, [r3, r2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	4806      	ldr	r0, [pc, #24]	; (8000448 <dis7seg_mpx+0x5c>)
 800042e:	f000 fcff 	bl	8000e30 <HAL_GPIO_WritePin>
	dig = (dig + 1) & 3;
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <dis7seg_mpx+0x64>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	3301      	adds	r3, #1
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <dis7seg_mpx+0x64>)
 8000442:	701a      	strb	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	48000400 	.word	0x48000400
 800044c:	48001800 	.word	0x48001800
 8000450:	20000064 	.word	0x20000064
 8000454:	20000020 	.word	0x20000020
 8000458:	08002148 	.word	0x08002148

0800045c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <TIM2_IRQHandler+0x18>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f06f 0201 	mvn.w	r2, #1
 8000468:	611a      	str	r2, [r3, #16]
	dis7seg_mpx();
 800046a:	f7ff ffbf 	bl	80003ec <dis7seg_mpx>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000028 	.word	0x20000028

08000478 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_TIM2_Init+0x90>)
 8000480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000484:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetHCLKFreq() / 400 / NDIGITS / 2 - 1;;
 8000486:	f001 facd 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 800048a:	4603      	mov	r3, r0
 800048c:	4a1f      	ldr	r2, [pc, #124]	; (800050c <MX_TIM2_Init+0x94>)
 800048e:	fba2 2303 	umull	r2, r3, r2, r3
 8000492:	0a9b      	lsrs	r3, r3, #10
 8000494:	3b01      	subs	r3, #1
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <MX_TIM2_Init+0x90>)
 8000498:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049a:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_TIM2_Init+0x90>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_TIM2_Init+0x90>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_TIM2_Init+0x90>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ac:	4816      	ldr	r0, [pc, #88]	; (8000508 <MX_TIM2_Init+0x90>)
 80004ae:	f001 fb27 	bl	8001b00 <HAL_TIM_Base_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d003      	beq.n	80004c0 <MX_TIM2_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004b8:	21a2      	movs	r1, #162	; 0xa2
 80004ba:	4815      	ldr	r0, [pc, #84]	; (8000510 <MX_TIM2_Init+0x98>)
 80004bc:	f000 f8a6 	bl	800060c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <MX_TIM2_Init+0x90>)
 80004ce:	f001 fb67 	bl	8001ba0 <HAL_TIM_ConfigClockSource>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d003      	beq.n	80004e0 <MX_TIM2_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004d8:	21a8      	movs	r1, #168	; 0xa8
 80004da:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_TIM2_Init+0x98>)
 80004dc:	f000 f896 	bl	800060c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_TIM2_Init+0x90>)
 80004ee:	f001 fd87 	bl	8002000 <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d003      	beq.n	8000500 <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004f8:	21af      	movs	r1, #175	; 0xaf
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_TIM2_Init+0x98>)
 80004fc:	f000 f886 	bl	800060c <_Error_Handler>
  }

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000028 	.word	0x20000028
 800050c:	51eb851f 	.word	0x51eb851f
 8000510:	08002108 	.word	0x08002108

08000514 <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 f95b 	bl	80007d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f814 	bl	8000548 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	
	// initialize KAMeLeon peripherals used in this project
	dis7seg_init();
 8000520:	f7ff fe64 	bl	80001ec <dis7seg_init>
  
  while (1)
  {
  /* USER CODE END WHILE */
	static uint32_t x=0;
	dis7seg_display(x);
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <main+0x30>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	b29b      	uxth	r3, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fee0 	bl	80002f0 <dis7seg_display>
	HAL_Delay(1000);
 8000530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000534:	f000 f990 	bl	8000858 <HAL_Delay>
	x++;
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <main+0x30>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a01      	ldr	r2, [pc, #4]	; (8000544 <main+0x30>)
 8000540:	6013      	str	r3, [r2, #0]
  {
 8000542:	e7ef      	b.n	8000524 <main+0x10>
 8000544:	20000068 	.word	0x20000068

08000548 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054e:	2310      	movs	r3, #16
 8000550:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055a:	2360      	movs	r3, #96	; 0x60
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000562:	2301      	movs	r3, #1
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800056a:	2328      	movs	r3, #40	; 0x28
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fce2 	bl	8000f48 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d003      	beq.n	8000592 <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800058a:	218a      	movs	r1, #138	; 0x8a
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <SystemClock_Config+0xbc>)
 800058e:	f000 f83d 	bl	800060c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2104      	movs	r1, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f872 	bl	8001694 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 80005b6:	2198      	movs	r1, #152	; 0x98
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <SystemClock_Config+0xbc>)
 80005ba:	f000 f827 	bl	800060c <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c2:	f000 fc5b 	bl	8000e7c <HAL_PWREx_ControlVoltageScaling>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d003      	beq.n	80005d4 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80005cc:	219f      	movs	r1, #159	; 0x9f
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <SystemClock_Config+0xbc>)
 80005d0:	f000 f81c 	bl	800060c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005d4:	f001 fa26 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <SystemClock_Config+0xc0>)
 80005dc:	fba2 2303 	umull	r2, r3, r2, r3
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fa57 	bl	8000a96 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005e8:	2004      	movs	r0, #4
 80005ea:	f000 fa61 	bl	8000ab0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f6:	f000 fa24 	bl	8000a42 <HAL_NVIC_SetPriority>
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	; 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	08002128 	.word	0x08002128
 8000608:	10624dd3 	.word	0x10624dd3

0800060c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000616:	e7fe      	b.n	8000616 <_Error_Handler+0xa>

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <HAL_MspInit+0x98>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <HAL_MspInit+0x98>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6613      	str	r3, [r2, #96]	; 0x60
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <HAL_MspInit+0x98>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <HAL_MspInit+0x98>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <HAL_MspInit+0x98>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_MspInit+0x98>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f9ec 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	f06f 000b 	mvn.w	r0, #11
 800065c:	f000 f9f1 	bl	8000a42 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	f06f 000a 	mvn.w	r0, #10
 8000668:	f000 f9eb 	bl	8000a42 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	f06f 0009 	mvn.w	r0, #9
 8000674:	f000 f9e5 	bl	8000a42 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	f06f 0004 	mvn.w	r0, #4
 8000680:	f000 f9df 	bl	8000a42 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	f06f 0003 	mvn.w	r0, #3
 800068c:	f000 f9d9 	bl	8000a42 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	f06f 0001 	mvn.w	r0, #1
 8000698:	f000 f9d3 	bl	8000a42 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006a4:	f000 f9cd 	bl	8000a42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f88c 	bl	8000824 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800070c:	f000 f9ec 	bl	8000ae8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <SystemInit+0x64>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <SystemInit+0x64>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <SystemInit+0x68>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <SystemInit+0x68>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <SystemInit+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <SystemInit+0x68>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <SystemInit+0x68>)
 8000740:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000744:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000748:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <SystemInit+0x68>)
 800074c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000750:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <SystemInit+0x68>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <SystemInit+0x68>)
 8000758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <SystemInit+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SystemInit+0x64>)
 8000766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800076a:	609a      	str	r2, [r3, #8]
#endif
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	40021000 	.word	0x40021000

08000780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff ffc6 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f001 fc7b 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b2:	f7ff feaf 	bl	8000514 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007c4:	08002194 	.word	0x08002194
  ldr r2, =_sbss
 80007c8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007cc:	20000070 	.word	0x20000070

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>

080007d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d6:	2003      	movs	r0, #3
 80007d8:	f000 f928 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 f805 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e2:	f7ff ff19 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_InitTick+0x30>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_InitTick+0x34>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	099b      	lsrs	r3, r3, #6
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f948 	bl	8000a96 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000806:	2200      	movs	r2, #0
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080e:	f000 f918 	bl	8000a42 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	10624dd3 	.word	0x10624dd3

08000824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick++;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_IncTick+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a03      	ldr	r2, [pc, #12]	; (800083c <HAL_IncTick+0x18>)
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	2000006c 	.word	0x2000006c

08000840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_GetTick+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2000006c 	.word	0x2000006c

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff ffee 	bl	8000840 <HAL_GetTick>
 8000864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000870:	d002      	beq.n	8000878 <HAL_Delay+0x20>
  {
    wait++;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000878:	bf00      	nop
 800087a:	f7ff ffe1 	bl	8000840 <HAL_GetTick>
 800087e:	4602      	mov	r2, r0
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	429a      	cmp	r2, r3
 8000888:	d8f7      	bhi.n	800087a <HAL_Delay+0x22>
  {
  }
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <NVIC_EnableIRQ+0x30>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	da0b      	bge.n	8000958 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <NVIC_SetPriority+0x4c>)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	3b04      	subs	r3, #4
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000956:	e009      	b.n	800096c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <NVIC_SetPriority+0x50>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00
 800097c:	e000e100 	.word	0xe000e100

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a0c:	f7ff ff8e 	bl	800092c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff2d 	bl	8000894 <NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff42 	bl	80008dc <NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff8e 	bl	8000980 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff35 	bl	80008f8 <NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d106      	bne.n	8000acc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000aca:	e005      	b.n	8000ad8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ad2:	f023 0304 	bic.w	r3, r3, #4
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000aec:	f000 f802 	bl	8000af4 <HAL_SYSTICK_Callback>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b1a:	e166      	b.n	8000dea <HAL_GPIO_Init+0x2e6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	2101      	movs	r1, #1
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 8158 	beq.w	8000de4 <HAL_GPIO_Init+0x2e0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x40>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b12      	cmp	r3, #18
 8000b42:	d123      	bne.n	8000b8c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	220f      	movs	r2, #15
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	08da      	lsrs	r2, r3, #3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3208      	adds	r2, #8
 8000b86:	6939      	ldr	r1, [r7, #16]
 8000b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0203 	and.w	r2, r3, #3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d00b      	beq.n	8000be0 <HAL_GPIO_Init+0xdc>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d007      	beq.n	8000be0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd4:	2b11      	cmp	r3, #17
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b12      	cmp	r3, #18
 8000bde:	d130      	bne.n	8000c42 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	f003 0201 	and.w	r2, r3, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 80b2 	beq.w	8000de4 <HAL_GPIO_Init+0x2e0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c80:	4b61      	ldr	r3, [pc, #388]	; (8000e08 <HAL_GPIO_Init+0x304>)
 8000c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c84:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <HAL_GPIO_Init+0x304>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8c:	4b5e      	ldr	r3, [pc, #376]	; (8000e08 <HAL_GPIO_Init+0x304>)
 8000c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c98:	4a5c      	ldr	r2, [pc, #368]	; (8000e0c <HAL_GPIO_Init+0x308>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cc2:	d02b      	beq.n	8000d1c <HAL_GPIO_Init+0x218>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <HAL_GPIO_Init+0x30c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d025      	beq.n	8000d18 <HAL_GPIO_Init+0x214>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <HAL_GPIO_Init+0x310>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d01f      	beq.n	8000d14 <HAL_GPIO_Init+0x210>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a50      	ldr	r2, [pc, #320]	; (8000e18 <HAL_GPIO_Init+0x314>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d019      	beq.n	8000d10 <HAL_GPIO_Init+0x20c>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <HAL_GPIO_Init+0x318>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d013      	beq.n	8000d0c <HAL_GPIO_Init+0x208>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <HAL_GPIO_Init+0x31c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x204>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x320>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x200>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x324>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1fc>
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	e00e      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d00:	2308      	movs	r3, #8
 8000d02:	e00c      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d04:	2306      	movs	r3, #6
 8000d06:	e00a      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d08:	2305      	movs	r3, #5
 8000d0a:	e008      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e004      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	f002 0203 	and.w	r2, r2, #3
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	4093      	lsls	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d2e:	4937      	ldr	r1, [pc, #220]	; (8000e0c <HAL_GPIO_Init+0x308>)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d60:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d8a:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f47f ae91 	bne.w	8000b1c <HAL_GPIO_Init+0x18>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000c00 	.word	0x48000c00
 8000e1c:	48001000 	.word	0x48001000
 8000e20:	48001400 	.word	0x48001400
 8000e24:	48001800 	.word	0x48001800
 8000e28:	48001c00 	.word	0x48001c00
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e40:	787b      	ldrb	r3, [r7, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40007000 	.word	0x40007000

08000e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e8e:	d12f      	bne.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e9c:	d037      	beq.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eac:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0c9b      	lsrs	r3, r3, #18
 8000eba:	2232      	movs	r2, #50	; 0x32
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000ec2:	e002      	b.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_PWREx_ControlVoltageScaling+0x62>
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000edc:	d0f2      	beq.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eea:	d110      	bne.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e00f      	b.n	8000f10 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efc:	d007      	beq.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}  
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83

08000f28 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply. 
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present. 
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6053      	str	r3, [r2, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40007000 	.word	0x40007000

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80d0 	beq.w	8001102 <HAL_RCC_OscConfig+0x1ba>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000f62:	4b9b      	ldr	r3, [pc, #620]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d179      	bne.n	8001062 <HAL_RCC_OscConfig+0x11a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f6e:	4b98      	ldr	r3, [pc, #608]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x3e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x3e>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e37f      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1a      	ldr	r2, [r3, #32]
 8000f8a:	4b91      	ldr	r3, [pc, #580]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x58>
 8000f96:	4b8e      	ldr	r3, [pc, #568]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f9e:	e005      	b.n	8000fac <HAL_RCC_OscConfig+0x64>
 8000fa0:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d223      	bcs.n	8000ff8 <HAL_RCC_OscConfig+0xb0>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fd41 	bl	8001a3c <RCC_SetFlashLatencyFromMSIRange>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e360      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc4:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a81      	ldr	r2, [pc, #516]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b7f      	ldr	r3, [pc, #508]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	497c      	ldr	r1, [pc, #496]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	4977      	ldr	r1, [pc, #476]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	604b      	str	r3, [r1, #4]
 8000ff6:	e022      	b.n	800103e <HAL_RCC_OscConfig+0xf6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff8:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a74      	ldr	r2, [pc, #464]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b72      	ldr	r3, [pc, #456]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	496f      	ldr	r1, [pc, #444]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001016:	4b6e      	ldr	r3, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	496a      	ldr	r1, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fd04 	bl	8001a3c <RCC_SetFlashLatencyFromMSIRange>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e323      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800103e:	f000 fc41 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001042:	4602      	mov	r2, r0
 8001044:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	4961      	ldr	r1, [pc, #388]	; (80011d4 <HAL_RCC_OscConfig+0x28c>)
 8001050:	5ccb      	ldrb	r3, [r1, r3]
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	4a60      	ldr	r2, [pc, #384]	; (80011d8 <HAL_RCC_OscConfig+0x290>)
 8001058:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fbc6 	bl	80007ec <HAL_InitTick>
 8001060:	e04f      	b.n	8001102 <HAL_RCC_OscConfig+0x1ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d032      	beq.n	80010d0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001076:	f7ff fbe3 	bl	8000840 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107e:	f7ff fbdf 	bl	8000840 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e2fa      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001090:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x136>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109c:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4946      	ldr	r1, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	4941      	ldr	r1, [pc, #260]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
 80010ce:	e018      	b.n	8001102 <HAL_RCC_OscConfig+0x1ba>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010d0:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a3e      	ldr	r2, [pc, #248]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbb0 	bl	8000840 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e4:	f7ff fbac 	bl	8000840 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e2c7      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x19c>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d07b      	beq.n	8001206 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d111      	bne.n	800114a <HAL_RCC_OscConfig+0x202>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b03      	cmp	r3, #3
 8001130:	d10b      	bne.n	800114a <HAL_RCC_OscConfig+0x202>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d062      	beq.n	8001204 <HAL_RCC_OscConfig+0x2bc>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d15e      	bne.n	8001204 <HAL_RCC_OscConfig+0x2bc>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e29d      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x21a>
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800115a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	e01d      	b.n	800119e <HAL_RCC_OscConfig+0x256>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x23e>
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0x256>
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01a      	beq.n	80011dc <HAL_RCC_OscConfig+0x294>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb4b 	bl	8000840 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb47 	bl	8000840 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b64      	cmp	r3, #100	; 0x64
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e262      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_RCC_OscConfig+0x288>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x266>
 80011cc:	e01b      	b.n	8001206 <HAL_RCC_OscConfig+0x2be>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	0800214c 	.word	0x0800214c
 80011d8:	20000000 	.word	0x20000000
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb30 	bl	8000840 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x2ae>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fb2c 	bl	8000840 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x2ae>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e247      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80011f6:	4ba4      	ldr	r3, [pc, #656]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x29c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x2be>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d069      	beq.n	80012e6 <HAL_RCC_OscConfig+0x39e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001212:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b04      	cmp	r3, #4
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x2ee>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121e:	4b9a      	ldr	r3, [pc, #616]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x31c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122a:	4b97      	ldr	r3, [pc, #604]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x31c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001236:	4b94      	ldr	r3, [pc, #592]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x306>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e21b      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	498a      	ldr	r1, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001262:	e040      	b.n	80012e6 <HAL_RCC_OscConfig+0x39e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d023      	beq.n	80012b4 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b86      	ldr	r3, [pc, #536]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a85      	ldr	r2, [pc, #532]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fae2 	bl	8000840 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fade 	bl	8000840 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1f9      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001292:	4b7d      	ldr	r3, [pc, #500]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x338>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	061b      	lsls	r3, r3, #24
 80012ac:	4976      	ldr	r1, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
 80012b2:	e018      	b.n	80012e6 <HAL_RCC_OscConfig+0x39e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b4:	4b74      	ldr	r3, [pc, #464]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a73      	ldr	r2, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80012ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fabe 	bl	8000840 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff faba 	bl	8000840 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1d5      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d03c      	beq.n	800136c <HAL_RCC_OscConfig+0x424>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01c      	beq.n	8001334 <HAL_RCC_OscConfig+0x3ec>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80012fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001300:	4a61      	ldr	r2, [pc, #388]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff fa99 	bl	8000840 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x3dc>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff fa95 	bl	8000840 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1b0      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0ef      	beq.n	8001312 <HAL_RCC_OscConfig+0x3ca>
 8001332:	e01b      	b.n	800136c <HAL_RCC_OscConfig+0x424>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133a:	4a53      	ldr	r2, [pc, #332]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fa7c 	bl	8000840 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fa78 	bl	8000840 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e193      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800135e:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ef      	bne.n	800134c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80a6 	beq.w	80014c6 <HAL_RCC_OscConfig+0x57e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <HAL_RCC_OscConfig+0x45e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_RCC_OscConfig+0x544>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <HAL_RCC_OscConfig+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a35      	ldr	r2, [pc, #212]	; (800148c <HAL_RCC_OscConfig+0x544>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013be:	f7ff fa3f 	bl	8000840 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x490>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fa3b 	bl	8000840 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e156      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_RCC_OscConfig+0x544>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x47e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_RCC_OscConfig+0x4b6>
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f2:	4a25      	ldr	r2, [pc, #148]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013fc:	e024      	b.n	8001448 <HAL_RCC_OscConfig+0x500>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d110      	bne.n	8001428 <HAL_RCC_OscConfig+0x4e0>
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140c:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141c:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001426:	e00f      	b.n	8001448 <HAL_RCC_OscConfig+0x500>
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800142a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142e:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d016      	beq.n	800147e <HAL_RCC_OscConfig+0x536>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff f9f6 	bl	8000840 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x526>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff f9f2 	bl	8000840 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x526>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e10b      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_RCC_OscConfig+0x540>)
 8001470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ed      	beq.n	8001458 <HAL_RCC_OscConfig+0x510>
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147e:	f7ff f9df 	bl	8000840 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001484:	e00f      	b.n	80014a6 <HAL_RCC_OscConfig+0x55e>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff f9d6 	bl	8000840 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	; 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0ef      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80014a6:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80014a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ed      	bne.n	8001490 <HAL_RCC_OscConfig+0x548>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCC_OscConfig+0x57e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b75      	ldr	r3, [pc, #468]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a74      	ldr	r2, [pc, #464]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03c      	beq.n	800154c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d01c      	beq.n	8001514 <HAL_RCC_OscConfig+0x5cc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014da:	4b6d      	ldr	r3, [pc, #436]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80014dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e0:	4a6b      	ldr	r2, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ea:	f7ff f9a9 	bl	8000840 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f2:	f7ff f9a5 	bl	8000840 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0c0      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001504:	4b62      	ldr	r3, [pc, #392]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0ef      	beq.n	80014f2 <HAL_RCC_OscConfig+0x5aa>
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800151a:	4a5d      	ldr	r2, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff f98c 	bl	8000840 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x5f6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152c:	f7ff f988 	bl	8000840 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x5f6>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0a3      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800153e:	4b54      	ldr	r3, [pc, #336]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ef      	bne.n	800152c <HAL_RCC_OscConfig+0x5e4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8097 	beq.w	8001684 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4b4e      	ldr	r3, [pc, #312]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b0c      	cmp	r3, #12
 8001560:	f000 808e 	beq.w	8001680 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	2b02      	cmp	r3, #2
 800156a:	d155      	bne.n	8001618 <HAL_RCC_OscConfig+0x6d0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156c:	4b48      	ldr	r3, [pc, #288]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a47      	ldr	r2, [pc, #284]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff f962 	bl	8000840 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff f95e 	bl	8000840 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e079      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001592:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x638>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	3b01      	subs	r3, #1
 80015a4:	011a      	lsls	r2, r3, #4
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	3b01      	subs	r3, #1
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	065b      	lsls	r3, r3, #25
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	06db      	lsls	r3, r3, #27
 80015d2:	492f      	ldr	r1, [pc, #188]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80015de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff f926 	bl	8000840 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x6c2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f922 	bl	8000840 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e03d      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x6b0>
 8001616:	e035      	b.n	8001684 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800161e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001622:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x700>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x700>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 800164e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff f8f2 	bl	8000840 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff f8ee 	bl	8000840 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e009      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_RCC_OscConfig+0x748>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x718>
 800167e:	e001      	b.n	8001684 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016a2:	4b84      	ldr	r3, [pc, #528]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d910      	bls.n	80016d2 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b0:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 0207 	bic.w	r2, r3, #7
 80016b8:	497e      	ldr	r1, [pc, #504]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c0:	4b7c      	ldr	r3, [pc, #496]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0ec      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4973      	ldr	r1, [pc, #460]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 808e 	beq.w	800181a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001706:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d121      	bne.n	8001756 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0ca      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800171e:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0be      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0b2      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001746:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0aa      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4955      	ldr	r1, [pc, #340]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001768:	f7ff f86a 	bl	8000840 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d112      	bne.n	800179c <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f862 	bl	8000840 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e08e      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d1ee      	bne.n	8001778 <HAL_RCC_ClockConfig+0xe4>
 800179a:	e03e      	b.n	800181a <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7ff f84b 	bl	8000840 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e077      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017bc:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x112>
 80017c8:	e027      	b.n	800181a <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11d      	bne.n	800180e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff f834 	bl	8000840 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e060      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x140>
 80017f6:	e010      	b.n	800181a <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff f822 	bl	8000840 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e04e      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d1ee      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d210      	bcs.n	800184a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 0207 	bic.w	r2, r3, #7
 8001830:	4920      	ldr	r1, [pc, #128]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_RCC_ClockConfig+0x220>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e030      	b.n	80018ac <HAL_RCC_ClockConfig+0x218>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4915      	ldr	r1, [pc, #84]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	490d      	ldr	r1, [pc, #52]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001888:	f000 f81c 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x224>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	4908      	ldr	r1, [pc, #32]	; (80018bc <HAL_RCC_ClockConfig+0x228>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_RCC_ClockConfig+0x22c>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7fe ffa1 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	0800214c 	.word	0x0800214c
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	2302      	movs	r3, #2
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	2302      	movs	r3, #2
 80018dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d127      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d121      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d107      	bne.n	8001922 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e005      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800192e:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x154>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	d113      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001948:	e010      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b04      	cmp	r3, #4
 8001954:	d102      	bne.n	800195c <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x158>)
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e007      	b.n	800196c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d101      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x15c>)
 800196a:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b0c      	cmp	r3, #12
 8001976:	d146      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x142>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	3301      	adds	r3, #1
 800198e:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0xda>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0xf4>
 800199c:	e019      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x10e>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x158>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	613b      	str	r3, [r7, #16]
      break;
 80019b6:	e019      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x128>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80019c2:	68d2      	ldr	r2, [r2, #12]
 80019c4:	0a12      	lsrs	r2, r2, #8
 80019c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	613b      	str	r3, [r7, #16]
      break;
 80019d0:	e00c      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x128>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	0a12      	lsrs	r2, r2, #8
 80019e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	613b      	str	r3, [r7, #16]
      break;
 80019ea:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x150>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0e5b      	lsrs	r3, r3, #25
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	3301      	adds	r3, #1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000
 8001a18:	0800215c 	.word	0x0800215c
 8001a1c:	00f42400 	.word	0x00f42400
 8001a20:	007a1200 	.word	0x007a1200

08001a24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000

08001a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a58:	f7ff fa02 	bl	8000e60 <HAL_PWREx_GetVoltageRange>
 8001a5c:	6178      	str	r0, [r7, #20]
 8001a5e:	e014      	b.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a78:	f7ff f9f2 	bl	8000e60 <HAL_PWREx_GetVoltageRange>
 8001a7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a90:	d10b      	bne.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b80      	cmp	r3, #128	; 0x80
 8001a96:	d919      	bls.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a9c:	d902      	bls.n	8001aa4 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e013      	b.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e010      	b.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	d902      	bls.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	e00a      	b.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b80      	cmp	r3, #128	; 0x80
 8001aba:	d102      	bne.n	8001ac2 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001abc:	2302      	movs	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e004      	b.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b70      	cmp	r3, #112	; 0x70
 8001ac6:	d101      	bne.n	8001acc <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ac8:	2301      	movs	r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 0207 	bic.w	r2, r3, #7
 8001ad4:	4909      	ldr	r1, [pc, #36]	; (8001afc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e01d      	b.n	8001b4e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f815 	bl	8001b56 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 f920 	bl	8001d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_TIM_ConfigClockSource+0x1c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e0df      	b.n	8001d7c <HAL_TIM_ConfigClockSource+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001be6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf8:	d057      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0x10a>
 8001bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfe:	f200 80b3 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c06:	d028      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0xba>
 8001c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0c:	f200 80ac 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c10:	2b70      	cmp	r3, #112	; 0x70
 8001c12:	d02d      	beq.n	8001c70 <HAL_TIM_ConfigClockSource+0xd0>
 8001c14:	2b70      	cmp	r3, #112	; 0x70
 8001c16:	f200 80a7 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c1a:	2b60      	cmp	r3, #96	; 0x60
 8001c1c:	d068      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0x150>
 8001c1e:	2b60      	cmp	r3, #96	; 0x60
 8001c20:	f200 80a2 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c24:	2b50      	cmp	r3, #80	; 0x50
 8001c26:	d053      	beq.n	8001cd0 <HAL_TIM_ConfigClockSource+0x130>
 8001c28:	2b50      	cmp	r3, #80	; 0x50
 8001c2a:	f200 809d 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d06e      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x170>
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	f200 8098 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c38:	2b30      	cmp	r3, #48	; 0x30
 8001c3a:	f000 808e 	beq.w	8001d5a <HAL_TIM_ConfigClockSource+0x1ba>
 8001c3e:	2b30      	cmp	r3, #48	; 0x30
 8001c40:	f200 8092 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	f000 8081 	beq.w	8001d4c <HAL_TIM_ConfigClockSource+0x1ac>
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	f200 808c 	bhi.w	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d06d      	beq.n	8001d30 <HAL_TIM_ConfigClockSource+0x190>
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d072      	beq.n	8001d3e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001c58:	e086      	b.n	8001d68 <HAL_TIM_ConfigClockSource+0x1c8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	f023 0307 	bic.w	r3, r3, #7
 8001c6c:	6093      	str	r3, [r2, #8]
    break;
 8001c6e:	e07c      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f000 f99b 	bl	8001fba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]
    break;
 8001ca8:	e05f      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f000 f97e 	bl	8001fba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ccc:	609a      	str	r2, [r3, #8]
    break;
 8001cce:	e04c      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f000 f8e5 	bl	8001eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2150      	movs	r1, #80	; 0x50
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f946 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001cee:	e03c      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f000 f908 	bl	8001f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2160      	movs	r1, #96	; 0x60
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f936 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001d0e:	e02c      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f000 f8c5 	bl	8001eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2140      	movs	r1, #64	; 0x40
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f926 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001d2e:	e01c      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f91f 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001d3c:	e015      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2110      	movs	r1, #16
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f918 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001d4a:	e00e      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2120      	movs	r1, #32
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f911 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001d58:	e007      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2130      	movs	r1, #48	; 0x30
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f90a 	bl	8001f7a <TIM_ITRx_SetConfig>
    break;
 8001d66:	e000      	b.n	8001d6a <HAL_TIM_ConfigClockSource+0x1ca>
    break;
 8001d68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <TIM_Base_SetConfig+0x108>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <TIM_Base_SetConfig+0x44>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da6:	d00f      	beq.n	8001dc8 <TIM_Base_SetConfig+0x44>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <TIM_Base_SetConfig+0x10c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00b      	beq.n	8001dc8 <TIM_Base_SetConfig+0x44>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a38      	ldr	r2, [pc, #224]	; (8001e94 <TIM_Base_SetConfig+0x110>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <TIM_Base_SetConfig+0x44>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <TIM_Base_SetConfig+0x114>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <TIM_Base_SetConfig+0x44>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <TIM_Base_SetConfig+0x118>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d108      	bne.n	8001dda <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <TIM_Base_SetConfig+0x108>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d01b      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <TIM_Base_SetConfig+0x10c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d017      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <TIM_Base_SetConfig+0x110>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <TIM_Base_SetConfig+0x114>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00f      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <TIM_Base_SetConfig+0x118>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <TIM_Base_SetConfig+0x11c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <TIM_Base_SetConfig+0x120>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <TIM_Base_SetConfig+0x9e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <TIM_Base_SetConfig+0x124>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <TIM_Base_SetConfig+0x108>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <TIM_Base_SetConfig+0xee>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <TIM_Base_SetConfig+0x118>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0xee>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <TIM_Base_SetConfig+0x11c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0xee>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <TIM_Base_SetConfig+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0xee>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <TIM_Base_SetConfig+0x124>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d103      	bne.n	8001e7a <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	615a      	str	r2, [r3, #20]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40013400 	.word	0x40013400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800

08001eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f023 0201 	bic.w	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ede:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f023 030a 	bic.w	r3, r3, #10
 8001ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	621a      	str	r2, [r3, #32]
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f023 0210 	bic.w	r2, r3, #16
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	031b      	lsls	r3, r3, #12
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	621a      	str	r2, [r3, #32]
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f96:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	f043 0307 	orr.w	r3, r3, #7
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	609a      	str	r2, [r3, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	021a      	lsls	r2, r3, #8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	609a      	str	r2, [r3, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002014:	2302      	movs	r3, #2
 8002016:	e03d      	b.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800204a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800206e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4313      	orrs	r3, r2
 8002078:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40013400 	.word	0x40013400

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4d0d      	ldr	r5, [pc, #52]	; (80020e0 <__libc_init_array+0x38>)
 80020ac:	4c0d      	ldr	r4, [pc, #52]	; (80020e4 <__libc_init_array+0x3c>)
 80020ae:	1b64      	subs	r4, r4, r5
 80020b0:	10a4      	asrs	r4, r4, #2
 80020b2:	2600      	movs	r6, #0
 80020b4:	42a6      	cmp	r6, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	4d0b      	ldr	r5, [pc, #44]	; (80020e8 <__libc_init_array+0x40>)
 80020ba:	4c0c      	ldr	r4, [pc, #48]	; (80020ec <__libc_init_array+0x44>)
 80020bc:	f000 f818 	bl	80020f0 <_init>
 80020c0:	1b64      	subs	r4, r4, r5
 80020c2:	10a4      	asrs	r4, r4, #2
 80020c4:	2600      	movs	r6, #0
 80020c6:	42a6      	cmp	r6, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d0:	4798      	blx	r3
 80020d2:	3601      	adds	r6, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020da:	4798      	blx	r3
 80020dc:	3601      	adds	r6, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	0800218c 	.word	0x0800218c
 80020e4:	0800218c 	.word	0x0800218c
 80020e8:	0800218c 	.word	0x0800218c
 80020ec:	08002190 	.word	0x08002190

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr
