
Zegar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002320  08002320  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002320  08002320  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002320  08002320  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000004  0800232c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800232c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000999c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001955  00000000  00000000  000299d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f53  00000000  00000000  0002c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4b5  00000000  00000000  000566e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe8ec  00000000  00000000  00062b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  001614d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002284 	.word	0x08002284

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08002284 	.word	0x08002284

080001ec <dis7seg_init>:
TIM_HandleTypeDef htim2;

static void MX_TIM2_Init(void);
	
void dis7seg_init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
  // initialize GPIO
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f2:	4b3b      	ldr	r3, [pc, #236]	; (80002e0 <dis7seg_init+0xf4>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a3a      	ldr	r2, [pc, #232]	; (80002e0 <dis7seg_init+0xf4>)
 80001f8:	f043 0304 	orr.w	r3, r3, #4
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fe:	4b38      	ldr	r3, [pc, #224]	; (80002e0 <dis7seg_init+0xf4>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	f003 0304 	and.w	r3, r3, #4
 8000206:	613b      	str	r3, [r7, #16]
 8000208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020a:	4b35      	ldr	r3, [pc, #212]	; (80002e0 <dis7seg_init+0xf4>)
 800020c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020e:	4a34      	ldr	r2, [pc, #208]	; (80002e0 <dis7seg_init+0xf4>)
 8000210:	f043 0302 	orr.w	r3, r3, #2
 8000214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000216:	4b32      	ldr	r3, [pc, #200]	; (80002e0 <dis7seg_init+0xf4>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021a:	f003 0302 	and.w	r3, r3, #2
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000222:	4b2f      	ldr	r3, [pc, #188]	; (80002e0 <dis7seg_init+0xf4>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <dis7seg_init+0xf4>)
 8000228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800022e:	4b2c      	ldr	r3, [pc, #176]	; (80002e0 <dis7seg_init+0xf4>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000236:	60bb      	str	r3, [r7, #8]
 8000238:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800023a:	f000 ff3f 	bl	80010bc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <dis7seg_init+0xf4>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <dis7seg_init+0xf4>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <dis7seg_init+0xf4>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	f003 0301 	and.w	r3, r3, #1
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	213c      	movs	r1, #60	; 0x3c
 800025a:	4822      	ldr	r0, [pc, #136]	; (80002e4 <dis7seg_init+0xf8>)
 800025c:	f000 feb2 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin 
 8000260:	2200      	movs	r2, #0
 8000262:	f240 217f 	movw	r1, #639	; 0x27f
 8000266:	4820      	ldr	r0, [pc, #128]	; (80002e8 <dis7seg_init+0xfc>)
 8000268:	f000 feac 	bl	8000fc4 <HAL_GPIO_WritePin>
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin DIG3_Pin DIG4_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|DIG3_Pin|DIG4_Pin;
 800026c:	233c      	movs	r3, #60	; 0x3c
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000270:	2301      	movs	r3, #1
 8000272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	4818      	ldr	r0, [pc, #96]	; (80002e4 <dis7seg_init+0xf8>)
 8000284:	f000 fd08 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin 
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin 
 8000288:	f240 237f 	movw	r3, #639	; 0x27f
 800028c:	617b      	str	r3, [r7, #20]
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <dis7seg_init+0xfc>)
 80002a2:	f000 fcf9 	bl	8000c98 <HAL_GPIO_Init>
  
  // initialize TIM2  
  __HAL_RCC_TIM2_CLK_ENABLE();
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <dis7seg_init+0xf4>)
 80002a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <dis7seg_init+0xf4>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6593      	str	r3, [r2, #88]	; 0x58
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <dis7seg_init+0xf4>)
 80002b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
  MX_TIM2_Init();
 80002be:	f000 f929 	bl	8000514 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80002c2:	480a      	ldr	r0, [pc, #40]	; (80002ec <dis7seg_init+0x100>)
 80002c4:	f001 fd1b 	bl	8001cfe <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2100      	movs	r1, #0
 80002cc:	201c      	movs	r0, #28
 80002ce:	f000 fc82 	bl	8000bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80002d2:	201c      	movs	r0, #28
 80002d4:	f000 fc9b 	bl	8000c0e <HAL_NVIC_EnableIRQ>
}
 80002d8:	bf00      	nop
 80002da:	3728      	adds	r7, #40	; 0x28
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000400 	.word	0x48000400
 80002e8:	48001800 	.word	0x48001800
 80002ec:	20000028 	.word	0x20000028

080002f0 <dis7seg_displayHHMM>:

uint8_t dis7seg_displayHHMM(uint16_t HH, uint16_t MM, uint16_t peak)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
 80002fa:	460b      	mov	r3, r1
 80002fc:	80bb      	strh	r3, [r7, #4]
 80002fe:	4613      	mov	r3, r2
 8000300:	807b      	strh	r3, [r7, #2]
	//Display HH
	// 1 number
	display[2] = segments[HH - (HH/10) * 10];
 8000302:	88fa      	ldrh	r2, [r7, #6]
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	4932      	ldr	r1, [pc, #200]	; (80003d0 <dis7seg_displayHHMM+0xe0>)
 8000308:	fba1 1303 	umull	r1, r3, r1, r3
 800030c:	08db      	lsrs	r3, r3, #3
 800030e:	b29b      	uxth	r3, r3
 8000310:	4619      	mov	r1, r3
 8000312:	f06f 0309 	mvn.w	r3, #9
 8000316:	fb01 f303 	mul.w	r3, r1, r3
 800031a:	4413      	add	r3, r2
 800031c:	4a2d      	ldr	r2, [pc, #180]	; (80003d4 <dis7seg_displayHHMM+0xe4>)
 800031e:	5cd3      	ldrb	r3, [r2, r3]
 8000320:	b29a      	uxth	r2, r3
 8000322:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 8000324:	809a      	strh	r2, [r3, #4]
	// 2 number
	display[3] = segments[HH / 10];
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	4a29      	ldr	r2, [pc, #164]	; (80003d0 <dis7seg_displayHHMM+0xe0>)
 800032a:	fba2 2303 	umull	r2, r3, r2, r3
 800032e:	08db      	lsrs	r3, r3, #3
 8000330:	b29b      	uxth	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <dis7seg_displayHHMM+0xe4>)
 8000336:	5c9b      	ldrb	r3, [r3, r2]
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 800033c:	80da      	strh	r2, [r3, #6]

	display[2] |= SEG_DP_Pin;
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 8000340:	889b      	ldrh	r3, [r3, #4]
 8000342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000346:	b29a      	uxth	r2, r3
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 800034a:	809a      	strh	r2, [r3, #4]

	//Display MM
	// 1 number
	if (peak == 1)
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d115      	bne.n	800037e <dis7seg_displayHHMM+0x8e>
	{
		display[0] = segments[MM - (MM/10) * 10] | SEG_DP_Pin;
 8000352:	88ba      	ldrh	r2, [r7, #4]
 8000354:	88bb      	ldrh	r3, [r7, #4]
 8000356:	491e      	ldr	r1, [pc, #120]	; (80003d0 <dis7seg_displayHHMM+0xe0>)
 8000358:	fba1 1303 	umull	r1, r3, r1, r3
 800035c:	08db      	lsrs	r3, r3, #3
 800035e:	b29b      	uxth	r3, r3
 8000360:	4619      	mov	r1, r3
 8000362:	f06f 0309 	mvn.w	r3, #9
 8000366:	fb01 f303 	mul.w	r3, r1, r3
 800036a:	4413      	add	r3, r2
 800036c:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <dis7seg_displayHHMM+0xe4>)
 800036e:	5cd3      	ldrb	r3, [r2, r3]
 8000370:	b21b      	sxth	r3, r3
 8000372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000376:	b21b      	sxth	r3, r3
 8000378:	b29a      	uxth	r2, r3
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 800037c:	801a      	strh	r2, [r3, #0]
	}
	if (peak == 0)
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d111      	bne.n	80003a8 <dis7seg_displayHHMM+0xb8>
	{
		display[0] = segments[MM - (MM/10) * 10];
 8000384:	88ba      	ldrh	r2, [r7, #4]
 8000386:	88bb      	ldrh	r3, [r7, #4]
 8000388:	4911      	ldr	r1, [pc, #68]	; (80003d0 <dis7seg_displayHHMM+0xe0>)
 800038a:	fba1 1303 	umull	r1, r3, r1, r3
 800038e:	08db      	lsrs	r3, r3, #3
 8000390:	b29b      	uxth	r3, r3
 8000392:	4619      	mov	r1, r3
 8000394:	f06f 0309 	mvn.w	r3, #9
 8000398:	fb01 f303 	mul.w	r3, r1, r3
 800039c:	4413      	add	r3, r2
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <dis7seg_displayHHMM+0xe4>)
 80003a0:	5cd3      	ldrb	r3, [r2, r3]
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 80003a6:	801a      	strh	r2, [r3, #0]
	}
	// 2 number
	display[1] = segments[MM / 10];
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <dis7seg_displayHHMM+0xe0>)
 80003ac:	fba2 2303 	umull	r2, r3, r2, r3
 80003b0:	08db      	lsrs	r3, r3, #3
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <dis7seg_displayHHMM+0xe4>)
 80003b8:	5c9b      	ldrb	r3, [r3, r2]
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <dis7seg_displayHHMM+0xe8>)
 80003be:	805a      	strh	r2, [r3, #2]

	return 0;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	cccccccd 	.word	0xcccccccd
 80003d4:	080022d0 	.word	0x080022d0
 80003d8:	20000020 	.word	0x20000020

080003dc <dis7seg_displayMMSS>:

uint8_t dis7seg_displayMMSS(uint16_t MM, uint16_t SS)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	460a      	mov	r2, r1
 80003e6:	80fb      	strh	r3, [r7, #6]
 80003e8:	4613      	mov	r3, r2
 80003ea:	80bb      	strh	r3, [r7, #4]
	//Display MM
	// 1 number
	display[2] = segments[MM - (MM/10) * 10]  | SEG_DP_Pin;
 80003ec:	88fa      	ldrh	r2, [r7, #6]
 80003ee:	88fb      	ldrh	r3, [r7, #6]
 80003f0:	4922      	ldr	r1, [pc, #136]	; (800047c <dis7seg_displayMMSS+0xa0>)
 80003f2:	fba1 1303 	umull	r1, r3, r1, r3
 80003f6:	08db      	lsrs	r3, r3, #3
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	f06f 0309 	mvn.w	r3, #9
 8000400:	fb01 f303 	mul.w	r3, r1, r3
 8000404:	4413      	add	r3, r2
 8000406:	4a1e      	ldr	r2, [pc, #120]	; (8000480 <dis7seg_displayMMSS+0xa4>)
 8000408:	5cd3      	ldrb	r3, [r2, r3]
 800040a:	b21b      	sxth	r3, r3
 800040c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000410:	b21b      	sxth	r3, r3
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <dis7seg_displayMMSS+0xa8>)
 8000416:	809a      	strh	r2, [r3, #4]
	// 2 number
	display[3] = segments[MM / 10];
 8000418:	88fb      	ldrh	r3, [r7, #6]
 800041a:	4a18      	ldr	r2, [pc, #96]	; (800047c <dis7seg_displayMMSS+0xa0>)
 800041c:	fba2 2303 	umull	r2, r3, r2, r3
 8000420:	08db      	lsrs	r3, r3, #3
 8000422:	b29b      	uxth	r3, r3
 8000424:	461a      	mov	r2, r3
 8000426:	4b16      	ldr	r3, [pc, #88]	; (8000480 <dis7seg_displayMMSS+0xa4>)
 8000428:	5c9b      	ldrb	r3, [r3, r2]
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <dis7seg_displayMMSS+0xa8>)
 800042e:	80da      	strh	r2, [r3, #6]

	//Display SS
	// 1 number
	display[0] = segments[SS - (SS/10) * 10];
 8000430:	88ba      	ldrh	r2, [r7, #4]
 8000432:	88bb      	ldrh	r3, [r7, #4]
 8000434:	4911      	ldr	r1, [pc, #68]	; (800047c <dis7seg_displayMMSS+0xa0>)
 8000436:	fba1 1303 	umull	r1, r3, r1, r3
 800043a:	08db      	lsrs	r3, r3, #3
 800043c:	b29b      	uxth	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	f06f 0309 	mvn.w	r3, #9
 8000444:	fb01 f303 	mul.w	r3, r1, r3
 8000448:	4413      	add	r3, r2
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <dis7seg_displayMMSS+0xa4>)
 800044c:	5cd3      	ldrb	r3, [r2, r3]
 800044e:	b29a      	uxth	r2, r3
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <dis7seg_displayMMSS+0xa8>)
 8000452:	801a      	strh	r2, [r3, #0]
	// 2 number
	display[1] = segments[SS / 10];
 8000454:	88bb      	ldrh	r3, [r7, #4]
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <dis7seg_displayMMSS+0xa0>)
 8000458:	fba2 2303 	umull	r2, r3, r2, r3
 800045c:	08db      	lsrs	r3, r3, #3
 800045e:	b29b      	uxth	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <dis7seg_displayMMSS+0xa4>)
 8000464:	5c9b      	ldrb	r3, [r3, r2]
 8000466:	b29a      	uxth	r2, r3
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <dis7seg_displayMMSS+0xa8>)
 800046a:	805a      	strh	r2, [r3, #2]

	return 0;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	cccccccd 	.word	0xcccccccd
 8000480:	080022d0 	.word	0x080022d0
 8000484:	20000020 	.word	0x20000020

08000488 <dis7seg_mpx>:
	display[fraction_digits] |= SEG_DP_Pin;
	return 0;
}

static inline void dis7seg_mpx(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	static uint8_t dig = 0;
	
	HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG_MSK, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	213c      	movs	r1, #60	; 0x3c
 8000490:	4814      	ldr	r0, [pc, #80]	; (80004e4 <dis7seg_mpx+0x5c>)
 8000492:	f000 fd97 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_MSK, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f240 21ff 	movw	r1, #767	; 0x2ff
 800049c:	4812      	ldr	r0, [pc, #72]	; (80004e8 <dis7seg_mpx+0x60>)
 800049e:	f000 fd91 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, display[dig], GPIO_PIN_SET);
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <dis7seg_mpx+0x64>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <dis7seg_mpx+0x68>)
 80004aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004ae:	2201      	movs	r2, #1
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <dis7seg_mpx+0x60>)
 80004b4:	f000 fd86 	bl	8000fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG1_GPIO_Port, digits[dig], GPIO_PIN_SET);		
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <dis7seg_mpx+0x64>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <dis7seg_mpx+0x6c>)
 80004c0:	5c9b      	ldrb	r3, [r3, r2]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <dis7seg_mpx+0x5c>)
 80004ca:	f000 fd7b 	bl	8000fc4 <HAL_GPIO_WritePin>
	dig = (dig + 1) & 3;
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <dis7seg_mpx+0x64>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0303 	and.w	r3, r3, #3
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <dis7seg_mpx+0x64>)
 80004de:	701a      	strb	r2, [r3, #0]
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	48000400 	.word	0x48000400
 80004e8:	48001800 	.word	0x48001800
 80004ec:	20000064 	.word	0x20000064
 80004f0:	20000020 	.word	0x20000020
 80004f4:	080022dc 	.word	0x080022dc

080004f8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <TIM2_IRQHandler+0x18>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f06f 0201 	mvn.w	r2, #1
 8000504:	611a      	str	r2, [r3, #16]
	dis7seg_mpx();
 8000506:	f7ff ffbf 	bl	8000488 <dis7seg_mpx>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_TIM2_Init+0x90>)
 800051c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetHCLKFreq() / 400 / NDIGITS / 2 - 1;;
 8000522:	f001 fb49 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8000526:	4603      	mov	r3, r0
 8000528:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <MX_TIM2_Init+0x94>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0a9b      	lsrs	r3, r3, #10
 8000530:	3b01      	subs	r3, #1
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_TIM2_Init+0x90>)
 8000534:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_TIM2_Init+0x90>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_TIM2_Init+0x90>)
 800053e:	2201      	movs	r2, #1
 8000540:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_TIM2_Init+0x90>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000548:	4816      	ldr	r0, [pc, #88]	; (80005a4 <MX_TIM2_Init+0x90>)
 800054a:	f001 fba3 	bl	8001c94 <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d003      	beq.n	800055c <MX_TIM2_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000554:	21cd      	movs	r1, #205	; 0xcd
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <MX_TIM2_Init+0x98>)
 8000558:	f000 f8bc 	bl	80006d4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	4619      	mov	r1, r3
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <MX_TIM2_Init+0x90>)
 800056a:	f001 fbe3 	bl	8001d34 <HAL_TIM_ConfigClockSource>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <MX_TIM2_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000574:	21d3      	movs	r1, #211	; 0xd3
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <MX_TIM2_Init+0x98>)
 8000578:	f000 f8ac 	bl	80006d4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4619      	mov	r1, r3
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_TIM2_Init+0x90>)
 800058a:	f001 fe03 	bl	8002194 <HAL_TIMEx_MasterConfigSynchronization>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d003      	beq.n	800059c <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000594:	21da      	movs	r1, #218	; 0xda
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_TIM2_Init+0x98>)
 8000598:	f000 f89c 	bl	80006d4 <_Error_Handler>
  }

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000028 	.word	0x20000028
 80005a8:	51eb851f 	.word	0x51eb851f
 80005ac:	0800229c 	.word	0x0800229c

080005b0 <joy_init>:
#define JOY_UP_GPIO_Port GPIOE
#define JOY_OK_Pin GPIO_PIN_15
#define JOY_OK_GPIO_Port GPIOE

void joy_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <joy_init+0x40>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <joy_init+0x40>)
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <joy_init+0x40>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0310 	and.w	r3, r3, #16
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_UP_Pin JOY_OK_Pin JOY_RIGHT_Pin 
                           JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_UP_Pin|JOY_OK_Pin|JOY_RIGHT_Pin 
 80005ce:	f248 030f 	movw	r3, #32783	; 0x800f
 80005d2:	607b      	str	r3, [r7, #4]
                          |JOY_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <joy_init+0x44>)
 80005e2:	f000 fb59 	bl	8000c98 <HAL_GPIO_Init>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48001000 	.word	0x48001000

080005f8 <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 f9d1 	bl	80009a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f806 	bl	8000610 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	
	// initialize KAMeLeon peripherals used in this project
	joy_init();
 8000604:	f7ff ffd4 	bl	80005b0 <joy_init>
	dis7seg_init();
 8000608:	f7ff fdf0 	bl	80001ec <dis7seg_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x14>
	...

08000610 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000616:	2310      	movs	r3, #16
 8000618:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000622:	2360      	movs	r3, #96	; 0x60
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062a:	2301      	movs	r3, #1
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000632:	2328      	movs	r3, #40	; 0x28
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fd48 	bl	80010dc <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000652:	2189      	movs	r1, #137	; 0x89
 8000654:	481d      	ldr	r0, [pc, #116]	; (80006cc <SystemClock_Config+0xbc>)
 8000656:	f000 f83d 	bl	80006d4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f8d8 	bl	8001828 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d003      	beq.n	8000686 <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 800067e:	2197      	movs	r1, #151	; 0x97
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <SystemClock_Config+0xbc>)
 8000682:	f000 f827 	bl	80006d4 <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068a:	f000 fcc1 	bl	8001010 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d003      	beq.n	800069c <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000694:	219e      	movs	r1, #158	; 0x9e
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <SystemClock_Config+0xbc>)
 8000698:	f000 f81c 	bl	80006d4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800069c:	f001 fa8c 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <SystemClock_Config+0xc0>)
 80006a4:	fba2 2303 	umull	r2, r3, r2, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fabd 	bl	8000c2a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006b0:	2004      	movs	r0, #4
 80006b2:	f000 fac7 	bl	8000c44 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006be:	f000 fa8a 	bl	8000bd6 <HAL_NVIC_SetPriority>
}
 80006c2:	bf00      	nop
 80006c4:	3758      	adds	r7, #88	; 0x58
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	080022bc 	.word	0x080022bc
 80006d0:	10624dd3 	.word	0x10624dd3

080006d4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80006de:	e7fe      	b.n	80006de <_Error_Handler+0xa>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <HAL_MspInit+0x98>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <HAL_MspInit+0x98>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6613      	str	r3, [r2, #96]	; 0x60
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <HAL_MspInit+0x98>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <HAL_MspInit+0x98>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <HAL_MspInit+0x98>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6593      	str	r3, [r2, #88]	; 0x58
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_MspInit+0x98>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000716:	2003      	movs	r0, #3
 8000718:	f000 fa52 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	f06f 000b 	mvn.w	r0, #11
 8000724:	f000 fa57 	bl	8000bd6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	f06f 000a 	mvn.w	r0, #10
 8000730:	f000 fa51 	bl	8000bd6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	f06f 0009 	mvn.w	r0, #9
 800073c:	f000 fa4b 	bl	8000bd6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	f06f 0004 	mvn.w	r0, #4
 8000748:	f000 fa45 	bl	8000bd6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	f06f 0003 	mvn.w	r0, #3
 8000754:	f000 fa3f 	bl	8000bd6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	f06f 0001 	mvn.w	r0, #1
 8000760:	f000 fa39 	bl	8000bd6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 fa33 	bl	8000bd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80007d0:	f000 f910 	bl	80009f4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80007d4:	f000 fa52 	bl	8000c7c <HAL_SYSTICK_IRQHandler>
	static uint16_t hh=0;
	static uint16_t mm=0;
	static uint16_t ss=0;
	static uint16_t peakSS = 0;

	if(++interrupt == 1000)
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <SysTick_Handler+0xfc>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <SysTick_Handler+0xfc>)
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <SysTick_Handler+0xfc>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ec:	d169      	bne.n	80008c2 <SysTick_Handler+0xf6>
	{
		interrupt = 0;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <SysTick_Handler+0xfc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	801a      	strh	r2, [r3, #0]
		if (JOY_OK_DOWN && mode == 1)
 80007f4:	4b35      	ldr	r3, [pc, #212]	; (80008cc <SysTick_Handler+0x100>)
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	43db      	mvns	r3, r3
 80007fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <SysTick_Handler+0x46>
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <SysTick_Handler+0x104>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d103      	bne.n	8000812 <SysTick_Handler+0x46>
			{
				mode = 0;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <SysTick_Handler+0x104>)
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]
 8000810:	e00d      	b.n	800082e <SysTick_Handler+0x62>
			}
			else if (JOY_OK_DOWN && mode == 0)
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <SysTick_Handler+0x100>)
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	43db      	mvns	r3, r3
 8000818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <SysTick_Handler+0x62>
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <SysTick_Handler+0x104>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <SysTick_Handler+0x62>
			{
				mode = 1;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <SysTick_Handler+0x104>)
 800082a:	2201      	movs	r2, #1
 800082c:	801a      	strh	r2, [r3, #0]
			}

		if (mode == 0)
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <SysTick_Handler+0x104>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d108      	bne.n	8000848 <SysTick_Handler+0x7c>
		{
			dis7seg_displayMMSS(mm, ss);
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <SysTick_Handler+0x108>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <SysTick_Handler+0x10c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	4610      	mov	r0, r2
 8000844:	f7ff fdca 	bl	80003dc <dis7seg_displayMMSS>
		}
		if (mode == 1)
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <SysTick_Handler+0x104>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d10a      	bne.n	8000866 <SysTick_Handler+0x9a>
		{
			dis7seg_displayHHMM(hh, mm, peakSS);
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SysTick_Handler+0x110>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <SysTick_Handler+0x108>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <SysTick_Handler+0x114>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	f7ff fd45 	bl	80002f0 <dis7seg_displayHHMM>
		}

		ss++;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <SysTick_Handler+0x10c>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <SysTick_Handler+0x10c>)
 8000870:	801a      	strh	r2, [r3, #0]
		peakSS = ss % 2;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <SysTick_Handler+0x10c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <SysTick_Handler+0x114>)
 800087e:	801a      	strh	r2, [r3, #0]

		if (ss == 60)
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <SysTick_Handler+0x10c>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	2b3c      	cmp	r3, #60	; 0x3c
 8000886:	d108      	bne.n	800089a <SysTick_Handler+0xce>
		{
			ss = 0;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <SysTick_Handler+0x10c>)
 800088a:	2200      	movs	r2, #0
 800088c:	801a      	strh	r2, [r3, #0]
			mm++;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <SysTick_Handler+0x108>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <SysTick_Handler+0x108>)
 8000898:	801a      	strh	r2, [r3, #0]
		}
		if (mm == 60)
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <SysTick_Handler+0x108>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2b3c      	cmp	r3, #60	; 0x3c
 80008a0:	d108      	bne.n	80008b4 <SysTick_Handler+0xe8>
		{
			mm = 0;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <SysTick_Handler+0x108>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
			hh++;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <SysTick_Handler+0x110>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <SysTick_Handler+0x110>)
 80008b2:	801a      	strh	r2, [r3, #0]
		}
		if (hh == 24)
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <SysTick_Handler+0x110>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2b18      	cmp	r3, #24
 80008ba:	d102      	bne.n	80008c2 <SysTick_Handler+0xf6>
		{
			hh = 0;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <SysTick_Handler+0x110>)
 80008be:	2200      	movs	r2, #0
 80008c0:	801a      	strh	r2, [r3, #0]
	}



  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000066 	.word	0x20000066
 80008cc:	48001000 	.word	0x48001000
 80008d0:	20000068 	.word	0x20000068
 80008d4:	2000006a 	.word	0x2000006a
 80008d8:	2000006c 	.word	0x2000006c
 80008dc:	2000006e 	.word	0x2000006e
 80008e0:	20000070 	.word	0x20000070

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <SystemInit+0x64>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <SystemInit+0x64>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <SystemInit+0x68>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <SystemInit+0x68>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <SystemInit+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <SystemInit+0x68>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <SystemInit+0x68>)
 8000910:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000914:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <SystemInit+0x68>)
 800091c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <SystemInit+0x68>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <SystemInit+0x68>)
 8000928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800092c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <SystemInit+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SystemInit+0x64>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	609a      	str	r2, [r3, #8]
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00
 800094c:	40021000 	.word	0x40021000

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ffc6 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f001 fc5d 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fe39 	bl	80005f8 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000988:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000994:	08002328 	.word	0x08002328
  ldr r2, =_sbss
 8000998:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800099c:	20000078 	.word	0x20000078

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>

080009a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a6:	2003      	movs	r0, #3
 80009a8:	f000 f90a 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 f805 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b2:	f7ff fe95 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_InitTick+0x30>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_InitTick+0x34>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	099b      	lsrs	r3, r3, #6
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f92a 	bl	8000c2a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009de:	f000 f8fa 	bl	8000bd6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	10624dd3 	.word	0x10624dd3

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick++;
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <HAL_IncTick+0x18>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x18>)
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000074 	.word	0x20000074

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000074 	.word	0x20000074

08000a28 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <NVIC_EnableIRQ+0x30>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da0b      	bge.n	8000aec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <NVIC_SetPriority+0x4c>)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 030f 	and.w	r3, r3, #15
 8000ae0:	3b04      	subs	r3, #4
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aea:	e009      	b.n	8000b00 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <NVIC_SetPriority+0x50>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff2d 	bl	8000a28 <NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff42 	bl	8000a70 <NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff8e 	bl	8000b14 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff35 	bl	8000a8c <NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffa2 	bl	8000b7c <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d106      	bne.n	8000c60 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c5e:	e005      	b.n	8000c6c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c66:	f023 0304 	bic.w	r3, r3, #4
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c80:	f000 f802 	bl	8000c88 <HAL_SYSTICK_Callback>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cae:	e166      	b.n	8000f7e <HAL_GPIO_Init+0x2e6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8158 	beq.w	8000f78 <HAL_GPIO_Init+0x2e0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b12      	cmp	r3, #18
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0203 	and.w	r2, r3, #3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80b2 	beq.w	8000f78 <HAL_GPIO_Init+0x2e0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e18:	4a60      	ldr	r2, [pc, #384]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e20:	4b5e      	ldr	r3, [pc, #376]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e2c:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <HAL_GPIO_Init+0x308>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e56:	d02b      	beq.n	8000eb0 <HAL_GPIO_Init+0x218>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a52      	ldr	r2, [pc, #328]	; (8000fa4 <HAL_GPIO_Init+0x30c>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d025      	beq.n	8000eac <HAL_GPIO_Init+0x214>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <HAL_GPIO_Init+0x310>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d01f      	beq.n	8000ea8 <HAL_GPIO_Init+0x210>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a50      	ldr	r2, [pc, #320]	; (8000fac <HAL_GPIO_Init+0x314>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d019      	beq.n	8000ea4 <HAL_GPIO_Init+0x20c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4f      	ldr	r2, [pc, #316]	; (8000fb0 <HAL_GPIO_Init+0x318>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d013      	beq.n	8000ea0 <HAL_GPIO_Init+0x208>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_GPIO_Init+0x31c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d00d      	beq.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4d      	ldr	r2, [pc, #308]	; (8000fb8 <HAL_GPIO_Init+0x320>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d007      	beq.n	8000e98 <HAL_GPIO_Init+0x200>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_GPIO_Init+0x324>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d101      	bne.n	8000e94 <HAL_GPIO_Init+0x1fc>
 8000e90:	2307      	movs	r3, #7
 8000e92:	e00e      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000e94:	2308      	movs	r3, #8
 8000e96:	e00c      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000e98:	2306      	movs	r3, #6
 8000e9a:	e00a      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	e008      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e004      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ec2:	4937      	ldr	r1, [pc, #220]	; (8000fa0 <HAL_GPIO_Init+0x308>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f48:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_GPIO_Init+0x328>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f47f ae91 	bne.w	8000cb0 <HAL_GPIO_Init+0x18>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	48001000 	.word	0x48001000
 8000fb4:	48001400 	.word	0x48001400
 8000fb8:	48001800 	.word	0x48001800
 8000fbc:	48001c00 	.word	0x48001c00
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_PWREx_GetVoltageRange+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40007000 	.word	0x40007000

08001010 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001022:	d12f      	bne.n	8001084 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800102c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001030:	d037      	beq.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800103a:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001040:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	0c9b      	lsrs	r3, r3, #18
 800104e:	2232      	movs	r2, #50	; 0x32
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001056:	e002      	b.n	800105e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3b01      	subs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x62>
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001070:	d0f2      	beq.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107e:	d110      	bne.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e00f      	b.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800108c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001090:	d007      	beq.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}  
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40007000 	.word	0x40007000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	431bde83 	.word	0x431bde83

080010bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply. 
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present. 
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6053      	str	r3, [r2, #4]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40007000 	.word	0x40007000

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80d0 	beq.w	8001296 <HAL_RCC_OscConfig+0x1ba>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80010f6:	4b9b      	ldr	r3, [pc, #620]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d179      	bne.n	80011f6 <HAL_RCC_OscConfig+0x11a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001102:	4b98      	ldr	r3, [pc, #608]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x3e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x3e>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e37f      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	4b91      	ldr	r3, [pc, #580]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_RCC_OscConfig+0x58>
 800112a:	4b8e      	ldr	r3, [pc, #568]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001132:	e005      	b.n	8001140 <HAL_RCC_OscConfig+0x64>
 8001134:	4b8b      	ldr	r3, [pc, #556]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001140:	4293      	cmp	r3, r2
 8001142:	d223      	bcs.n	800118c <HAL_RCC_OscConfig+0xb0>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fd41 	bl	8001bd0 <RCC_SetFlashLatencyFromMSIRange>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e360      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001158:	4b82      	ldr	r3, [pc, #520]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a81      	ldr	r2, [pc, #516]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	497c      	ldr	r1, [pc, #496]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001176:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	4977      	ldr	r1, [pc, #476]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
 800118a:	e022      	b.n	80011d2 <HAL_RCC_OscConfig+0xf6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118c:	4b75      	ldr	r3, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a74      	ldr	r2, [pc, #464]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b72      	ldr	r3, [pc, #456]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	496f      	ldr	r1, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011aa:	4b6e      	ldr	r3, [pc, #440]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	496a      	ldr	r1, [pc, #424]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fd04 	bl	8001bd0 <RCC_SetFlashLatencyFromMSIRange>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e323      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011d2:	f000 fc41 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80011d6:	4602      	mov	r2, r0
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	4961      	ldr	r1, [pc, #388]	; (8001368 <HAL_RCC_OscConfig+0x28c>)
 80011e4:	5ccb      	ldrb	r3, [r1, r3]
 80011e6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ea:	4a60      	ldr	r2, [pc, #384]	; (800136c <HAL_RCC_OscConfig+0x290>)
 80011ec:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fbe4 	bl	80009bc <HAL_InitTick>
 80011f4:	e04f      	b.n	8001296 <HAL_RCC_OscConfig+0x1ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d032      	beq.n	8001264 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011fe:	4b59      	ldr	r3, [pc, #356]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800120a:	f7ff fc01 	bl	8000a10 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001212:	f7ff fbfd 	bl	8000a10 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e2fa      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001224:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x136>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b49      	ldr	r3, [pc, #292]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4946      	ldr	r1, [pc, #280]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b45      	ldr	r3, [pc, #276]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	4941      	ldr	r1, [pc, #260]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
 8001262:	e018      	b.n	8001296 <HAL_RCC_OscConfig+0x1ba>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001264:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001270:	f7ff fbce 	bl	8000a10 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001278:	f7ff fbca 	bl	8000a10 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e2c7      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x19c>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d07b      	beq.n	800139a <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80012b6:	2b0c      	cmp	r3, #12
 80012b8:	d111      	bne.n	80012de <HAL_RCC_OscConfig+0x202>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x202>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d062      	beq.n	8001398 <HAL_RCC_OscConfig+0x2bc>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d15e      	bne.n	8001398 <HAL_RCC_OscConfig+0x2bc>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e29d      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x21a>
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e01d      	b.n	8001332 <HAL_RCC_OscConfig+0x256>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0x23e>
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0x256>
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 800132c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01a      	beq.n	8001370 <HAL_RCC_OscConfig+0x294>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fb69 	bl	8000a10 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001342:	f7ff fb65 	bl	8000a10 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e262      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_RCC_OscConfig+0x288>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x266>
 8001360:	e01b      	b.n	800139a <HAL_RCC_OscConfig+0x2be>
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	080022e0 	.word	0x080022e0
 800136c:	20000000 	.word	0x20000000
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb4e 	bl	8000a10 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x2ae>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fb4a 	bl	8000a10 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2ae>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e247      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800138a:	4ba4      	ldr	r3, [pc, #656]	; (800161c <HAL_RCC_OscConfig+0x540>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x29c>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x2be>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d069      	beq.n	800147a <HAL_RCC_OscConfig+0x39e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80013a6:	4b9d      	ldr	r3, [pc, #628]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x2ee>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013b2:	4b9a      	ldr	r3, [pc, #616]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x31c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013be:	4b97      	ldr	r3, [pc, #604]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x31c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ca:	4b94      	ldr	r3, [pc, #592]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x306>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e21b      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b8e      	ldr	r3, [pc, #568]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	061b      	lsls	r3, r3, #24
 80013f0:	498a      	ldr	r1, [pc, #552]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f6:	e040      	b.n	800147a <HAL_RCC_OscConfig+0x39e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d023      	beq.n	8001448 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b86      	ldr	r3, [pc, #536]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a85      	ldr	r2, [pc, #532]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fb00 	bl	8000a10 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fafc 	bl	8000a10 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1f9      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001426:	4b7d      	ldr	r3, [pc, #500]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x338>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b7a      	ldr	r3, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	4976      	ldr	r1, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
 8001446:	e018      	b.n	800147a <HAL_RCC_OscConfig+0x39e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001448:	4b74      	ldr	r3, [pc, #464]	; (800161c <HAL_RCC_OscConfig+0x540>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a73      	ldr	r2, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x540>)
 800144e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fadc 	bl	8000a10 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145c:	f7ff fad8 	bl	8000a10 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1d5      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03c      	beq.n	8001500 <HAL_RCC_OscConfig+0x424>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x3ec>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001494:	4a61      	ldr	r2, [pc, #388]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff fab7 	bl	8000a10 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x3dc>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fab3 	bl	8000a10 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1b0      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ef      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3ca>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x424>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b54      	ldr	r3, [pc, #336]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	4a53      	ldr	r2, [pc, #332]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fa9a 	bl	8000a10 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fa96 	bl	8000a10 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e193      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ef      	bne.n	80014e0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a6 	beq.w	800165a <HAL_RCC_OscConfig+0x57e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10d      	bne.n	800153a <HAL_RCC_OscConfig+0x45e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a3e      	ldr	r2, [pc, #248]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_RCC_OscConfig+0x540>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x544>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x544>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x544>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fa5d 	bl	8000a10 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x490>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fa59 	bl	8000a10 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e156      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <HAL_RCC_OscConfig+0x544>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x47e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d108      	bne.n	8001592 <HAL_RCC_OscConfig+0x4b6>
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001590:	e024      	b.n	80015dc <HAL_RCC_OscConfig+0x500>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d110      	bne.n	80015bc <HAL_RCC_OscConfig+0x4e0>
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCC_OscConfig+0x540>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x500>
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_RCC_OscConfig+0x540>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <HAL_RCC_OscConfig+0x536>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa14 	bl	8000a10 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x526>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fa10 	bl	8000a10 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x526>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e10b      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_RCC_OscConfig+0x540>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ed      	beq.n	80015ec <HAL_RCC_OscConfig+0x510>
 8001610:	e01a      	b.n	8001648 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff f9fd 	bl	8000a10 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001618:	e00f      	b.n	800163a <HAL_RCC_OscConfig+0x55e>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f9f4 	bl	8000a10 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0ef      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800163a:	4b7a      	ldr	r3, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ed      	bne.n	8001624 <HAL_RCC_OscConfig+0x548>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x57e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a74      	ldr	r2, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x5cc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800166e:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001674:	4a6b      	ldr	r2, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff f9c7 	bl	8000a10 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001686:	f7ff f9c3 	bl	8000a10 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e0c0      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001698:	4b62      	ldr	r3, [pc, #392]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 800169a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0ef      	beq.n	8001686 <HAL_RCC_OscConfig+0x5aa>
 80016a6:	e01b      	b.n	80016e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80016aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ae:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9aa 	bl	8000a10 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x5f6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c0:	f7ff f9a6 	bl	8000a10 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x5f6>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0a3      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80016d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ef      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5e4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8097 	beq.w	8001818 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	f000 808e 	beq.w	8001814 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d155      	bne.n	80017ac <HAL_RCC_OscConfig+0x6d0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a47      	ldr	r2, [pc, #284]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f980 	bl	8000a10 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff f97c 	bl	8000a10 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e079      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x638>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	3b01      	subs	r3, #1
 8001738:	011a      	lsls	r2, r3, #4
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	055b      	lsls	r3, r3, #21
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	065b      	lsls	r3, r3, #25
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001764:	06db      	lsls	r3, r3, #27
 8001766:	492f      	ldr	r1, [pc, #188]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2c      	ldr	r2, [pc, #176]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f944 	bl	8000a10 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x6c2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f940 	bl	8000a10 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e03d      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x6b0>
 80017aa:	e035      	b.n	8001818 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x700>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x700>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 80017e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f910 	bl	8000a10 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f90c 	bl	8000a10 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e009      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_RCC_OscConfig+0x748>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x718>
 8001812:	e001      	b.n	8001818 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001836:	4b84      	ldr	r3, [pc, #528]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d910      	bls.n	8001866 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001844:	4b80      	ldr	r3, [pc, #512]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 0207 	bic.w	r2, r3, #7
 800184c:	497e      	ldr	r1, [pc, #504]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0ec      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4973      	ldr	r1, [pc, #460]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 808e 	beq.w	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800189a:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d121      	bne.n	80018ea <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0ca      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80018b2:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0be      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80018ca:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0b2      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80018da:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0aa      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4955      	ldr	r1, [pc, #340]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fc:	f7ff f888 	bl	8000a10 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d112      	bne.n	8001930 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f880 	bl	8000a10 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e08e      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d1ee      	bne.n	800190c <HAL_RCC_ClockConfig+0xe4>
 800192e:	e03e      	b.n	80019ae <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d112      	bne.n	800195e <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7ff f869 	bl	8000a10 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e077      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d1ee      	bne.n	800193a <HAL_RCC_ClockConfig+0x112>
 800195c:	e027      	b.n	80019ae <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11d      	bne.n	80019a2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f852 	bl	8000a10 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e060      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ee      	bne.n	8001968 <HAL_RCC_ClockConfig+0x140>
 800198a:	e010      	b.n	80019ae <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff f840 	bl	8000a10 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04e      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d1ee      	bne.n	800198c <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d210      	bcs.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0207 	bic.w	r2, r3, #7
 80019c4:	4920      	ldr	r1, [pc, #128]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_RCC_ClockConfig+0x220>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e030      	b.n	8001a40 <HAL_RCC_ClockConfig+0x218>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4915      	ldr	r1, [pc, #84]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	490d      	ldr	r1, [pc, #52]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1c:	f000 f81c 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x224>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	4908      	ldr	r1, [pc, #32]	; (8001a50 <HAL_RCC_ClockConfig+0x228>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_RCC_ClockConfig+0x22c>)
 8001a36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7fe ffbf 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	080022e0 	.word	0x080022e0
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001a76:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001a82:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d127      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001a8e:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d121      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e005      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ac2:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <HAL_RCC_GetSysClockFreq+0x154>)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d113      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001adc:	e010      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ade:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e007      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d146      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x142>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	3301      	adds	r3, #1
 8001b22:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0xda>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d00d      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0xf4>
 8001b30:	e019      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x10e>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b3c:	68d2      	ldr	r2, [r2, #12]
 8001b3e:	0a12      	lsrs	r2, r2, #8
 8001b40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	613b      	str	r3, [r7, #16]
      break;
 8001b4a:	e019      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x128>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b56:	68d2      	ldr	r2, [r2, #12]
 8001b58:	0a12      	lsrs	r2, r2, #8
 8001b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	613b      	str	r3, [r7, #16]
      break;
 8001b64:	e00c      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x128>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	0a12      	lsrs	r2, r2, #8
 8001b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	613b      	str	r3, [r7, #16]
      break;
 8001b7e:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x150>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0e5b      	lsrs	r3, r3, #25
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	080022f0 	.word	0x080022f0
 8001bb0:	00f42400 	.word	0x00f42400
 8001bb4:	007a1200 	.word	0x007a1200

08001bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bec:	f7ff fa02 	bl	8000ff4 <HAL_PWREx_GetVoltageRange>
 8001bf0:	6178      	str	r0, [r7, #20]
 8001bf2:	e014      	b.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c0c:	f7ff f9f2 	bl	8000ff4 <HAL_PWREx_GetVoltageRange>
 8001c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c24:	d10b      	bne.n	8001c3e <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b80      	cmp	r3, #128	; 0x80
 8001c2a:	d919      	bls.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001c30:	d902      	bls.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c32:	2302      	movs	r3, #2
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e013      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c38:	2301      	movs	r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	e010      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d902      	bls.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c44:	2303      	movs	r3, #3
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e00a      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d102      	bne.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c50:	2302      	movs	r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e004      	b.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b70      	cmp	r3, #112	; 0x70
 8001c5a:	d101      	bne.n	8001c60 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 0207 	bic.w	r2, r3, #7
 8001c68:	4909      	ldr	r1, [pc, #36]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e01d      	b.n	8001ce2 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f815 	bl	8001cea <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 f920 	bl	8001f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_TIM_ConfigClockSource+0x1c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0df      	b.n	8001f10 <HAL_TIM_ConfigClockSource+0x1dc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8c:	d057      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0x10a>
 8001d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d92:	f200 80b3 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9a:	d028      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0xba>
 8001d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da0:	f200 80ac 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001da4:	2b70      	cmp	r3, #112	; 0x70
 8001da6:	d02d      	beq.n	8001e04 <HAL_TIM_ConfigClockSource+0xd0>
 8001da8:	2b70      	cmp	r3, #112	; 0x70
 8001daa:	f200 80a7 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001dae:	2b60      	cmp	r3, #96	; 0x60
 8001db0:	d068      	beq.n	8001e84 <HAL_TIM_ConfigClockSource+0x150>
 8001db2:	2b60      	cmp	r3, #96	; 0x60
 8001db4:	f200 80a2 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001db8:	2b50      	cmp	r3, #80	; 0x50
 8001dba:	d053      	beq.n	8001e64 <HAL_TIM_ConfigClockSource+0x130>
 8001dbc:	2b50      	cmp	r3, #80	; 0x50
 8001dbe:	f200 809d 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d06e      	beq.n	8001ea4 <HAL_TIM_ConfigClockSource+0x170>
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	f200 8098 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001dcc:	2b30      	cmp	r3, #48	; 0x30
 8001dce:	f000 808e 	beq.w	8001eee <HAL_TIM_ConfigClockSource+0x1ba>
 8001dd2:	2b30      	cmp	r3, #48	; 0x30
 8001dd4:	f200 8092 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	f000 8081 	beq.w	8001ee0 <HAL_TIM_ConfigClockSource+0x1ac>
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	f200 808c 	bhi.w	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d06d      	beq.n	8001ec4 <HAL_TIM_ConfigClockSource+0x190>
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d072      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001dec:	e086      	b.n	8001efc <HAL_TIM_ConfigClockSource+0x1c8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	f023 0307 	bic.w	r3, r3, #7
 8001e00:	6093      	str	r3, [r2, #8]
    break;
 8001e02:	e07c      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6899      	ldr	r1, [r3, #8]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f000 f99b 	bl	800214e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	609a      	str	r2, [r3, #8]
    break;
 8001e3c:	e05f      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ETR_SetConfig(htim->Instance,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6899      	ldr	r1, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f000 f97e 	bl	800214e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e60:	609a      	str	r2, [r3, #8]
    break;
 8001e62:	e04c      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	461a      	mov	r2, r3
 8001e72:	f000 f8e5 	bl	8002040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2150      	movs	r1, #80	; 0x50
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f946 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001e82:	e03c      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f000 f908 	bl	80020a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2160      	movs	r1, #96	; 0x60
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f936 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001ea2:	e02c      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f000 f8c5 	bl	8002040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f926 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001ec2:	e01c      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f91f 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001ed0:	e015      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f918 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001ede:	e00e      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f911 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001eec:	e007      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2130      	movs	r1, #48	; 0x30
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f90a 	bl	800210e <TIM_ITRx_SetConfig>
    break;
 8001efa:	e000      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ca>
    break;
 8001efc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	; (8002020 <TIM_Base_SetConfig+0x108>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <TIM_Base_SetConfig+0x44>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x44>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a39      	ldr	r2, [pc, #228]	; (8002024 <TIM_Base_SetConfig+0x10c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x44>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a38      	ldr	r2, [pc, #224]	; (8002028 <TIM_Base_SetConfig+0x110>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x44>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <TIM_Base_SetConfig+0x114>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x44>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a36      	ldr	r2, [pc, #216]	; (8002030 <TIM_Base_SetConfig+0x118>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <TIM_Base_SetConfig+0x108>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d01b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a28      	ldr	r2, [pc, #160]	; (8002024 <TIM_Base_SetConfig+0x10c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d017      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <TIM_Base_SetConfig+0x110>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <TIM_Base_SetConfig+0x114>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <TIM_Base_SetConfig+0x118>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <TIM_Base_SetConfig+0x11c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <TIM_Base_SetConfig+0x120>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x9e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a22      	ldr	r2, [pc, #136]	; (800203c <TIM_Base_SetConfig+0x124>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <TIM_Base_SetConfig+0x108>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0xee>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <TIM_Base_SetConfig+0x118>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0xee>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <TIM_Base_SetConfig+0x11c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0xee>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <TIM_Base_SetConfig+0x120>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0xee>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <TIM_Base_SetConfig+0x124>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d103      	bne.n	800200e <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	615a      	str	r2, [r3, #20]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40013400 	.word	0x40013400
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800

08002040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0201 	bic.w	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f023 030a 	bic.w	r3, r3, #10
 8002084:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	621a      	str	r2, [r3, #32]
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b087      	sub	sp, #28
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0210 	bic.w	r2, r3, #16
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	031b      	lsls	r3, r3, #12
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	621a      	str	r2, [r3, #32]
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	f043 0307 	orr.w	r3, r3, #7
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	609a      	str	r2, [r3, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800214e:	b480      	push	{r7}
 8002150:	b087      	sub	sp, #28
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800216c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	021a      	lsls	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4313      	orrs	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	609a      	str	r2, [r3, #8]
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e03d      	b.n	8002228 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80021de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002202:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	4313      	orrs	r3, r2
 800220c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40013400 	.word	0x40013400

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	4d0d      	ldr	r5, [pc, #52]	; (8002274 <__libc_init_array+0x38>)
 8002240:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002242:	1b64      	subs	r4, r4, r5
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	2600      	movs	r6, #0
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	4d0b      	ldr	r5, [pc, #44]	; (800227c <__libc_init_array+0x40>)
 800224e:	4c0c      	ldr	r4, [pc, #48]	; (8002280 <__libc_init_array+0x44>)
 8002250:	f000 f818 	bl	8002284 <_init>
 8002254:	1b64      	subs	r4, r4, r5
 8002256:	10a4      	asrs	r4, r4, #2
 8002258:	2600      	movs	r6, #0
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	08002320 	.word	0x08002320
 8002278:	08002320 	.word	0x08002320
 800227c:	08002320 	.word	0x08002320
 8002280:	08002324 	.word	0x08002324

08002284 <_init>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	bf00      	nop
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr

08002290 <_fini>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	bf00      	nop
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr
