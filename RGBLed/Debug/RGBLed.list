
RGBLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d1c  08002d1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d1c  08002d1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d1c  08002d1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002d30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002d30  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a628  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001937  00000000  00000000  0002a664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028190  00000000  00000000  0002d588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5d7  00000000  00000000  00055718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f924b  00000000  00000000  00061cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015af3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  0015af8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002c8c 	.word	0x08002c8c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002c8c 	.word	0x08002c8c

080001ec <joy_init>:
#define JOY_UP_GPIO_Port GPIOE
#define JOY_OK_Pin GPIO_PIN_15
#define JOY_OK_GPIO_Port GPIOE

void joy_init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <joy_init+0x40>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <joy_init+0x40>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <joy_init+0x40>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	f003 0310 	and.w	r3, r3, #16
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_UP_Pin JOY_OK_Pin JOY_RIGHT_Pin 
                           JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_UP_Pin|JOY_OK_Pin|JOY_RIGHT_Pin 
 800020a:	f248 030f 	movw	r3, #32783	; 0x800f
 800020e:	607b      	str	r3, [r7, #4]
                          |JOY_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000210:	2300      	movs	r3, #0
 8000212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4619      	mov	r1, r3
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <joy_init+0x44>)
 800021e:	f000 fc4b 	bl	8000ab8 <HAL_GPIO_Init>
}
 8000222:	bf00      	nop
 8000224:	3718      	adds	r7, #24
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	48001000 	.word	0x48001000

08000234 <led_rgb_init>:
TIM_OC_InitTypeDef sConfigOC;

static void MX_TIM4_Init(void);

void led_rgb_init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <led_rgb_init+0x60>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <led_rgb_init+0x60>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <led_rgb_init+0x60>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	f003 0308 	and.w	r3, r3, #8
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <led_rgb_init+0x60>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <led_rgb_init+0x60>)
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <led_rgb_init+0x60>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	683b      	ldr	r3, [r7, #0]
	MX_TIM4_Init();
 800026a:	f000 f88b 	bl	8000384 <MX_TIM4_Init>
	HAL_TIM_Base_Start(&htim4);
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <led_rgb_init+0x64>)
 8000270:	f001 fc82 	bl	8001b78 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <led_rgb_init+0x64>)
 8000278:	f001 fd48 	bl	8001d0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800027c:	2104      	movs	r1, #4
 800027e:	4806      	ldr	r0, [pc, #24]	; (8000298 <led_rgb_init+0x64>)
 8000280:	f001 fd44 	bl	8001d0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000284:	2108      	movs	r1, #8
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <led_rgb_init+0x64>)
 8000288:	f001 fd40 	bl	8001d0c <HAL_TIM_PWM_Start>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	20000028 	.word	0x20000028

0800029c <led_rgb_set_intensity>:

void led_rgb_set_intensity(uint8_t r_intensity, uint8_t g_intensity, uint8_t b_intensity)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	460b      	mov	r3, r1
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	4613      	mov	r3, r2
 80002ac:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, b_intensity);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <led_rgb_set_intensity+0x38>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	797a      	ldrb	r2, [r7, #5]
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, r_intensity);
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <led_rgb_set_intensity+0x38>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, g_intensity);	
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <led_rgb_set_intensity+0x38>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028

080002d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM4)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_TIM_Base_MspInit+0x38>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d10b      	bne.n	8000302 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_TIM_Base_MspInit+0x3c>)
 80002ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <HAL_TIM_Base_MspInit+0x3c>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	6593      	str	r3, [r2, #88]	; 0x58
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <HAL_TIM_Base_MspInit+0x3c>)
 80002f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fa:	f003 0304 	and.w	r3, r3, #4
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40000800 	.word	0x40000800
 8000314:	40021000 	.word	0x40021000

08000318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <HAL_TIM_MspPostInit+0x60>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d121      	bne.n	800036e <HAL_TIM_MspPostInit+0x56>
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = LEDB_TIM4_CH1_Pin|LEDR_TIM4_CH2_Pin;
 800032a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800032e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000330:	2302      	movs	r3, #2
 8000332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <HAL_TIM_MspPostInit+0x64>)
 8000348:	f000 fbb6 	bl	8000ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDG_TIM4_CH3_Pin;
 800034c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000352:	2302      	movs	r3, #2
 8000354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEDG_TIM4_CH3_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <HAL_TIM_MspPostInit+0x68>)
 800036a:	f000 fba5 	bl	8000ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40000800 	.word	0x40000800
 800037c:	48000c00 	.word	0x48000c00
 8000380:	48000400 	.word	0x48000400

08000384 <MX_TIM4_Init>:
}


/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 800038a:	4b40      	ldr	r3, [pc, #256]	; (800048c <MX_TIM4_Init+0x108>)
 800038c:	4a40      	ldr	r2, [pc, #256]	; (8000490 <MX_TIM4_Init+0x10c>)
 800038e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = HAL_RCC_GetHCLKFreq() / 400 / 256 - 1;
 8000390:	f001 fb2e 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8000394:	4603      	mov	r3, r0
 8000396:	4a3f      	ldr	r2, [pc, #252]	; (8000494 <MX_TIM4_Init+0x110>)
 8000398:	fba2 2303 	umull	r2, r3, r2, r3
 800039c:	0bdb      	lsrs	r3, r3, #15
 800039e:	3b01      	subs	r3, #1
 80003a0:	4a3a      	ldr	r2, [pc, #232]	; (800048c <MX_TIM4_Init+0x108>)
 80003a2:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <MX_TIM4_Init+0x108>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80003aa:	4b38      	ldr	r3, [pc, #224]	; (800048c <MX_TIM4_Init+0x108>)
 80003ac:	22ff      	movs	r2, #255	; 0xff
 80003ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b36      	ldr	r3, [pc, #216]	; (800048c <MX_TIM4_Init+0x108>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003b6:	4835      	ldr	r0, [pc, #212]	; (800048c <MX_TIM4_Init+0x108>)
 80003b8:	f001 fb86 	bl	8001ac8 <HAL_TIM_Base_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d003      	beq.n	80003ca <MX_TIM4_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003c2:	217b      	movs	r1, #123	; 0x7b
 80003c4:	4834      	ldr	r0, [pc, #208]	; (8000498 <MX_TIM4_Init+0x114>)
 80003c6:	f000 f8d9 	bl	800057c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	482d      	ldr	r0, [pc, #180]	; (800048c <MX_TIM4_Init+0x108>)
 80003d8:	f001 feb2 	bl	8002140 <HAL_TIM_ConfigClockSource>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <MX_TIM4_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003e2:	2181      	movs	r1, #129	; 0x81
 80003e4:	482c      	ldr	r0, [pc, #176]	; (8000498 <MX_TIM4_Init+0x114>)
 80003e6:	f000 f8c9 	bl	800057c <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80003ea:	4828      	ldr	r0, [pc, #160]	; (800048c <MX_TIM4_Init+0x108>)
 80003ec:	f001 fc2c 	bl	8001c48 <HAL_TIM_PWM_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d003      	beq.n	80003fe <MX_TIM4_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003f6:	2186      	movs	r1, #134	; 0x86
 80003f8:	4827      	ldr	r0, [pc, #156]	; (8000498 <MX_TIM4_Init+0x114>)
 80003fa:	f000 f8bf 	bl	800057c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4820      	ldr	r0, [pc, #128]	; (800048c <MX_TIM4_Init+0x108>)
 800040c:	f002 fb92 	bl	8002b34 <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d003      	beq.n	800041e <MX_TIM4_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000416:	218d      	movs	r1, #141	; 0x8d
 8000418:	481f      	ldr	r0, [pc, #124]	; (8000498 <MX_TIM4_Init+0x114>)
 800041a:	f000 f8af 	bl	800057c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <MX_TIM4_Init+0x118>)
 8000420:	2260      	movs	r2, #96	; 0x60
 8000422:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <MX_TIM4_Init+0x118>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <MX_TIM4_Init+0x118>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <MX_TIM4_Init+0x118>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000436:	2200      	movs	r2, #0
 8000438:	4918      	ldr	r1, [pc, #96]	; (800049c <MX_TIM4_Init+0x118>)
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <MX_TIM4_Init+0x108>)
 800043c:	f001 fd6c 	bl	8001f18 <HAL_TIM_PWM_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <MX_TIM4_Init+0xca>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000446:	2196      	movs	r1, #150	; 0x96
 8000448:	4813      	ldr	r0, [pc, #76]	; (8000498 <MX_TIM4_Init+0x114>)
 800044a:	f000 f897 	bl	800057c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800044e:	2204      	movs	r2, #4
 8000450:	4912      	ldr	r1, [pc, #72]	; (800049c <MX_TIM4_Init+0x118>)
 8000452:	480e      	ldr	r0, [pc, #56]	; (800048c <MX_TIM4_Init+0x108>)
 8000454:	f001 fd60 	bl	8001f18 <HAL_TIM_PWM_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d003      	beq.n	8000466 <MX_TIM4_Init+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800045e:	219b      	movs	r1, #155	; 0x9b
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <MX_TIM4_Init+0x114>)
 8000462:	f000 f88b 	bl	800057c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000466:	2208      	movs	r2, #8
 8000468:	490c      	ldr	r1, [pc, #48]	; (800049c <MX_TIM4_Init+0x118>)
 800046a:	4808      	ldr	r0, [pc, #32]	; (800048c <MX_TIM4_Init+0x108>)
 800046c:	f001 fd54 	bl	8001f18 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d003      	beq.n	800047e <MX_TIM4_Init+0xfa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000476:	21a0      	movs	r1, #160	; 0xa0
 8000478:	4807      	ldr	r0, [pc, #28]	; (8000498 <MX_TIM4_Init+0x114>)
 800047a:	f000 f87f 	bl	800057c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 800047e:	4803      	ldr	r0, [pc, #12]	; (800048c <MX_TIM4_Init+0x108>)
 8000480:	f7ff ff4a 	bl	8000318 <HAL_TIM_MspPostInit>

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000028 	.word	0x20000028
 8000490:	40000800 	.word	0x40000800
 8000494:	51eb851f 	.word	0x51eb851f
 8000498:	08002ca4 	.word	0x08002ca4
 800049c:	20000074 	.word	0x20000074

080004a0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a4:	f000 f983 	bl	80007ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a8:	f000 f806 	bl	80004b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

	// initialize KAMeLeon peripherals used in this project
	joy_init();
 80004ac:	f7ff fe9e 	bl	80001ec <joy_init>
	led_rgb_init();
 80004b0:	f7ff fec0 	bl	8000234 <led_rgb_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <main+0x14>
	...

080004b8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b096      	sub	sp, #88	; 0x58
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004be:	2310      	movs	r3, #16
 80004c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c2:	2301      	movs	r3, #1
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004ca:	2360      	movs	r3, #96	; 0x60
 80004cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	2302      	movs	r3, #2
 80004d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004d2:	2301      	movs	r3, #1
 80004d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004da:	2328      	movs	r3, #40	; 0x28
 80004dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004de:	2302      	movs	r3, #2
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fcd8 	bl	8000ea4 <HAL_RCC_OscConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d003      	beq.n	8000502 <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004fa:	218d      	movs	r1, #141	; 0x8d
 80004fc:	481d      	ldr	r0, [pc, #116]	; (8000574 <SystemClock_Config+0xbc>)
 80004fe:	f000 f83d 	bl	800057c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2303      	movs	r3, #3
 8000508:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2104      	movs	r1, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f8dc 	bl	80016d8 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d003      	beq.n	800052e <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000526:	219b      	movs	r1, #155	; 0x9b
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <SystemClock_Config+0xbc>)
 800052a:	f000 f827 	bl	800057c <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000532:	f000 fc61 	bl	8000df8 <HAL_PWREx_ControlVoltageScaling>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d003      	beq.n	8000544 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800053c:	21a2      	movs	r1, #162	; 0xa2
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <SystemClock_Config+0xbc>)
 8000540:	f000 f81c 	bl	800057c <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000544:	f001 fa54 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8000548:	4603      	mov	r3, r0
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <SystemClock_Config+0xc0>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	099b      	lsrs	r3, r3, #6
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fa79 	bl	8000a4a <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000558:	2004      	movs	r0, #4
 800055a:	f000 fa83 	bl	8000a64 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000566:	f000 fa54 	bl	8000a12 <HAL_NVIC_SetPriority>
}
 800056a:	bf00      	nop
 800056c:	3758      	adds	r7, #88	; 0x58
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	08002cc8 	.word	0x08002cc8
 8000578:	10624dd3 	.word	0x10624dd3

0800057c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000586:	e7fe      	b.n	8000586 <_Error_Handler+0xa>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <HAL_MspInit+0x98>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000592:	4a23      	ldr	r2, [pc, #140]	; (8000620 <HAL_MspInit+0x98>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6613      	str	r3, [r2, #96]	; 0x60
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <HAL_MspInit+0x98>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_MspInit+0x98>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005aa:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_MspInit+0x98>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	6593      	str	r3, [r2, #88]	; 0x58
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_MspInit+0x98>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 fa1c 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	f06f 000b 	mvn.w	r0, #11
 80005cc:	f000 fa21 	bl	8000a12 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	f06f 000a 	mvn.w	r0, #10
 80005d8:	f000 fa1b 	bl	8000a12 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	f06f 0009 	mvn.w	r0, #9
 80005e4:	f000 fa15 	bl	8000a12 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	f06f 0004 	mvn.w	r0, #4
 80005f0:	f000 fa0f 	bl	8000a12 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	f06f 0003 	mvn.w	r0, #3
 80005fc:	f000 fa09 	bl	8000a12 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	f06f 0001 	mvn.w	r0, #1
 8000608:	f000 fa03 	bl	8000a12 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000614:	f000 f9fd 	bl	8000a12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <NMI_Handler+0x4>

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000670:	f000 f8f2 	bl	8000858 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000674:	f000 fa12 	bl	8000a9c <HAL_SYSTICK_IRQHandler>
	static uint8_t interrupt = 0;
	static uint8_t _red, _green, _blue= 0;
	static uint8_t _activeColor = 0;


	if(++interrupt == 50) // we've counted 50 interrupts
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SysTick_Handler+0xb8>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SysTick_Handler+0xb8>)
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SysTick_Handler+0xb8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b32      	cmp	r3, #50	; 0x32
 800068a:	d148      	bne.n	800071e <SysTick_Handler+0xb2>
	{
		interrupt = 0; // reset the interrupt counter
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SysTick_Handler+0xb8>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		if (JOY_RIGHT_DOWN)
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SysTick_Handler+0xbc>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SysTick_Handler+0x36>
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <SysTick_Handler+0x38>
 80006a2:	2300      	movs	r3, #0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <SysTick_Handler+0x48>
			_blue++;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SysTick_Handler+0xc0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <SysTick_Handler+0xc0>)
 80006b2:	701a      	strb	r2, [r3, #0]
		if (JOY_LEFT_DOWN)
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <SysTick_Handler+0xbc>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	43db      	mvns	r3, r3
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d005      	beq.n	80006ce <SysTick_Handler+0x62>
			_red++;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <SysTick_Handler+0xc4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <SysTick_Handler+0xc4>)
 80006cc:	701a      	strb	r2, [r3, #0]
		if (JOY_UP_DOWN)
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <SysTick_Handler+0xbc>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	f003 0308 	and.w	r3, r3, #8
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <SysTick_Handler+0x7c>
			_green++;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <SysTick_Handler+0xc8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <SysTick_Handler+0xc8>)
 80006e6:	701a      	strb	r2, [r3, #0]
		if (JOY_DOWN_DOWN)
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <SysTick_Handler+0xbc>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	43db      	mvns	r3, r3
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00a      	beq.n	800070c <SysTick_Handler+0xa0>
			_red = _green = _blue = 0;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <SysTick_Handler+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <SysTick_Handler+0xc0>)
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <SysTick_Handler+0xc8>)
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <SysTick_Handler+0xc8>)
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <SysTick_Handler+0xc4>)
 800070a:	701a      	strb	r2, [r3, #0]
		led_rgb_set_intensity(_red, _green, _blue);
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <SysTick_Handler+0xc4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <SysTick_Handler+0xc8>)
 8000712:	7811      	ldrb	r1, [r2, #0]
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <SysTick_Handler+0xc0>)
 8000716:	7812      	ldrb	r2, [r2, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fdbf 	bl	800029c <led_rgb_set_intensity>
//
//		led_rgb_set_intensity(_red, _green, _blue);
//	}

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000090 	.word	0x20000090
 8000728:	48001000 	.word	0x48001000
 800072c:	20000091 	.word	0x20000091
 8000730:	20000092 	.word	0x20000092
 8000734:	20000093 	.word	0x20000093

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000760:	f7ff ffea 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f002 fa5b 	bl	8002c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078e:	f7ff fe87 	bl	80004a0 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000794:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007a0:	08002d24 	.word	0x08002d24
  ldr r2, =_sbss
 80007a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a8:	20000098 	.word	0x20000098

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>

080007ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f91f 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f80e 	bl	80007e0 <HAL_InitTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	e001      	b.n	80007d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007d0:	f7ff feda 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_InitTick+0x6c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d023      	beq.n	800083c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_InitTick+0x70>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_InitTick+0x6c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f91d 	bl	8000a4a <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10f      	bne.n	8000836 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d809      	bhi.n	8000830 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000824:	f000 f8f5 	bl	8000a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_InitTick+0x74>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e007      	b.n	8000840 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e004      	b.n	8000840 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e001      	b.n	8000840 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	20000000 	.word	0x20000000
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008
 800087c:	20000094 	.word	0x20000094

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000094 	.word	0x20000094

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009dc:	f7ff ff8e 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff47 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff5c 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff8e 	bl	8000950 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffb0 	bl	80009b8 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d106      	bne.n	8000a80 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a7e:	e005      	b.n	8000a8c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a86:	f023 0304 	bic.w	r3, r3, #4
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000aa0:	f000 f802 	bl	8000aa8 <HAL_SYSTICK_Callback>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	e166      	b.n	8000d96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 8158 	beq.w	8000d90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d005      	beq.n	8000af8 <HAL_GPIO_Init+0x40>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d130      	bne.n	8000b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	f003 0201 	and.w	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d017      	beq.n	8000b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d123      	bne.n	8000bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	08da      	lsrs	r2, r3, #3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3208      	adds	r2, #8
 8000baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	220f      	movs	r2, #15
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	08da      	lsrs	r2, r3, #3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3208      	adds	r2, #8
 8000be4:	6939      	ldr	r1, [r7, #16]
 8000be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0203 	and.w	r2, r3, #3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 80b2 	beq.w	8000d90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2c:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c30:	4a60      	ldr	r2, [pc, #384]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6613      	str	r3, [r2, #96]	; 0x60
 8000c38:	4b5e      	ldr	r3, [pc, #376]	; (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c44:	4a5c      	ldr	r2, [pc, #368]	; (8000db8 <HAL_GPIO_Init+0x300>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c6e:	d02b      	beq.n	8000cc8 <HAL_GPIO_Init+0x210>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a52      	ldr	r2, [pc, #328]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d025      	beq.n	8000cc4 <HAL_GPIO_Init+0x20c>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <HAL_GPIO_Init+0x308>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d01f      	beq.n	8000cc0 <HAL_GPIO_Init+0x208>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a50      	ldr	r2, [pc, #320]	; (8000dc4 <HAL_GPIO_Init+0x30c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x204>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_GPIO_Init+0x310>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x200>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a4e      	ldr	r2, [pc, #312]	; (8000dcc <HAL_GPIO_Init+0x314>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1fc>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x318>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1f8>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <HAL_GPIO_Init+0x31c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1f4>
 8000ca8:	2307      	movs	r3, #7
 8000caa:	e00e      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cac:	2308      	movs	r3, #8
 8000cae:	e00c      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	e00a      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	e008      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e004      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e002      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <HAL_GPIO_Init+0x212>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	f002 0203 	and.w	r2, r2, #3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4093      	lsls	r3, r2
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cda:	4937      	ldr	r1, [pc, #220]	; (8000db8 <HAL_GPIO_Init+0x300>)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce8:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d0c:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_GPIO_Init+0x320>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f ae91 	bne.w	8000ac8 <HAL_GPIO_Init+0x10>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	48000400 	.word	0x48000400
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48000c00 	.word	0x48000c00
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	48001400 	.word	0x48001400
 8000dd0:	48001800 	.word	0x48001800
 8000dd4:	48001c00 	.word	0x48001c00
 8000dd8:	40010400 	.word	0x40010400

08000ddc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40007000 	.word	0x40007000

08000df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e06:	d130      	bne.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e14:	d038      	beq.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2232      	movs	r2, #50	; 0x32
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	0c9b      	lsrs	r3, r3, #18
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3c:	e002      	b.n	8000e44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e50:	d102      	bne.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f2      	bne.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e64:	d110      	bne.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e00f      	b.n	8000e8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e76:	d007      	beq.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40007000 	.word	0x40007000
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	431bde83 	.word	0x431bde83

08000ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f000 bc08 	b.w	80016c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb8:	4b96      	ldr	r3, [pc, #600]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec2:	4b94      	ldr	r3, [pc, #592]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80e4 	beq.w	80010a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x4c>
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2b0c      	cmp	r3, #12
 8000ee4:	f040 808b 	bne.w	8000ffe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	f040 8087 	bne.w	8000ffe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ef0:	4b88      	ldr	r3, [pc, #544]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_RCC_OscConfig+0x64>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e3df      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1a      	ldr	r2, [r3, #32]
 8000f0c:	4b81      	ldr	r3, [pc, #516]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_RCC_OscConfig+0x7e>
 8000f18:	4b7e      	ldr	r3, [pc, #504]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f20:	e005      	b.n	8000f2e <HAL_RCC_OscConfig+0x8a>
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d223      	bcs.n	8000f7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fd66 	bl	8001a08 <RCC_SetFlashLatencyFromMSIRange>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e3c0      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f46:	4b73      	ldr	r3, [pc, #460]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a72      	ldr	r2, [pc, #456]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b70      	ldr	r3, [pc, #448]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	496d      	ldr	r1, [pc, #436]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f64:	4b6b      	ldr	r3, [pc, #428]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	4968      	ldr	r1, [pc, #416]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
 8000f78:	e025      	b.n	8000fc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f7a:	4b66      	ldr	r3, [pc, #408]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a65      	ldr	r2, [pc, #404]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b63      	ldr	r3, [pc, #396]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4960      	ldr	r1, [pc, #384]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f98:	4b5e      	ldr	r3, [pc, #376]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	495b      	ldr	r1, [pc, #364]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd26 	bl	8001a08 <RCC_SetFlashLatencyFromMSIRange>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e380      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fc6:	f000 fc87 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b51      	ldr	r3, [pc, #324]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	4950      	ldr	r1, [pc, #320]	; (8001118 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	5ccb      	ldrb	r3, [r1, r3]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_RCC_OscConfig+0x278>)
 8000fe4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <HAL_RCC_OscConfig+0x27c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fbf8 	bl	80007e0 <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d052      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	e364      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d032      	beq.n	800106c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001006:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a42      	ldr	r2, [pc, #264]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001012:	f7ff fc35 	bl	8000880 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800101a:	f7ff fc31 	bl	8000880 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e34d      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a35      	ldr	r2, [pc, #212]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4930      	ldr	r1, [pc, #192]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	492b      	ldr	r1, [pc, #172]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001066:	4313      	orrs	r3, r2
 8001068:	604b      	str	r3, [r1, #4]
 800106a:	e01a      	b.n	80010a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc02 	bl	8000880 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001080:	f7ff fbfe 	bl	8000880 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e31a      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x1dc>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d073      	beq.n	8001196 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_OscConfig+0x21c>
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d10e      	bne.n	80010d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d10b      	bne.n	80010d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d063      	beq.n	8001194 <HAL_RCC_OscConfig+0x2f0>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d15f      	bne.n	8001194 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e2f7      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d106      	bne.n	80010f0 <HAL_RCC_OscConfig+0x24c>
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e025      	b.n	800113c <HAL_RCC_OscConfig+0x298>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d114      	bne.n	8001124 <HAL_RCC_OscConfig+0x280>
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a02      	ldr	r2, [pc, #8]	; (8001114 <HAL_RCC_OscConfig+0x270>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e013      	b.n	800113c <HAL_RCC_OscConfig+0x298>
 8001114:	40021000 	.word	0x40021000
 8001118:	08002cdc 	.word	0x08002cdc
 800111c:	20000000 	.word	0x20000000
 8001120:	20000004 	.word	0x20000004
 8001124:	4ba0      	ldr	r3, [pc, #640]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a9f      	ldr	r2, [pc, #636]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b9d      	ldr	r3, [pc, #628]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a9c      	ldr	r2, [pc, #624]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001144:	f7ff fb9c 	bl	8000880 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fb98 	bl	8000880 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e2b4      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800115e:	4b92      	ldr	r3, [pc, #584]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x2a8>
 800116a:	e014      	b.n	8001196 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fb88 	bl	8000880 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fb84 	bl	8000880 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e2a0      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x2d0>
 8001192:	e000      	b.n	8001196 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d060      	beq.n	8001264 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x310>
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	d119      	bne.n	80011e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d116      	bne.n	80011e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b4:	4b7c      	ldr	r3, [pc, #496]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x328>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e27d      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b76      	ldr	r3, [pc, #472]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	061b      	lsls	r3, r3, #24
 80011da:	4973      	ldr	r1, [pc, #460]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e0:	e040      	b.n	8001264 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d023      	beq.n	8001232 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ea:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a6e      	ldr	r2, [pc, #440]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80011f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fb43 	bl	8000880 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fb3f 	bl	8000880 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e25b      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001210:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	061b      	lsls	r3, r3, #24
 800122a:	495f      	ldr	r1, [pc, #380]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
 8001230:	e018      	b.n	8001264 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	4b5d      	ldr	r3, [pc, #372]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800123c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fb1f 	bl	8000880 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fb1b 	bl	8000880 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e237      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d03c      	beq.n	80012ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d01c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001278:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fafa 	bl	8000880 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff faf6 	bl	8000880 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e212      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80012a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0ef      	beq.n	8001290 <HAL_RCC_OscConfig+0x3ec>
 80012b0:	e01b      	b.n	80012ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b8:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fadd 	bl	8000880 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fad9 	bl	8000880 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1f5      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80012de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ef      	bne.n	80012ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 80a6 	beq.w	8001444 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10d      	bne.n	8001324 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001312:	6593      	str	r3, [r2, #88]	; 0x58
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001320:	2301      	movs	r3, #1
 8001322:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_RCC_OscConfig+0x508>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d118      	bne.n	8001362 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_RCC_OscConfig+0x508>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x508>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133c:	f7ff faa0 	bl	8000880 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001344:	f7ff fa9c 	bl	8000880 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1b8      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_RCC_OscConfig+0x508>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <HAL_RCC_OscConfig+0x4d8>
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800136c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137a:	e029      	b.n	80013d0 <HAL_RCC_OscConfig+0x52c>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b05      	cmp	r3, #5
 8001382:	d115      	bne.n	80013b0 <HAL_RCC_OscConfig+0x50c>
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139a:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_RCC_OscConfig+0x504>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a4:	e014      	b.n	80013d0 <HAL_RCC_OscConfig+0x52c>
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40007000 	.word	0x40007000
 80013b0:	4b9d      	ldr	r3, [pc, #628]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	4a9c      	ldr	r2, [pc, #624]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013c0:	4b99      	ldr	r3, [pc, #612]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80013c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c6:	4a98      	ldr	r2, [pc, #608]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d016      	beq.n	8001406 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fa52 	bl	8000880 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fa4e 	bl	8000880 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e168      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f6:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ed      	beq.n	80013e0 <HAL_RCC_OscConfig+0x53c>
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fa3b 	bl	8000880 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fa37 	bl	8000880 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e151      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001424:	4b80      	ldr	r3, [pc, #512]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ed      	bne.n	800140e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b7b      	ldr	r3, [pc, #492]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	4a7a      	ldr	r2, [pc, #488]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 800143e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001442:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	d03c      	beq.n	80014ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01c      	beq.n	8001492 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001458:	4b73      	ldr	r3, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 800145a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145e:	4a72      	ldr	r2, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fa0a 	bl	8000880 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001470:	f7ff fa06 	bl	8000880 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e122      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001482:	4b69      	ldr	r3, [pc, #420]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001484:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ef      	beq.n	8001470 <HAL_RCC_OscConfig+0x5cc>
 8001490:	e01b      	b.n	80014ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001492:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001498:	4a63      	ldr	r2, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff f9ed 	bl	8000880 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014aa:	f7ff f9e9 	bl	8000880 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e105      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80014be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ef      	bne.n	80014aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80f9 	beq.w	80016c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	2b02      	cmp	r3, #2
 80014da:	f040 80cf 	bne.w	800167c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d12c      	bne.n	800154c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	3b01      	subs	r3, #1
 80014fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d123      	bne.n	800154c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d11b      	bne.n	800154c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d113      	bne.n	800154c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d109      	bne.n	800154c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	3b01      	subs	r3, #1
 8001546:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d071      	beq.n	8001630 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d068      	beq.n	8001624 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0ac      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001578:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800157a:	f7ff f981 	bl	8000880 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff f97d 	bl	8000880 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e099      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f0      	bne.n	8001582 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x788>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ba:	0212      	lsls	r2, r2, #8
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015c2:	0852      	lsrs	r2, r2, #1
 80015c4:	3a01      	subs	r2, #1
 80015c6:	0552      	lsls	r2, r2, #21
 80015c8:	4311      	orrs	r1, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015ce:	0852      	lsrs	r2, r2, #1
 80015d0:	3a01      	subs	r2, #1
 80015d2:	0652      	lsls	r2, r2, #25
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015da:	06d2      	lsls	r2, r2, #27
 80015dc:	430a      	orrs	r2, r1
 80015de:	4912      	ldr	r1, [pc, #72]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80015ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015fc:	f7ff f940 	bl	8000880 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff f93c 	bl	8000880 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e058      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_RCC_OscConfig+0x784>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001622:	e050      	b.n	80016c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e04f      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
 8001628:	40021000 	.word	0x40021000
 800162c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d144      	bne.n	80016c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 8001642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001646:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001652:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001654:	f7ff f914 	bl	8000880 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff f910 	bl	8000880 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e02c      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x7b8>
 800167a:	e024      	b.n	80016c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d01f      	beq.n	80016c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 8001688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff f8f7 	bl	8000880 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff f8f3 	bl	8000880 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e00f      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	4905      	ldr	r1, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x82c>)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x830>)
 80016bc:	4013      	ands	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
 80016c0:	e001      	b.n	80016c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	feeefffc 	.word	0xfeeefffc

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0e7      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d910      	bls.n	800171c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b72      	ldr	r3, [pc, #456]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0207 	bic.w	r2, r3, #7
 8001702:	4970      	ldr	r1, [pc, #448]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0cf      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d010      	beq.n	800174a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001734:	429a      	cmp	r2, r3
 8001736:	d908      	bls.n	800174a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4960      	ldr	r1, [pc, #384]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04c      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d121      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0a6      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e09a      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e08e      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e086      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4943      	ldr	r1, [pc, #268]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c0:	f7ff f85e 	bl	8000880 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff f85a 	bl	8000880 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e06e      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d010      	beq.n	800181e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001808:	429a      	cmp	r2, r3
 800180a:	d208      	bcs.n	800181e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	492b      	ldr	r1, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d210      	bcs.n	800184e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 0207 	bic.w	r2, r3, #7
 8001834:	4923      	ldr	r1, [pc, #140]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_ClockConfig+0x1ec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e036      	b.n	80018bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4918      	ldr	r1, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4910      	ldr	r1, [pc, #64]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800188c:	f000 f824 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001890:	4602      	mov	r2, r0
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	490b      	ldr	r1, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1f4>)
 800189e:	5ccb      	ldrb	r3, [r1, r3]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1fc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe ff95 	bl	80007e0 <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018ba:	7afb      	ldrb	r3, [r7, #11]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08002cdc 	.word	0x08002cdc
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x34>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d121      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d11e      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e005      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001934:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d102      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	e004      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d101      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_GetSysClockFreq+0x114>)
 800195e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d134      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0xa6>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d003      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0xac>
 800197c:	e005      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001980:	617b      	str	r3, [r7, #20]
      break;
 8001982:	e005      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_GetSysClockFreq+0x114>)
 8001986:	617b      	str	r3, [r7, #20]
      break;
 8001988:	e002      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	617b      	str	r3, [r7, #20]
      break;
 800198e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	3301      	adds	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	fb03 f202 	mul.w	r2, r3, r2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	0e5b      	lsrs	r3, r3, #25
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	3301      	adds	r3, #1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019d0:	69bb      	ldr	r3, [r7, #24]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08002cec 	.word	0x08002cec
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	007a1200 	.word	0x007a1200

080019f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000

08001a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a20:	f7ff f9dc 	bl	8000ddc <HAL_PWREx_GetVoltageRange>
 8001a24:	6178      	str	r0, [r7, #20]
 8001a26:	e014      	b.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a40:	f7ff f9cc 	bl	8000ddc <HAL_PWREx_GetVoltageRange>
 8001a44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a58:	d10b      	bne.n	8001a72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d919      	bls.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2ba0      	cmp	r3, #160	; 0xa0
 8001a64:	d902      	bls.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a66:	2302      	movs	r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e013      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e010      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d902      	bls.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a78:	2303      	movs	r3, #3
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e00a      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b80      	cmp	r3, #128	; 0x80
 8001a82:	d102      	bne.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e004      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b70      	cmp	r3, #112	; 0x70
 8001a8e:	d101      	bne.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a90:	2301      	movs	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 0207 	bic.w	r2, r3, #7
 8001a9c:	4909      	ldr	r1, [pc, #36]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e049      	b.n	8001b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe fbf2 	bl	80002d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 fbe4 	bl	80022d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e047      	b.n	8001c20 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <HAL_TIM_Base_Start+0xb4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <HAL_TIM_Base_Start+0x66>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d018      	beq.n	8001bde <HAL_TIM_Base_Start+0x66>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_TIM_Base_Start+0xb8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_TIM_Base_Start+0x66>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_TIM_Base_Start+0xbc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00e      	beq.n	8001bde <HAL_TIM_Base_Start+0x66>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_TIM_Base_Start+0xc0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_TIM_Base_Start+0x66>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_TIM_Base_Start+0xc4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_TIM_Base_Start+0x66>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_TIM_Base_Start+0xc8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d115      	bne.n	8001c0a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_TIM_Base_Start+0xcc>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b06      	cmp	r3, #6
 8001bee:	d015      	beq.n	8001c1c <HAL_TIM_Base_Start+0xa4>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d011      	beq.n	8001c1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	e008      	b.n	8001c1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e000      	b.n	8001c1e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	40013400 	.word	0x40013400
 8001c40:	40014000 	.word	0x40014000
 8001c44:	00010007 	.word	0x00010007

08001c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e049      	b.n	8001cee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f841 	bl	8001cf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f000 fb24 	bl	80022d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_TIM_PWM_Start+0x24>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e03c      	b.n	8001daa <HAL_TIM_PWM_Start+0x9e>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d109      	bne.n	8001d4a <HAL_TIM_PWM_Start+0x3e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e02f      	b.n	8001daa <HAL_TIM_PWM_Start+0x9e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d109      	bne.n	8001d64 <HAL_TIM_PWM_Start+0x58>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e022      	b.n	8001daa <HAL_TIM_PWM_Start+0x9e>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d109      	bne.n	8001d7e <HAL_TIM_PWM_Start+0x72>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	e015      	b.n	8001daa <HAL_TIM_PWM_Start+0x9e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d109      	bne.n	8001d98 <HAL_TIM_PWM_Start+0x8c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e008      	b.n	8001daa <HAL_TIM_PWM_Start+0x9e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09c      	b.n	8001eec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <HAL_TIM_PWM_Start+0xb6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc0:	e023      	b.n	8001e0a <HAL_TIM_PWM_Start+0xfe>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d104      	bne.n	8001dd2 <HAL_TIM_PWM_Start+0xc6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd0:	e01b      	b.n	8001e0a <HAL_TIM_PWM_Start+0xfe>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIM_PWM_Start+0xd6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de0:	e013      	b.n	8001e0a <HAL_TIM_PWM_Start+0xfe>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d104      	bne.n	8001df2 <HAL_TIM_PWM_Start+0xe6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001df0:	e00b      	b.n	8001e0a <HAL_TIM_PWM_Start+0xfe>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d104      	bne.n	8001e02 <HAL_TIM_PWM_Start+0xf6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	e003      	b.n	8001e0a <HAL_TIM_PWM_Start+0xfe>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	6839      	ldr	r1, [r7, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fe68 	bl	8002ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a35      	ldr	r2, [pc, #212]	; (8001ef4 <HAL_TIM_PWM_Start+0x1e8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a34      	ldr	r2, [pc, #208]	; (8001ef8 <HAL_TIM_PWM_Start+0x1ec>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x13e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a32      	ldr	r2, [pc, #200]	; (8001efc <HAL_TIM_PWM_Start+0x1f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x13e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_TIM_PWM_Start+0x1f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x13e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <HAL_TIM_PWM_Start+0x1f8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PWM_Start+0x142>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_TIM_PWM_Start+0x144>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_TIM_PWM_Start+0x1e8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01d      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x19e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e76:	d018      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x19e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_TIM_PWM_Start+0x1fc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x19e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <HAL_TIM_PWM_Start+0x200>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x19e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_TIM_PWM_Start+0x204>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x19e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_TIM_PWM_Start+0x1ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_TIM_PWM_Start+0x19e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a15      	ldr	r2, [pc, #84]	; (8001efc <HAL_TIM_PWM_Start+0x1f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d115      	bne.n	8001ed6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_TIM_PWM_Start+0x208>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d015      	beq.n	8001ee8 <HAL_TIM_PWM_Start+0x1dc>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec2:	d011      	beq.n	8001ee8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed4:	e008      	b.n	8001ee8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e000      	b.n	8001eea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40013400 	.word	0x40013400
 8001efc:	40014000 	.word	0x40014000
 8001f00:	40014400 	.word	0x40014400
 8001f04:	40014800 	.word	0x40014800
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	00010007 	.word	0x00010007

08001f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e0ff      	b.n	8002136 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b14      	cmp	r3, #20
 8001f42:	f200 80f0 	bhi.w	8002126 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fa1 	.word	0x08001fa1
 8001f50:	08002127 	.word	0x08002127
 8001f54:	08002127 	.word	0x08002127
 8001f58:	08002127 	.word	0x08002127
 8001f5c:	08001fe1 	.word	0x08001fe1
 8001f60:	08002127 	.word	0x08002127
 8001f64:	08002127 	.word	0x08002127
 8001f68:	08002127 	.word	0x08002127
 8001f6c:	08002023 	.word	0x08002023
 8001f70:	08002127 	.word	0x08002127
 8001f74:	08002127 	.word	0x08002127
 8001f78:	08002127 	.word	0x08002127
 8001f7c:	08002063 	.word	0x08002063
 8001f80:	08002127 	.word	0x08002127
 8001f84:	08002127 	.word	0x08002127
 8001f88:	08002127 	.word	0x08002127
 8001f8c:	080020a5 	.word	0x080020a5
 8001f90:	08002127 	.word	0x08002127
 8001f94:	08002127 	.word	0x08002127
 8001f98:	08002127 	.word	0x08002127
 8001f9c:	080020e5 	.word	0x080020e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fa2e 	bl	8002408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0208 	orr.w	r2, r2, #8
 8001fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0204 	bic.w	r2, r2, #4
 8001fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6999      	ldr	r1, [r3, #24]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	619a      	str	r2, [r3, #24]
      break;
 8001fde:	e0a5      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fa9e 	bl	8002528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6999      	ldr	r1, [r3, #24]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	021a      	lsls	r2, r3, #8
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	619a      	str	r2, [r3, #24]
      break;
 8002020:	e084      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fb07 	bl	800263c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0208 	orr.w	r2, r2, #8
 800203c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0204 	bic.w	r2, r2, #4
 800204c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69d9      	ldr	r1, [r3, #28]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	61da      	str	r2, [r3, #28]
      break;
 8002060:	e064      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fb6f 	bl	800274c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800207c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69d9      	ldr	r1, [r3, #28]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	61da      	str	r2, [r3, #28]
      break;
 80020a2:	e043      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fbb8 	bl	8002820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0208 	orr.w	r2, r2, #8
 80020be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80020e2:	e023      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fbfc 	bl	80028e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002124:	e002      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
      break;
 800212a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002134:	7dfb      	ldrb	r3, [r7, #23]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop

08002140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIM_ConfigClockSource+0x1c>
 8002158:	2302      	movs	r3, #2
 800215a:	e0b6      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x18a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800217e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002198:	d03e      	beq.n	8002218 <HAL_TIM_ConfigClockSource+0xd8>
 800219a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219e:	f200 8087 	bhi.w	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a6:	f000 8086 	beq.w	80022b6 <HAL_TIM_ConfigClockSource+0x176>
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ae:	d87f      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021b0:	2b70      	cmp	r3, #112	; 0x70
 80021b2:	d01a      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0xaa>
 80021b4:	2b70      	cmp	r3, #112	; 0x70
 80021b6:	d87b      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d050      	beq.n	800225e <HAL_TIM_ConfigClockSource+0x11e>
 80021bc:	2b60      	cmp	r3, #96	; 0x60
 80021be:	d877      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021c0:	2b50      	cmp	r3, #80	; 0x50
 80021c2:	d03c      	beq.n	800223e <HAL_TIM_ConfigClockSource+0xfe>
 80021c4:	2b50      	cmp	r3, #80	; 0x50
 80021c6:	d873      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d058      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x13e>
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d86f      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021d0:	2b30      	cmp	r3, #48	; 0x30
 80021d2:	d064      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15e>
 80021d4:	2b30      	cmp	r3, #48	; 0x30
 80021d6:	d86b      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d060      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15e>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d867      	bhi.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05c      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15e>
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d05a      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x15e>
 80021e8:	e062      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f000 fc55 	bl	8002aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800220c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	609a      	str	r2, [r3, #8]
      break;
 8002216:	e04f      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f000 fc3e 	bl	8002aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800223a:	609a      	str	r2, [r3, #8]
      break;
 800223c:	e03c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	461a      	mov	r2, r3
 800224c:	f000 fbb2 	bl	80029b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2150      	movs	r1, #80	; 0x50
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fc0b 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 800225c:	e02c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	461a      	mov	r2, r3
 800226c:	f000 fbd1 	bl	8002a12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2160      	movs	r1, #96	; 0x60
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fbfb 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 800227c:	e01c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	f000 fb92 	bl	80029b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fbeb 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 800229c:	e00c      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f000 fbe2 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 80022ae:	e003      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e000      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80022b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <TIM_Base_SetConfig+0x114>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f2:	d00f      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3d      	ldr	r2, [pc, #244]	; (80023ec <TIM_Base_SetConfig+0x118>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00b      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <TIM_Base_SetConfig+0x11c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <TIM_Base_SetConfig+0x120>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <TIM_Base_SetConfig+0x124>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d108      	bne.n	8002326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2f      	ldr	r2, [pc, #188]	; (80023e8 <TIM_Base_SetConfig+0x114>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d01b      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2c      	ldr	r2, [pc, #176]	; (80023ec <TIM_Base_SetConfig+0x118>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d017      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2b      	ldr	r2, [pc, #172]	; (80023f0 <TIM_Base_SetConfig+0x11c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <TIM_Base_SetConfig+0x120>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00f      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <TIM_Base_SetConfig+0x124>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00b      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a28      	ldr	r2, [pc, #160]	; (80023fc <TIM_Base_SetConfig+0x128>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <TIM_Base_SetConfig+0x12c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_Base_SetConfig+0x9a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <TIM_Base_SetConfig+0x130>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <TIM_Base_SetConfig+0x114>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00f      	beq.n	80023cc <TIM_Base_SetConfig+0xf8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <TIM_Base_SetConfig+0x124>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00b      	beq.n	80023cc <TIM_Base_SetConfig+0xf8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a11      	ldr	r2, [pc, #68]	; (80023fc <TIM_Base_SetConfig+0x128>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <TIM_Base_SetConfig+0xf8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <TIM_Base_SetConfig+0x12c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_Base_SetConfig+0xf8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <TIM_Base_SetConfig+0x130>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	615a      	str	r2, [r3, #20]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40000800 	.word	0x40000800
 80023f4:	40000c00 	.word	0x40000c00
 80023f8:	40013400 	.word	0x40013400
 80023fc:	40014000 	.word	0x40014000
 8002400:	40014400 	.word	0x40014400
 8002404:	40014800 	.word	0x40014800

08002408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0201 	bic.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a2c      	ldr	r2, [pc, #176]	; (8002514 <TIM_OC1_SetConfig+0x10c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00f      	beq.n	8002488 <TIM_OC1_SetConfig+0x80>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <TIM_OC1_SetConfig+0x110>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00b      	beq.n	8002488 <TIM_OC1_SetConfig+0x80>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a2a      	ldr	r2, [pc, #168]	; (800251c <TIM_OC1_SetConfig+0x114>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <TIM_OC1_SetConfig+0x80>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a29      	ldr	r2, [pc, #164]	; (8002520 <TIM_OC1_SetConfig+0x118>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <TIM_OC1_SetConfig+0x80>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a28      	ldr	r2, [pc, #160]	; (8002524 <TIM_OC1_SetConfig+0x11c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10c      	bne.n	80024a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0308 	bic.w	r3, r3, #8
 800248e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <TIM_OC1_SetConfig+0x10c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_OC1_SetConfig+0xc2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <TIM_OC1_SetConfig+0x110>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_OC1_SetConfig+0xc2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <TIM_OC1_SetConfig+0x114>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_OC1_SetConfig+0xc2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <TIM_OC1_SetConfig+0x118>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_OC1_SetConfig+0xc2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <TIM_OC1_SetConfig+0x11c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	621a      	str	r2, [r3, #32]
}
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40013400 	.word	0x40013400
 800251c:	40014000 	.word	0x40014000
 8002520:	40014400 	.word	0x40014400
 8002524:	40014800 	.word	0x40014800

08002528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f023 0210 	bic.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0320 	bic.w	r3, r3, #32
 8002576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a28      	ldr	r2, [pc, #160]	; (8002628 <TIM_OC2_SetConfig+0x100>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d003      	beq.n	8002594 <TIM_OC2_SetConfig+0x6c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a27      	ldr	r2, [pc, #156]	; (800262c <TIM_OC2_SetConfig+0x104>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10d      	bne.n	80025b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <TIM_OC2_SetConfig+0x100>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00f      	beq.n	80025d8 <TIM_OC2_SetConfig+0xb0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <TIM_OC2_SetConfig+0x104>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00b      	beq.n	80025d8 <TIM_OC2_SetConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <TIM_OC2_SetConfig+0x108>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_OC2_SetConfig+0xb0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <TIM_OC2_SetConfig+0x10c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_OC2_SetConfig+0xb0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <TIM_OC2_SetConfig+0x110>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d113      	bne.n	8002600 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40013400 	.word	0x40013400
 8002630:	40014000 	.word	0x40014000
 8002634:	40014400 	.word	0x40014400
 8002638:	40014800 	.word	0x40014800

0800263c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <TIM_OC3_SetConfig+0xfc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d003      	beq.n	80026a6 <TIM_OC3_SetConfig+0x6a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <TIM_OC3_SetConfig+0x100>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10d      	bne.n	80026c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <TIM_OC3_SetConfig+0xfc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00f      	beq.n	80026ea <TIM_OC3_SetConfig+0xae>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <TIM_OC3_SetConfig+0x100>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_OC3_SetConfig+0xae>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <TIM_OC3_SetConfig+0x104>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <TIM_OC3_SetConfig+0xae>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <TIM_OC3_SetConfig+0x108>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_OC3_SetConfig+0xae>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <TIM_OC3_SetConfig+0x10c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d113      	bne.n	8002712 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	621a      	str	r2, [r3, #32]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40013400 	.word	0x40013400
 8002740:	40014000 	.word	0x40014000
 8002744:	40014400 	.word	0x40014400
 8002748:	40014800 	.word	0x40014800

0800274c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	031b      	lsls	r3, r3, #12
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <TIM_OC4_SetConfig+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00f      	beq.n	80027d0 <TIM_OC4_SetConfig+0x84>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <TIM_OC4_SetConfig+0xc4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00b      	beq.n	80027d0 <TIM_OC4_SetConfig+0x84>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <TIM_OC4_SetConfig+0xc8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d007      	beq.n	80027d0 <TIM_OC4_SetConfig+0x84>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <TIM_OC4_SetConfig+0xcc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_OC4_SetConfig+0x84>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <TIM_OC4_SetConfig+0xd0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d109      	bne.n	80027e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40013400 	.word	0x40013400
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800

08002820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <TIM_OC5_SetConfig+0xb4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_OC5_SetConfig+0x7a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <TIM_OC5_SetConfig+0xb8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_OC5_SetConfig+0x7a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a15      	ldr	r2, [pc, #84]	; (80028dc <TIM_OC5_SetConfig+0xbc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_OC5_SetConfig+0x7a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <TIM_OC5_SetConfig+0xc0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_OC5_SetConfig+0x7a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <TIM_OC5_SetConfig+0xc4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d109      	bne.n	80028ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	621a      	str	r2, [r3, #32]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40013400 	.word	0x40013400
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800

080028e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800292e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <TIM_OC6_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00f      	beq.n	8002964 <TIM_OC6_SetConfig+0x7c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <TIM_OC6_SetConfig+0xbc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <TIM_OC6_SetConfig+0x7c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <TIM_OC6_SetConfig+0xc0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_OC6_SetConfig+0x7c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a15      	ldr	r2, [pc, #84]	; (80029ac <TIM_OC6_SetConfig+0xc4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_OC6_SetConfig+0x7c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <TIM_OC6_SetConfig+0xc8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d109      	bne.n	8002978 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	621a      	str	r2, [r3, #32]
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40013400 	.word	0x40013400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40014400 	.word	0x40014400
 80029b0:	40014800 	.word	0x40014800

080029b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 030a 	bic.w	r3, r3, #10
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f023 0210 	bic.w	r2, r3, #16
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 0307 	orr.w	r3, r3, #7
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	021a      	lsls	r2, r3, #8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2201      	movs	r2, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e068      	b.n	8002c1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d108      	bne.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d018      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10c      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40013400 	.word	0x40013400
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40014000 	.word	0x40014000

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	4d0d      	ldr	r5, [pc, #52]	; (8002c7c <__libc_init_array+0x38>)
 8002c48:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	2600      	movs	r6, #0
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	4d0b      	ldr	r5, [pc, #44]	; (8002c84 <__libc_init_array+0x40>)
 8002c56:	4c0c      	ldr	r4, [pc, #48]	; (8002c88 <__libc_init_array+0x44>)
 8002c58:	f000 f818 	bl	8002c8c <_init>
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	2600      	movs	r6, #0
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08002d1c 	.word	0x08002d1c
 8002c80:	08002d1c 	.word	0x08002d1c
 8002c84:	08002d1c 	.word	0x08002d1c
 8002c88:	08002d20 	.word	0x08002d20

08002c8c <_init>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	bf00      	nop
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr

08002c98 <_fini>:
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	bf00      	nop
 8002c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9e:	bc08      	pop	{r3}
 8002ca0:	469e      	mov	lr, r3
 8002ca2:	4770      	bx	lr
