
RGBLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08002e00  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002e00  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a62d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001926  00000000  00000000  0002a66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028190  00000000  00000000  0002d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c672  00000000  00000000  00055710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f924b  00000000  00000000  00061d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015afcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  0015b020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d58 	.word	0x08002d58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08002d58 	.word	0x08002d58

080001ec <joy_init>:
#define JOY_UP_GPIO_Port GPIOE
#define JOY_OK_Pin GPIO_PIN_15
#define JOY_OK_GPIO_Port GPIOE

void joy_init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <joy_init+0x40>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <joy_init+0x40>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <joy_init+0x40>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	f003 0310 	and.w	r3, r3, #16
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_UP_Pin JOY_OK_Pin JOY_RIGHT_Pin 
                           JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_UP_Pin|JOY_OK_Pin|JOY_RIGHT_Pin 
 800020a:	f248 030f 	movw	r3, #32783	; 0x800f
 800020e:	607b      	str	r3, [r7, #4]
                          |JOY_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000210:	2300      	movs	r3, #0
 8000212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4619      	mov	r1, r3
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <joy_init+0x44>)
 800021e:	f000 fcb1 	bl	8000b84 <HAL_GPIO_Init>
}
 8000222:	bf00      	nop
 8000224:	3718      	adds	r7, #24
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40021000 	.word	0x40021000
 8000230:	48001000 	.word	0x48001000

08000234 <led_rgb_init>:
TIM_OC_InitTypeDef sConfigOC;

static void MX_TIM4_Init(void);

void led_rgb_init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <led_rgb_init+0x60>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <led_rgb_init+0x60>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <led_rgb_init+0x60>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	f003 0308 	and.w	r3, r3, #8
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <led_rgb_init+0x60>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <led_rgb_init+0x60>)
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <led_rgb_init+0x60>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	683b      	ldr	r3, [r7, #0]
	MX_TIM4_Init();
 800026a:	f000 f88b 	bl	8000384 <MX_TIM4_Init>
	HAL_TIM_Base_Start(&htim4);
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <led_rgb_init+0x64>)
 8000270:	f001 fce8 	bl	8001c44 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <led_rgb_init+0x64>)
 8000278:	f001 fdae 	bl	8001dd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800027c:	2104      	movs	r1, #4
 800027e:	4806      	ldr	r0, [pc, #24]	; (8000298 <led_rgb_init+0x64>)
 8000280:	f001 fdaa 	bl	8001dd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000284:	2108      	movs	r1, #8
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <led_rgb_init+0x64>)
 8000288:	f001 fda6 	bl	8001dd8 <HAL_TIM_PWM_Start>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	2000002c 	.word	0x2000002c

0800029c <led_rgb_set_intensity>:

void led_rgb_set_intensity(uint8_t r_intensity, uint8_t g_intensity, uint8_t b_intensity)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	460b      	mov	r3, r1
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	4613      	mov	r3, r2
 80002ac:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, b_intensity);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <led_rgb_set_intensity+0x38>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	797a      	ldrb	r2, [r7, #5]
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, r_intensity);
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <led_rgb_set_intensity+0x38>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, g_intensity);	
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <led_rgb_set_intensity+0x38>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	2000002c 	.word	0x2000002c

080002d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM4)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_TIM_Base_MspInit+0x38>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d10b      	bne.n	8000302 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_TIM_Base_MspInit+0x3c>)
 80002ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <HAL_TIM_Base_MspInit+0x3c>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	6593      	str	r3, [r2, #88]	; 0x58
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <HAL_TIM_Base_MspInit+0x3c>)
 80002f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fa:	f003 0304 	and.w	r3, r3, #4
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40000800 	.word	0x40000800
 8000314:	40021000 	.word	0x40021000

08000318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <HAL_TIM_MspPostInit+0x60>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d121      	bne.n	800036e <HAL_TIM_MspPostInit+0x56>
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = LEDB_TIM4_CH1_Pin|LEDR_TIM4_CH2_Pin;
 800032a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800032e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000330:	2302      	movs	r3, #2
 8000332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <HAL_TIM_MspPostInit+0x64>)
 8000348:	f000 fc1c 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDG_TIM4_CH3_Pin;
 800034c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000352:	2302      	movs	r3, #2
 8000354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEDG_TIM4_CH3_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <HAL_TIM_MspPostInit+0x68>)
 800036a:	f000 fc0b 	bl	8000b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40000800 	.word	0x40000800
 800037c:	48000c00 	.word	0x48000c00
 8000380:	48000400 	.word	0x48000400

08000384 <MX_TIM4_Init>:
}


/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 800038a:	4b40      	ldr	r3, [pc, #256]	; (800048c <MX_TIM4_Init+0x108>)
 800038c:	4a40      	ldr	r2, [pc, #256]	; (8000490 <MX_TIM4_Init+0x10c>)
 800038e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = HAL_RCC_GetHCLKFreq() / 10 / 256 - 1;
 8000390:	f001 fb94 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8000394:	4603      	mov	r3, r0
 8000396:	4a3f      	ldr	r2, [pc, #252]	; (8000494 <MX_TIM4_Init+0x110>)
 8000398:	fba2 2303 	umull	r2, r3, r2, r3
 800039c:	0adb      	lsrs	r3, r3, #11
 800039e:	3b01      	subs	r3, #1
 80003a0:	4a3a      	ldr	r2, [pc, #232]	; (800048c <MX_TIM4_Init+0x108>)
 80003a2:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <MX_TIM4_Init+0x108>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80003aa:	4b38      	ldr	r3, [pc, #224]	; (800048c <MX_TIM4_Init+0x108>)
 80003ac:	22ff      	movs	r2, #255	; 0xff
 80003ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b36      	ldr	r3, [pc, #216]	; (800048c <MX_TIM4_Init+0x108>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003b6:	4835      	ldr	r0, [pc, #212]	; (800048c <MX_TIM4_Init+0x108>)
 80003b8:	f001 fbec 	bl	8001b94 <HAL_TIM_Base_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d003      	beq.n	80003ca <MX_TIM4_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003c2:	217b      	movs	r1, #123	; 0x7b
 80003c4:	4834      	ldr	r0, [pc, #208]	; (8000498 <MX_TIM4_Init+0x114>)
 80003c6:	f000 f8d9 	bl	800057c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	482d      	ldr	r0, [pc, #180]	; (800048c <MX_TIM4_Init+0x108>)
 80003d8:	f001 ff18 	bl	800220c <HAL_TIM_ConfigClockSource>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <MX_TIM4_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003e2:	2181      	movs	r1, #129	; 0x81
 80003e4:	482c      	ldr	r0, [pc, #176]	; (8000498 <MX_TIM4_Init+0x114>)
 80003e6:	f000 f8c9 	bl	800057c <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80003ea:	4828      	ldr	r0, [pc, #160]	; (800048c <MX_TIM4_Init+0x108>)
 80003ec:	f001 fc92 	bl	8001d14 <HAL_TIM_PWM_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d003      	beq.n	80003fe <MX_TIM4_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003f6:	2186      	movs	r1, #134	; 0x86
 80003f8:	4827      	ldr	r0, [pc, #156]	; (8000498 <MX_TIM4_Init+0x114>)
 80003fa:	f000 f8bf 	bl	800057c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4820      	ldr	r0, [pc, #128]	; (800048c <MX_TIM4_Init+0x108>)
 800040c:	f002 fbf8 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d003      	beq.n	800041e <MX_TIM4_Init+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000416:	218d      	movs	r1, #141	; 0x8d
 8000418:	481f      	ldr	r0, [pc, #124]	; (8000498 <MX_TIM4_Init+0x114>)
 800041a:	f000 f8af 	bl	800057c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <MX_TIM4_Init+0x118>)
 8000420:	2260      	movs	r2, #96	; 0x60
 8000422:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <MX_TIM4_Init+0x118>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <MX_TIM4_Init+0x118>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000430:	4b1a      	ldr	r3, [pc, #104]	; (800049c <MX_TIM4_Init+0x118>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000436:	2200      	movs	r2, #0
 8000438:	4918      	ldr	r1, [pc, #96]	; (800049c <MX_TIM4_Init+0x118>)
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <MX_TIM4_Init+0x108>)
 800043c:	f001 fdd2 	bl	8001fe4 <HAL_TIM_PWM_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <MX_TIM4_Init+0xca>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000446:	2196      	movs	r1, #150	; 0x96
 8000448:	4813      	ldr	r0, [pc, #76]	; (8000498 <MX_TIM4_Init+0x114>)
 800044a:	f000 f897 	bl	800057c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800044e:	2204      	movs	r2, #4
 8000450:	4912      	ldr	r1, [pc, #72]	; (800049c <MX_TIM4_Init+0x118>)
 8000452:	480e      	ldr	r0, [pc, #56]	; (800048c <MX_TIM4_Init+0x108>)
 8000454:	f001 fdc6 	bl	8001fe4 <HAL_TIM_PWM_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d003      	beq.n	8000466 <MX_TIM4_Init+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800045e:	219b      	movs	r1, #155	; 0x9b
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <MX_TIM4_Init+0x114>)
 8000462:	f000 f88b 	bl	800057c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000466:	2208      	movs	r2, #8
 8000468:	490c      	ldr	r1, [pc, #48]	; (800049c <MX_TIM4_Init+0x118>)
 800046a:	4808      	ldr	r0, [pc, #32]	; (800048c <MX_TIM4_Init+0x108>)
 800046c:	f001 fdba 	bl	8001fe4 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d003      	beq.n	800047e <MX_TIM4_Init+0xfa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000476:	21a0      	movs	r1, #160	; 0xa0
 8000478:	4807      	ldr	r0, [pc, #28]	; (8000498 <MX_TIM4_Init+0x114>)
 800047a:	f000 f87f 	bl	800057c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 800047e:	4803      	ldr	r0, [pc, #12]	; (800048c <MX_TIM4_Init+0x108>)
 8000480:	f7ff ff4a 	bl	8000318 <HAL_TIM_MspPostInit>

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000002c 	.word	0x2000002c
 8000490:	40000800 	.word	0x40000800
 8000494:	cccccccd 	.word	0xcccccccd
 8000498:	08002d70 	.word	0x08002d70
 800049c:	20000078 	.word	0x20000078

080004a0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a4:	f000 f9e9 	bl	800087a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a8:	f000 f806 	bl	80004b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

	// initialize KAMeLeon peripherals used in this project
	joy_init();
 80004ac:	f7ff fe9e 	bl	80001ec <joy_init>
	led_rgb_init();
 80004b0:	f7ff fec0 	bl	8000234 <led_rgb_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <main+0x14>
	...

080004b8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b096      	sub	sp, #88	; 0x58
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004be:	2310      	movs	r3, #16
 80004c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c2:	2301      	movs	r3, #1
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004ca:	2360      	movs	r3, #96	; 0x60
 80004cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	2302      	movs	r3, #2
 80004d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004d2:	2301      	movs	r3, #1
 80004d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004da:	2328      	movs	r3, #40	; 0x28
 80004dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004de:	2302      	movs	r3, #2
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fd3e 	bl	8000f70 <HAL_RCC_OscConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d003      	beq.n	8000502 <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80004fa:	218d      	movs	r1, #141	; 0x8d
 80004fc:	481d      	ldr	r0, [pc, #116]	; (8000574 <SystemClock_Config+0xbc>)
 80004fe:	f000 f83d 	bl	800057c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2303      	movs	r3, #3
 8000508:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2104      	movs	r1, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f942 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d003      	beq.n	800052e <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000526:	219b      	movs	r1, #155	; 0x9b
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <SystemClock_Config+0xbc>)
 800052a:	f000 f827 	bl	800057c <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000532:	f000 fcc7 	bl	8000ec4 <HAL_PWREx_ControlVoltageScaling>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d003      	beq.n	8000544 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800053c:	21a2      	movs	r1, #162	; 0xa2
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <SystemClock_Config+0xbc>)
 8000540:	f000 f81c 	bl	800057c <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000544:	f001 faba 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8000548:	4603      	mov	r3, r0
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <SystemClock_Config+0xc0>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	099b      	lsrs	r3, r3, #6
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fadf 	bl	8000b16 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000558:	2004      	movs	r0, #4
 800055a:	f000 fae9 	bl	8000b30 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000566:	f000 faba 	bl	8000ade <HAL_NVIC_SetPriority>
}
 800056a:	bf00      	nop
 800056c:	3758      	adds	r7, #88	; 0x58
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	08002d94 	.word	0x08002d94
 8000578:	10624dd3 	.word	0x10624dd3

0800057c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000586:	e7fe      	b.n	8000586 <_Error_Handler+0xa>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <HAL_MspInit+0x98>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000592:	4a23      	ldr	r2, [pc, #140]	; (8000620 <HAL_MspInit+0x98>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6613      	str	r3, [r2, #96]	; 0x60
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <HAL_MspInit+0x98>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_MspInit+0x98>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005aa:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_MspInit+0x98>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	6593      	str	r3, [r2, #88]	; 0x58
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_MspInit+0x98>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 fa82 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	f06f 000b 	mvn.w	r0, #11
 80005cc:	f000 fa87 	bl	8000ade <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	f06f 000a 	mvn.w	r0, #10
 80005d8:	f000 fa81 	bl	8000ade <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	f06f 0009 	mvn.w	r0, #9
 80005e4:	f000 fa7b 	bl	8000ade <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	f06f 0004 	mvn.w	r0, #4
 80005f0:	f000 fa75 	bl	8000ade <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	f06f 0003 	mvn.w	r0, #3
 80005fc:	f000 fa6f 	bl	8000ade <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	f06f 0001 	mvn.w	r0, #1
 8000608:	f000 fa69 	bl	8000ade <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000614:	f000 fa63 	bl	8000ade <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <NMI_Handler+0x4>

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000670:	f000 f958 	bl	8000924 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000674:	f000 fa78 	bl	8000b68 <HAL_SYSTICK_IRQHandler>
	static uint8_t interrupt = 0;
	static uint8_t _red, _green, _blue= 0;
	static uint8_t _activeColor = 1;


	if(++interrupt == 50) // we've counted 50 interrupts
 8000678:	4b5c      	ldr	r3, [pc, #368]	; (80007ec <SysTick_Handler+0x180>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <SysTick_Handler+0x180>)
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4b59      	ldr	r3, [pc, #356]	; (80007ec <SysTick_Handler+0x180>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b32      	cmp	r3, #50	; 0x32
 800068a:	f040 80ac 	bne.w	80007e6 <SysTick_Handler+0x17a>
	{
		interrupt = 0; // reset the interrupt counter
 800068e:	4b57      	ldr	r3, [pc, #348]	; (80007ec <SysTick_Handler+0x180>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		if (JOY_UP_DOWN)
 8000694:	4b56      	ldr	r3, [pc, #344]	; (80007f0 <SysTick_Handler+0x184>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	43db      	mvns	r3, r3
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d029      	beq.n	80006f6 <SysTick_Handler+0x8a>
		{
			if (_activeColor == 1)
 80006a2:	4b54      	ldr	r3, [pc, #336]	; (80007f4 <SysTick_Handler+0x188>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d109      	bne.n	80006be <SysTick_Handler+0x52>
			{
				if (_red < 255) _red++;
 80006aa:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <SysTick_Handler+0x18c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2bff      	cmp	r3, #255	; 0xff
 80006b0:	d005      	beq.n	80006be <SysTick_Handler+0x52>
 80006b2:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <SysTick_Handler+0x18c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <SysTick_Handler+0x18c>)
 80006bc:	701a      	strb	r2, [r3, #0]
			}
			if (_activeColor == 2)
 80006be:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <SysTick_Handler+0x188>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d109      	bne.n	80006da <SysTick_Handler+0x6e>
			{
				if (_green < 255) _green++;
 80006c6:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <SysTick_Handler+0x190>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d005      	beq.n	80006da <SysTick_Handler+0x6e>
 80006ce:	4b4b      	ldr	r3, [pc, #300]	; (80007fc <SysTick_Handler+0x190>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b49      	ldr	r3, [pc, #292]	; (80007fc <SysTick_Handler+0x190>)
 80006d8:	701a      	strb	r2, [r3, #0]
			}
			if (_activeColor == 3)
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <SysTick_Handler+0x188>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d109      	bne.n	80006f6 <SysTick_Handler+0x8a>
			{
				if (_blue < 255) _blue++;
 80006e2:	4b47      	ldr	r3, [pc, #284]	; (8000800 <SysTick_Handler+0x194>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2bff      	cmp	r3, #255	; 0xff
 80006e8:	d005      	beq.n	80006f6 <SysTick_Handler+0x8a>
 80006ea:	4b45      	ldr	r3, [pc, #276]	; (8000800 <SysTick_Handler+0x194>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b43      	ldr	r3, [pc, #268]	; (8000800 <SysTick_Handler+0x194>)
 80006f4:	701a      	strb	r2, [r3, #0]
			}
		}
		if (JOY_DOWN_DOWN)
 80006f6:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <SysTick_Handler+0x184>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	2b00      	cmp	r3, #0
 8000702:	d029      	beq.n	8000758 <SysTick_Handler+0xec>
		{
			if (_activeColor == 1)
 8000704:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <SysTick_Handler+0x188>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d109      	bne.n	8000720 <SysTick_Handler+0xb4>
			{
				if (_red > 0) _red--;
 800070c:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <SysTick_Handler+0x18c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d005      	beq.n	8000720 <SysTick_Handler+0xb4>
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <SysTick_Handler+0x18c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <SysTick_Handler+0x18c>)
 800071e:	701a      	strb	r2, [r3, #0]
			}
			if (_activeColor == 2)
 8000720:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <SysTick_Handler+0x188>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d109      	bne.n	800073c <SysTick_Handler+0xd0>
			{
				if (_green > 0) _green--;
 8000728:	4b34      	ldr	r3, [pc, #208]	; (80007fc <SysTick_Handler+0x190>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <SysTick_Handler+0xd0>
 8000730:	4b32      	ldr	r3, [pc, #200]	; (80007fc <SysTick_Handler+0x190>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <SysTick_Handler+0x190>)
 800073a:	701a      	strb	r2, [r3, #0]
			}
			if (_activeColor == 3)
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <SysTick_Handler+0x188>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d109      	bne.n	8000758 <SysTick_Handler+0xec>
			{
				if (_blue > 0) _blue--;
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <SysTick_Handler+0x194>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d005      	beq.n	8000758 <SysTick_Handler+0xec>
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SysTick_Handler+0x194>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <SysTick_Handler+0x194>)
 8000756:	701a      	strb	r2, [r3, #0]
			}
		}
		if (JOY_RIGHT_DOWN)
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <SysTick_Handler+0x184>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <SysTick_Handler+0xfc>
 8000764:	2301      	movs	r3, #1
 8000766:	e000      	b.n	800076a <SysTick_Handler+0xfe>
 8000768:	2300      	movs	r3, #0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00c      	beq.n	8000788 <SysTick_Handler+0x11c>
		{
			_activeColor++;
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <SysTick_Handler+0x188>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <SysTick_Handler+0x188>)
 8000778:	701a      	strb	r2, [r3, #0]
			if(_activeColor == 4) _activeColor = 1;
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <SysTick_Handler+0x188>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b04      	cmp	r3, #4
 8000780:	d102      	bne.n	8000788 <SysTick_Handler+0x11c>
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <SysTick_Handler+0x188>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
		}
		if (JOY_LEFT_DOWN)
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <SysTick_Handler+0x184>)
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	43db      	mvns	r3, r3
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00c      	beq.n	80007b0 <SysTick_Handler+0x144>
		{
			_activeColor--;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <SysTick_Handler+0x188>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3b01      	subs	r3, #1
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <SysTick_Handler+0x188>)
 80007a0:	701a      	strb	r2, [r3, #0]
			if(_activeColor == 0) _activeColor = 3;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <SysTick_Handler+0x188>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <SysTick_Handler+0x144>
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <SysTick_Handler+0x188>)
 80007ac:	2203      	movs	r2, #3
 80007ae:	701a      	strb	r2, [r3, #0]
		}
		if (JOY_OK_DOWN) _red = _green = _blue = 0;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <SysTick_Handler+0x184>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00a      	beq.n	80007d4 <SysTick_Handler+0x168>
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <SysTick_Handler+0x194>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <SysTick_Handler+0x194>)
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <SysTick_Handler+0x190>)
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SysTick_Handler+0x190>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <SysTick_Handler+0x18c>)
 80007d2:	701a      	strb	r2, [r3, #0]
		led_rgb_set_intensity(_red, _green, _blue);
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <SysTick_Handler+0x18c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <SysTick_Handler+0x190>)
 80007da:	7811      	ldrb	r1, [r2, #0]
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <SysTick_Handler+0x194>)
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fd5b 	bl	800029c <led_rgb_set_intensity>
//
//		led_rgb_set_intensity(_red, _green, _blue);
//	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000094 	.word	0x20000094
 80007f0:	48001000 	.word	0x48001000
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000095 	.word	0x20000095
 80007fc:	20000096 	.word	0x20000096
 8000800:	20000097 	.word	0x20000097

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff ffea 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f002 fa5b 	bl	8002d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fe21 	bl	80004a0 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000860:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800086c:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8000870:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000874:	2000009c 	.word	0x2000009c

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>

0800087a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000880:	2300      	movs	r3, #0
 8000882:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f91f 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f80e 	bl	80008ac <HAL_InitTick>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	e001      	b.n	80008a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800089c:	f7ff fe74 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_InitTick+0x6c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d023      	beq.n	8000908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_InitTick+0x70>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_InitTick+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f91d 	bl	8000b16 <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10f      	bne.n	8000902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d809      	bhi.n	80008fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f0:	f000 f8f5 	bl	8000ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_InitTick+0x74>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e007      	b.n	800090c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e004      	b.n	800090c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e001      	b.n	800090c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000000c 	.word	0x2000000c
 800091c:	20000004 	.word	0x20000004
 8000920:	20000008 	.word	0x20000008

08000924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x24>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_IncTick+0x24>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000098 	.word	0x20000098

0800094c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000098 	.word	0x20000098

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f7ff ff8e 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff47 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff5c 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff8e 	bl	8000a1c <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffb0 	bl	8000a84 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d106      	bne.n	8000b4c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b4a:	e005      	b.n	8000b58 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b52:	f023 0304 	bic.w	r3, r3, #4
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b6c:	f000 f802 	bl	8000b74 <HAL_SYSTICK_Callback>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	e166      	b.n	8000e62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8158 	beq.w	8000e5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d005      	beq.n	8000bc4 <HAL_GPIO_Init+0x40>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d017      	beq.n	8000c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3208      	adds	r2, #8
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691a      	ldr	r2, [r3, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0203 	and.w	r2, r3, #3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 80b2 	beq.w	8000e5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf8:	4b61      	ldr	r3, [pc, #388]	; (8000e80 <HAL_GPIO_Init+0x2fc>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfc:	4a60      	ldr	r2, [pc, #384]	; (8000e80 <HAL_GPIO_Init+0x2fc>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6613      	str	r3, [r2, #96]	; 0x60
 8000d04:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <HAL_GPIO_Init+0x2fc>)
 8000d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d10:	4a5c      	ldr	r2, [pc, #368]	; (8000e84 <HAL_GPIO_Init+0x300>)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	3302      	adds	r3, #2
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d3a:	d02b      	beq.n	8000d94 <HAL_GPIO_Init+0x210>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a52      	ldr	r2, [pc, #328]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d025      	beq.n	8000d90 <HAL_GPIO_Init+0x20c>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <HAL_GPIO_Init+0x308>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d01f      	beq.n	8000d8c <HAL_GPIO_Init+0x208>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <HAL_GPIO_Init+0x30c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d019      	beq.n	8000d88 <HAL_GPIO_Init+0x204>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <HAL_GPIO_Init+0x310>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d013      	beq.n	8000d84 <HAL_GPIO_Init+0x200>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <HAL_GPIO_Init+0x314>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1fc>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4d      	ldr	r2, [pc, #308]	; (8000e9c <HAL_GPIO_Init+0x318>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1f8>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4c      	ldr	r2, [pc, #304]	; (8000ea0 <HAL_GPIO_Init+0x31c>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1f4>
 8000d74:	2307      	movs	r3, #7
 8000d76:	e00e      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d78:	2308      	movs	r3, #8
 8000d7a:	e00c      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	e00a      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d80:	2305      	movs	r3, #5
 8000d82:	e008      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e004      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d94:	2300      	movs	r3, #0
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	f002 0203 	and.w	r2, r2, #3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000da6:	4937      	ldr	r1, [pc, #220]	; (8000e84 <HAL_GPIO_Init+0x300>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db4:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dd8:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e02:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e56:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f ae91 	bne.w	8000b94 <HAL_GPIO_Init+0x10>
  }
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	371c      	adds	r7, #28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48000c00 	.word	0x48000c00
 8000e94:	48001000 	.word	0x48001000
 8000e98:	48001400 	.word	0x48001400
 8000e9c:	48001800 	.word	0x48001800
 8000ea0:	48001c00 	.word	0x48001c00
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ed2:	d130      	bne.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee0:	d038      	beq.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2232      	movs	r2, #50	; 0x32
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0c9b      	lsrs	r3, r3, #18
 8000f04:	3301      	adds	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f08:	e002      	b.n	8000f10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1c:	d102      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f2      	bne.n	8000f0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f30:	d110      	bne.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e00f      	b.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f42:	d007      	beq.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40007000 	.word	0x40007000
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	431bde83 	.word	0x431bde83

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f000 bc08 	b.w	8001794 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f84:	4b96      	ldr	r3, [pc, #600]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f8e:	4b94      	ldr	r3, [pc, #592]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80e4 	beq.w	800116e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d007      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4c>
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b0c      	cmp	r3, #12
 8000fb0:	f040 808b 	bne.w	80010ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f040 8087 	bne.w	80010ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fbc:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x64>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e3df      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	4b81      	ldr	r3, [pc, #516]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <HAL_RCC_OscConfig+0x7e>
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fec:	e005      	b.n	8000ffa <HAL_RCC_OscConfig+0x8a>
 8000fee:	4b7c      	ldr	r3, [pc, #496]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d223      	bcs.n	8001046 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fd66 	bl	8001ad4 <RCC_SetFlashLatencyFromMSIRange>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e3c0      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001012:	4b73      	ldr	r3, [pc, #460]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a72      	ldr	r2, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b70      	ldr	r3, [pc, #448]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	496d      	ldr	r1, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001030:	4b6b      	ldr	r3, [pc, #428]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4968      	ldr	r1, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
 8001044:	e025      	b.n	8001092 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001046:	4b66      	ldr	r3, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a65      	ldr	r2, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4960      	ldr	r1, [pc, #384]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001064:	4b5e      	ldr	r3, [pc, #376]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	495b      	ldr	r1, [pc, #364]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fd26 	bl	8001ad4 <RCC_SetFlashLatencyFromMSIRange>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e380      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001092:	f000 fc87 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001096:	4602      	mov	r2, r0
 8001098:	4b51      	ldr	r3, [pc, #324]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	4950      	ldr	r1, [pc, #320]	; (80011e4 <HAL_RCC_OscConfig+0x274>)
 80010a4:	5ccb      	ldrb	r3, [r1, r3]
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_RCC_OscConfig+0x278>)
 80010b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010b2:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fbf8 	bl	80008ac <HAL_InitTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d052      	beq.n	800116c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	e364      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d032      	beq.n	8001138 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a42      	ldr	r2, [pc, #264]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010de:	f7ff fc35 	bl	800094c <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc31 	bl	800094c <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e34d      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a35      	ldr	r2, [pc, #212]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4930      	ldr	r1, [pc, #192]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	492b      	ldr	r1, [pc, #172]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
 8001136:	e01a      	b.n	800116e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001144:	f7ff fc02 	bl	800094c <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800114c:	f7ff fbfe 	bl	800094c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e31a      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x1dc>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800116c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d073      	beq.n	8001262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b08      	cmp	r3, #8
 800117e:	d005      	beq.n	800118c <HAL_RCC_OscConfig+0x21c>
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b0c      	cmp	r3, #12
 8001184:	d10e      	bne.n	80011a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d10b      	bne.n	80011a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d063      	beq.n	8001260 <HAL_RCC_OscConfig+0x2f0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d15f      	bne.n	8001260 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e2f7      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d106      	bne.n	80011bc <HAL_RCC_OscConfig+0x24c>
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e025      	b.n	8001208 <HAL_RCC_OscConfig+0x298>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d114      	bne.n	80011f0 <HAL_RCC_OscConfig+0x280>
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a02      	ldr	r2, [pc, #8]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e013      	b.n	8001208 <HAL_RCC_OscConfig+0x298>
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08002da8 	.word	0x08002da8
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000008 	.word	0x20000008
 80011f0:	4ba0      	ldr	r3, [pc, #640]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a9f      	ldr	r2, [pc, #636]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b9d      	ldr	r3, [pc, #628]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a9c      	ldr	r2, [pc, #624]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fb9c 	bl	800094c <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fb98 	bl	800094c <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e2b4      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122a:	4b92      	ldr	r3, [pc, #584]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x2a8>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fb88 	bl	800094c <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fb84 	bl	800094c <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e2a0      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x2d0>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d060      	beq.n	8001330 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d005      	beq.n	8001280 <HAL_RCC_OscConfig+0x310>
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2b0c      	cmp	r3, #12
 8001278:	d119      	bne.n	80012ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d116      	bne.n	80012ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001280:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x328>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e27d      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	4973      	ldr	r1, [pc, #460]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ac:	e040      	b.n	8001330 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d023      	beq.n	80012fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b6:	4b6f      	ldr	r3, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6e      	ldr	r2, [pc, #440]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fb43 	bl	800094c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fb3f 	bl	800094c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e25b      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012dc:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	495f      	ldr	r1, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e018      	b.n	8001330 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a5c      	ldr	r2, [pc, #368]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fb1f 	bl	800094c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fb1b 	bl	800094c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e237      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001324:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d03c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d01c      	beq.n	800137e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001344:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001354:	f7ff fafa 	bl	800094c <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff faf6 	bl	800094c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e212      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ef      	beq.n	800135c <HAL_RCC_OscConfig+0x3ec>
 800137c:	e01b      	b.n	80013b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001384:	4a3b      	ldr	r2, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff fadd 	bl	800094c <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff fad9 	bl	800094c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1f5      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ef      	bne.n	8001396 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80a6 	beq.w	8001510 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10d      	bne.n	80013f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	4a26      	ldr	r2, [pc, #152]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6593      	str	r3, [r2, #88]	; 0x58
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ec:	2301      	movs	r3, #1
 80013ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_RCC_OscConfig+0x508>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d118      	bne.n	800142e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_RCC_OscConfig+0x508>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_RCC_OscConfig+0x508>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001408:	f7ff faa0 	bl	800094c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001410:	f7ff fa9c 	bl	800094c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1b8      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x508>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d108      	bne.n	8001448 <HAL_RCC_OscConfig+0x4d8>
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001446:	e029      	b.n	800149c <HAL_RCC_OscConfig+0x52c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d115      	bne.n	800147c <HAL_RCC_OscConfig+0x50c>
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001466:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_RCC_OscConfig+0x504>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001470:	e014      	b.n	800149c <HAL_RCC_OscConfig+0x52c>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40007000 	.word	0x40007000
 800147c:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800147e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001482:	4a9c      	ldr	r2, [pc, #624]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148c:	4b99      	ldr	r3, [pc, #612]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d016      	beq.n	80014d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fa52 	bl	800094c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff fa4e 	bl	800094c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e168      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c2:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80014c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0ed      	beq.n	80014ac <HAL_RCC_OscConfig+0x53c>
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d2:	f7ff fa3b 	bl	800094c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fa37 	bl	800094c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e151      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f0:	4b80      	ldr	r3, [pc, #512]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80014f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ed      	bne.n	80014da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014fe:	7ffb      	ldrb	r3, [r7, #31]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001504:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	4a7a      	ldr	r2, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800150a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800150e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d03c      	beq.n	8001596 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01c      	beq.n	800155e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001524:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800152a:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fa0a 	bl	800094c <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153c:	f7ff fa06 	bl	800094c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e122      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800154e:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ef      	beq.n	800153c <HAL_RCC_OscConfig+0x5cc>
 800155c:	e01b      	b.n	8001596 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800155e:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001564:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff f9ed 	bl	800094c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001576:	f7ff f9e9 	bl	800094c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e105      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001588:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800158a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ef      	bne.n	8001576 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80f9 	beq.w	8001792 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	f040 80cf 	bne.w	8001748 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d12c      	bne.n	8001618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	3b01      	subs	r3, #1
 80015ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d123      	bne.n	8001618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d11b      	bne.n	8001618 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d113      	bne.n	8001618 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d109      	bne.n	8001618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d071      	beq.n	80016fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d068      	beq.n	80016f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d105      	bne.n	8001636 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0ac      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001644:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001646:	f7ff f981 	bl	800094c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f97d 	bl	800094c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e099      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x788>)
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800167c:	3a01      	subs	r2, #1
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001686:	0212      	lsls	r2, r2, #8
 8001688:	4311      	orrs	r1, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800168e:	0852      	lsrs	r2, r2, #1
 8001690:	3a01      	subs	r2, #1
 8001692:	0552      	lsls	r2, r2, #21
 8001694:	4311      	orrs	r1, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800169a:	0852      	lsrs	r2, r2, #1
 800169c:	3a01      	subs	r2, #1
 800169e:	0652      	lsls	r2, r2, #25
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a6:	06d2      	lsls	r2, r2, #27
 80016a8:	430a      	orrs	r2, r1
 80016aa:	4912      	ldr	r1, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80016b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016c8:	f7ff f940 	bl	800094c <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f93c 	bl	800094c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e058      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_OscConfig+0x784>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ee:	e050      	b.n	8001792 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e04f      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d144      	bne.n	8001792 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a23      	ldr	r2, [pc, #140]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 800170e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001720:	f7ff f914 	bl	800094c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff f910 	bl	800094c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e02c      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x7b8>
 8001746:	e024      	b.n	8001792 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d01f      	beq.n	800178e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 8001754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff f8f7 	bl	800094c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff f8f3 	bl	800094c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e00f      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4905      	ldr	r1, [pc, #20]	; (800179c <HAL_RCC_OscConfig+0x82c>)
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x830>)
 8001788:	4013      	ands	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
 800178c:	e001      	b.n	8001792 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	feeefffc 	.word	0xfeeefffc

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0e7      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4970      	ldr	r1, [pc, #448]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b6e      	ldr	r3, [pc, #440]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0cf      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d010      	beq.n	8001816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001800:	429a      	cmp	r2, r3
 8001802:	d908      	bls.n	8001816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4960      	ldr	r1, [pc, #384]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04c      	beq.n	80018bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d121      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0a6      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e09a      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e08e      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e086      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b46      	ldr	r3, [pc, #280]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4943      	ldr	r1, [pc, #268]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800188c:	f7ff f85e 	bl	800094c <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff f85a 	bl	800094c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e06e      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d010      	beq.n	80018ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d208      	bcs.n	80018ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	492b      	ldr	r1, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d210      	bcs.n	800191a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 0207 	bic.w	r2, r3, #7
 8001900:	4923      	ldr	r1, [pc, #140]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_ClockConfig+0x1ec>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e036      	b.n	8001988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	4918      	ldr	r1, [pc, #96]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4910      	ldr	r1, [pc, #64]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001958:	f000 f824 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	490b      	ldr	r1, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1f4>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1f8>)
 8001976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1fc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe ff95 	bl	80008ac <HAL_InitTick>
 8001982:	4603      	mov	r3, r0
 8001984:	72fb      	strb	r3, [r7, #11]

  return status;
 8001986:	7afb      	ldrb	r3, [r7, #11]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40022000 	.word	0x40022000
 8001994:	40021000 	.word	0x40021000
 8001998:	08002da8 	.word	0x08002da8
 800199c:	20000004 	.word	0x20000004
 80019a0:	20000008 	.word	0x20000008

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d121      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d11e      	bne.n	8001a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e005      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10d      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	e004      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d134      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d003      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xac>
 8001a48:	e005      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a4c:	617b      	str	r3, [r7, #20]
      break;
 8001a4e:	e005      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a52:	617b      	str	r3, [r7, #20]
      break;
 8001a54:	e002      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	617b      	str	r3, [r7, #20]
      break;
 8001a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	3301      	adds	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	fb03 f202 	mul.w	r2, r3, r2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_GetSysClockFreq+0x108>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	0e5b      	lsrs	r3, r3, #25
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002db8 	.word	0x08002db8
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200

08001abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aec:	f7ff f9dc 	bl	8000ea8 <HAL_PWREx_GetVoltageRange>
 8001af0:	6178      	str	r0, [r7, #20]
 8001af2:	e014      	b.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6593      	str	r3, [r2, #88]	; 0x58
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b0c:	f7ff f9cc 	bl	8000ea8 <HAL_PWREx_GetVoltageRange>
 8001b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b24:	d10b      	bne.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b80      	cmp	r3, #128	; 0x80
 8001b2a:	d919      	bls.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001b30:	d902      	bls.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b32:	2302      	movs	r3, #2
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	e013      	b.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b38:	2301      	movs	r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e010      	b.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d902      	bls.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b44:	2303      	movs	r3, #3
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	e00a      	b.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b80      	cmp	r3, #128	; 0x80
 8001b4e:	d102      	bne.n	8001b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b50:	2302      	movs	r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	e004      	b.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b70      	cmp	r3, #112	; 0x70
 8001b5a:	d101      	bne.n	8001b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 0207 	bic.w	r2, r3, #7
 8001b68:	4909      	ldr	r1, [pc, #36]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e049      	b.n	8001c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fb8c 	bl	80002d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 fbe4 	bl	80023a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e047      	b.n	8001cec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_TIM_Base_Start+0xb4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_TIM_Base_Start+0x66>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d018      	beq.n	8001caa <HAL_TIM_Base_Start+0x66>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_TIM_Base_Start+0xb8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_TIM_Base_Start+0x66>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <HAL_TIM_Base_Start+0xbc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_TIM_Base_Start+0x66>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_TIM_Base_Start+0xc0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_TIM_Base_Start+0x66>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_TIM_Base_Start+0xc4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_TIM_Base_Start+0x66>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_TIM_Base_Start+0xc8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d115      	bne.n	8001cd6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_TIM_Base_Start+0xcc>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d015      	beq.n	8001ce8 <HAL_TIM_Base_Start+0xa4>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d011      	beq.n	8001ce8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd4:	e008      	b.n	8001ce8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40013400 	.word	0x40013400
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	00010007 	.word	0x00010007

08001d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e049      	b.n	8001dba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f841 	bl	8001dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 fb24 	bl	80023a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_TIM_PWM_Start+0x24>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e03c      	b.n	8001e76 <HAL_TIM_PWM_Start+0x9e>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d109      	bne.n	8001e16 <HAL_TIM_PWM_Start+0x3e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	e02f      	b.n	8001e76 <HAL_TIM_PWM_Start+0x9e>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d109      	bne.n	8001e30 <HAL_TIM_PWM_Start+0x58>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e022      	b.n	8001e76 <HAL_TIM_PWM_Start+0x9e>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d109      	bne.n	8001e4a <HAL_TIM_PWM_Start+0x72>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	e015      	b.n	8001e76 <HAL_TIM_PWM_Start+0x9e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d109      	bne.n	8001e64 <HAL_TIM_PWM_Start+0x8c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e008      	b.n	8001e76 <HAL_TIM_PWM_Start+0x9e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e09c      	b.n	8001fb8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PWM_Start+0xb6>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e8c:	e023      	b.n	8001ed6 <HAL_TIM_PWM_Start+0xfe>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Start+0xc6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e9c:	e01b      	b.n	8001ed6 <HAL_TIM_PWM_Start+0xfe>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_PWM_Start+0xd6>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	e013      	b.n	8001ed6 <HAL_TIM_PWM_Start+0xfe>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d104      	bne.n	8001ebe <HAL_TIM_PWM_Start+0xe6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ebc:	e00b      	b.n	8001ed6 <HAL_TIM_PWM_Start+0xfe>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d104      	bne.n	8001ece <HAL_TIM_PWM_Start+0xf6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ecc:	e003      	b.n	8001ed6 <HAL_TIM_PWM_Start+0xfe>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fe68 	bl	8002bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <HAL_TIM_PWM_Start+0x1e8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a34      	ldr	r2, [pc, #208]	; (8001fc4 <HAL_TIM_PWM_Start+0x1ec>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x13e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <HAL_TIM_PWM_Start+0x1f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x13e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <HAL_TIM_PWM_Start+0x1f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_PWM_Start+0x13e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <HAL_TIM_PWM_Start+0x1f8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PWM_Start+0x142>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_TIM_PWM_Start+0x144>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_TIM_PWM_Start+0x1e8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01d      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x19e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d018      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x19e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_TIM_PWM_Start+0x1fc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x19e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_TIM_PWM_Start+0x200>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x19e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_TIM_PWM_Start+0x204>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x19e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_TIM_PWM_Start+0x1ec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x19e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_TIM_PWM_Start+0x1f0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d115      	bne.n	8001fa2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_TIM_PWM_Start+0x208>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d015      	beq.n	8001fb4 <HAL_TIM_PWM_Start+0x1dc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d011      	beq.n	8001fb4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	e008      	b.n	8001fb4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e000      	b.n	8001fb6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40013400 	.word	0x40013400
 8001fc8:	40014000 	.word	0x40014000
 8001fcc:	40014400 	.word	0x40014400
 8001fd0:	40014800 	.word	0x40014800
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	00010007 	.word	0x00010007

08001fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0ff      	b.n	8002202 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b14      	cmp	r3, #20
 800200e:	f200 80f0 	bhi.w	80021f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	0800206d 	.word	0x0800206d
 800201c:	080021f3 	.word	0x080021f3
 8002020:	080021f3 	.word	0x080021f3
 8002024:	080021f3 	.word	0x080021f3
 8002028:	080020ad 	.word	0x080020ad
 800202c:	080021f3 	.word	0x080021f3
 8002030:	080021f3 	.word	0x080021f3
 8002034:	080021f3 	.word	0x080021f3
 8002038:	080020ef 	.word	0x080020ef
 800203c:	080021f3 	.word	0x080021f3
 8002040:	080021f3 	.word	0x080021f3
 8002044:	080021f3 	.word	0x080021f3
 8002048:	0800212f 	.word	0x0800212f
 800204c:	080021f3 	.word	0x080021f3
 8002050:	080021f3 	.word	0x080021f3
 8002054:	080021f3 	.word	0x080021f3
 8002058:	08002171 	.word	0x08002171
 800205c:	080021f3 	.word	0x080021f3
 8002060:	080021f3 	.word	0x080021f3
 8002064:	080021f3 	.word	0x080021f3
 8002068:	080021b1 	.word	0x080021b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fa2e 	bl	80024d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0208 	orr.w	r2, r2, #8
 8002086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6999      	ldr	r1, [r3, #24]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	619a      	str	r2, [r3, #24]
      break;
 80020aa:	e0a5      	b.n	80021f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fa9e 	bl	80025f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	021a      	lsls	r2, r3, #8
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	619a      	str	r2, [r3, #24]
      break;
 80020ec:	e084      	b.n	80021f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fb07 	bl	8002708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0208 	orr.w	r2, r2, #8
 8002108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0204 	bic.w	r2, r2, #4
 8002118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69d9      	ldr	r1, [r3, #28]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	61da      	str	r2, [r3, #28]
      break;
 800212c:	e064      	b.n	80021f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fb6f 	bl	8002818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	021a      	lsls	r2, r3, #8
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	61da      	str	r2, [r3, #28]
      break;
 800216e:	e043      	b.n	80021f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fbb8 	bl	80028ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0208 	orr.w	r2, r2, #8
 800218a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0204 	bic.w	r2, r2, #4
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021ae:	e023      	b.n	80021f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fbfc 	bl	80029b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	021a      	lsls	r2, r3, #8
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021f0:	e002      	b.n	80021f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
      break;
 80021f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002200:	7dfb      	ldrb	r3, [r7, #23]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop

0800220c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_TIM_ConfigClockSource+0x1c>
 8002224:	2302      	movs	r3, #2
 8002226:	e0b6      	b.n	8002396 <HAL_TIM_ConfigClockSource+0x18a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800224a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002264:	d03e      	beq.n	80022e4 <HAL_TIM_ConfigClockSource+0xd8>
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226a:	f200 8087 	bhi.w	800237c <HAL_TIM_ConfigClockSource+0x170>
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	f000 8086 	beq.w	8002382 <HAL_TIM_ConfigClockSource+0x176>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	d87f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 800227c:	2b70      	cmp	r3, #112	; 0x70
 800227e:	d01a      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xaa>
 8002280:	2b70      	cmp	r3, #112	; 0x70
 8002282:	d87b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 8002284:	2b60      	cmp	r3, #96	; 0x60
 8002286:	d050      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x11e>
 8002288:	2b60      	cmp	r3, #96	; 0x60
 800228a:	d877      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 800228c:	2b50      	cmp	r3, #80	; 0x50
 800228e:	d03c      	beq.n	800230a <HAL_TIM_ConfigClockSource+0xfe>
 8002290:	2b50      	cmp	r3, #80	; 0x50
 8002292:	d873      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d058      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x13e>
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d86f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 800229c:	2b30      	cmp	r3, #48	; 0x30
 800229e:	d064      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15e>
 80022a0:	2b30      	cmp	r3, #48	; 0x30
 80022a2:	d86b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d060      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15e>
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d867      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x170>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05c      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15e>
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d05a      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x15e>
 80022b4:	e062      	b.n	800237c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f000 fc55 	bl	8002b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	609a      	str	r2, [r3, #8]
      break;
 80022e2:	e04f      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f000 fc3e 	bl	8002b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002306:	609a      	str	r2, [r3, #8]
      break;
 8002308:	e03c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	461a      	mov	r2, r3
 8002318:	f000 fbb2 	bl	8002a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2150      	movs	r1, #80	; 0x50
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fc0b 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002328:	e02c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	f000 fbd1 	bl	8002ade <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2160      	movs	r1, #96	; 0x60
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fbfb 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002348:	e01c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	461a      	mov	r2, r3
 8002358:	f000 fb92 	bl	8002a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fbeb 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002368:	e00c      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f000 fbe2 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 800237a:	e003      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e000      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <TIM_Base_SetConfig+0x114>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d00f      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <TIM_Base_SetConfig+0x118>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00b      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <TIM_Base_SetConfig+0x11c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <TIM_Base_SetConfig+0x120>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <TIM_Base_SetConfig+0x124>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d108      	bne.n	80023f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2f      	ldr	r2, [pc, #188]	; (80024b4 <TIM_Base_SetConfig+0x114>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d01b      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <TIM_Base_SetConfig+0x118>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d017      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <TIM_Base_SetConfig+0x11c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <TIM_Base_SetConfig+0x120>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00f      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <TIM_Base_SetConfig+0x124>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00b      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <TIM_Base_SetConfig+0x128>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <TIM_Base_SetConfig+0x12c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d003      	beq.n	800243a <TIM_Base_SetConfig+0x9a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <TIM_Base_SetConfig+0x130>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d108      	bne.n	800244c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <TIM_Base_SetConfig+0x114>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00f      	beq.n	8002498 <TIM_Base_SetConfig+0xf8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <TIM_Base_SetConfig+0x124>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00b      	beq.n	8002498 <TIM_Base_SetConfig+0xf8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <TIM_Base_SetConfig+0x128>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0xf8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <TIM_Base_SetConfig+0x12c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0xf8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <TIM_Base_SetConfig+0x130>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d103      	bne.n	80024a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	615a      	str	r2, [r3, #20]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40013400 	.word	0x40013400
 80024c8:	40014000 	.word	0x40014000
 80024cc:	40014400 	.word	0x40014400
 80024d0:	40014800 	.word	0x40014800

080024d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f023 0201 	bic.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 0302 	bic.w	r3, r3, #2
 8002520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <TIM_OC1_SetConfig+0x10c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00f      	beq.n	8002554 <TIM_OC1_SetConfig+0x80>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <TIM_OC1_SetConfig+0x110>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00b      	beq.n	8002554 <TIM_OC1_SetConfig+0x80>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <TIM_OC1_SetConfig+0x114>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d007      	beq.n	8002554 <TIM_OC1_SetConfig+0x80>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a29      	ldr	r2, [pc, #164]	; (80025ec <TIM_OC1_SetConfig+0x118>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d003      	beq.n	8002554 <TIM_OC1_SetConfig+0x80>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <TIM_OC1_SetConfig+0x11c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10c      	bne.n	800256e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0308 	bic.w	r3, r3, #8
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <TIM_OC1_SetConfig+0x10c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00f      	beq.n	8002596 <TIM_OC1_SetConfig+0xc2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <TIM_OC1_SetConfig+0x110>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00b      	beq.n	8002596 <TIM_OC1_SetConfig+0xc2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <TIM_OC1_SetConfig+0x114>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <TIM_OC1_SetConfig+0xc2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <TIM_OC1_SetConfig+0x118>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d003      	beq.n	8002596 <TIM_OC1_SetConfig+0xc2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <TIM_OC1_SetConfig+0x11c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d111      	bne.n	80025ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800259c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	621a      	str	r2, [r3, #32]
}
 80025d4:	bf00      	nop
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40013400 	.word	0x40013400
 80025e8:	40014000 	.word	0x40014000
 80025ec:	40014400 	.word	0x40014400
 80025f0:	40014800 	.word	0x40014800

080025f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f023 0210 	bic.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0320 	bic.w	r3, r3, #32
 8002642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <TIM_OC2_SetConfig+0x100>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_OC2_SetConfig+0x6c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <TIM_OC2_SetConfig+0x104>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10d      	bne.n	800267c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <TIM_OC2_SetConfig+0x100>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00f      	beq.n	80026a4 <TIM_OC2_SetConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <TIM_OC2_SetConfig+0x104>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00b      	beq.n	80026a4 <TIM_OC2_SetConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <TIM_OC2_SetConfig+0x108>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_OC2_SetConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <TIM_OC2_SetConfig+0x10c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_OC2_SetConfig+0xb0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <TIM_OC2_SetConfig+0x110>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d113      	bne.n	80026cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40013400 	.word	0x40013400
 80026fc:	40014000 	.word	0x40014000
 8002700:	40014400 	.word	0x40014400
 8002704:	40014800 	.word	0x40014800

08002708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <TIM_OC3_SetConfig+0xfc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_OC3_SetConfig+0x6a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <TIM_OC3_SetConfig+0x100>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10d      	bne.n	800278e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800278c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <TIM_OC3_SetConfig+0xfc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00f      	beq.n	80027b6 <TIM_OC3_SetConfig+0xae>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <TIM_OC3_SetConfig+0x100>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00b      	beq.n	80027b6 <TIM_OC3_SetConfig+0xae>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1a      	ldr	r2, [pc, #104]	; (800280c <TIM_OC3_SetConfig+0x104>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <TIM_OC3_SetConfig+0xae>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <TIM_OC3_SetConfig+0x108>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_OC3_SetConfig+0xae>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <TIM_OC3_SetConfig+0x10c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d113      	bne.n	80027de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	621a      	str	r2, [r3, #32]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40012c00 	.word	0x40012c00
 8002808:	40013400 	.word	0x40013400
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800

08002818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <TIM_OC4_SetConfig+0xc0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00f      	beq.n	800289c <TIM_OC4_SetConfig+0x84>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <TIM_OC4_SetConfig+0xc4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00b      	beq.n	800289c <TIM_OC4_SetConfig+0x84>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <TIM_OC4_SetConfig+0xc8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <TIM_OC4_SetConfig+0x84>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <TIM_OC4_SetConfig+0xcc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <TIM_OC4_SetConfig+0x84>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <TIM_OC4_SetConfig+0xd0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d109      	bne.n	80028b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40013400 	.word	0x40013400
 80028e0:	40014000 	.word	0x40014000
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800

080028ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <TIM_OC5_SetConfig+0xb4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00f      	beq.n	8002966 <TIM_OC5_SetConfig+0x7a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <TIM_OC5_SetConfig+0xb8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_OC5_SetConfig+0x7a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <TIM_OC5_SetConfig+0xbc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_OC5_SetConfig+0x7a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <TIM_OC5_SetConfig+0xc0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_OC5_SetConfig+0x7a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <TIM_OC5_SetConfig+0xc4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d109      	bne.n	800297a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	621a      	str	r2, [r3, #32]
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40013400 	.word	0x40013400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40014400 	.word	0x40014400
 80029b0:	40014800 	.word	0x40014800

080029b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <TIM_OC6_SetConfig+0xb8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00f      	beq.n	8002a30 <TIM_OC6_SetConfig+0x7c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <TIM_OC6_SetConfig+0xbc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <TIM_OC6_SetConfig+0x7c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <TIM_OC6_SetConfig+0xc0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <TIM_OC6_SetConfig+0x7c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <TIM_OC6_SetConfig+0xc4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_OC6_SetConfig+0x7c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <TIM_OC6_SetConfig+0xc8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d109      	bne.n	8002a44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	029b      	lsls	r3, r3, #10
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	621a      	str	r2, [r3, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40013400 	.word	0x40013400
 8002a74:	40014000 	.word	0x40014000
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800

08002a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f023 0201 	bic.w	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f023 030a 	bic.w	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	621a      	str	r2, [r3, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f023 0210 	bic.w	r2, r3, #16
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	031b      	lsls	r3, r3, #12
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f043 0307 	orr.w	r3, r3, #7
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	021a      	lsls	r2, r3, #8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1a      	ldr	r2, [r3, #32]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	621a      	str	r2, [r3, #32]
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e068      	b.n	8002cea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d108      	bne.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d018      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40013400 	.word	0x40013400
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40000c00 	.word	0x40000c00
 8002d0c:	40014000 	.word	0x40014000

08002d10 <__libc_init_array>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	4d0d      	ldr	r5, [pc, #52]	; (8002d48 <__libc_init_array+0x38>)
 8002d14:	4c0d      	ldr	r4, [pc, #52]	; (8002d4c <__libc_init_array+0x3c>)
 8002d16:	1b64      	subs	r4, r4, r5
 8002d18:	10a4      	asrs	r4, r4, #2
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	42a6      	cmp	r6, r4
 8002d1e:	d109      	bne.n	8002d34 <__libc_init_array+0x24>
 8002d20:	4d0b      	ldr	r5, [pc, #44]	; (8002d50 <__libc_init_array+0x40>)
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__libc_init_array+0x44>)
 8002d24:	f000 f818 	bl	8002d58 <_init>
 8002d28:	1b64      	subs	r4, r4, r5
 8002d2a:	10a4      	asrs	r4, r4, #2
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	42a6      	cmp	r6, r4
 8002d30:	d105      	bne.n	8002d3e <__libc_init_array+0x2e>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d38:	4798      	blx	r3
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	e7ee      	b.n	8002d1c <__libc_init_array+0xc>
 8002d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d42:	4798      	blx	r3
 8002d44:	3601      	adds	r6, #1
 8002d46:	e7f2      	b.n	8002d2e <__libc_init_array+0x1e>
 8002d48:	08002de8 	.word	0x08002de8
 8002d4c:	08002de8 	.word	0x08002de8
 8002d50:	08002de8 	.word	0x08002de8
 8002d54:	08002dec 	.word	0x08002dec

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
